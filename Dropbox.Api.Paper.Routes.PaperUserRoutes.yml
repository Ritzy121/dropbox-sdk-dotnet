### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes
  commentId: T:Dropbox.Api.Paper.Routes.PaperUserRoutes
  id: PaperUserRoutes
  parent: Dropbox.Api.Paper.Routes
  children:
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate(Dropbox.Api.Paper.ImportFormat,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate(Dropbox.Api.Paper.PaperDocCreateArgs,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload(Dropbox.Api.Paper.PaperDocExport,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload(System.String,Dropbox.Api.Paper.ExportFormat,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList(Dropbox.Api.Paper.ListUsersOnFolderArgs,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList(System.String,System.Int32,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList(Dropbox.Api.Paper.ListPaperDocsArgs,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList(Dropbox.Api.Paper.ListPaperDocsFilterBy,Dropbox.Api.Paper.ListPaperDocsSortBy,Dropbox.Api.Paper.ListPaperDocsSortOrder,System.Int32,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue(Dropbox.Api.Paper.ListPaperDocsContinueArgs,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet(Dropbox.Api.Paper.PaperDocSharingPolicy,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet(System.String,Dropbox.Api.Paper.SharingPolicy,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate(Dropbox.Api.Paper.PaperDocUpdateArgs,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate(System.String,Dropbox.Api.Paper.PaperDocUpdatePolicy,System.Int64,Dropbox.Api.Paper.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd(Dropbox.Api.Paper.AddPaperDocUser,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember},System.String,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList(Dropbox.Api.Paper.ListUsersOnPaperDocArgs,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList(System.String,System.Int32,Dropbox.Api.Paper.UserOnPaperDocFilter,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove(Dropbox.Api.Paper.RemovePaperDocUser,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove(System.String,Dropbox.Api.Sharing.MemberSelector,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate(Dropbox.Api.Paper.PaperFolderCreateArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate(System.String,System.String,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync(Dropbox.Api.Paper.RefPaperDoc)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync(System.String)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync(Dropbox.Api.Paper.ImportFormat,System.String,System.IO.Stream)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync(Dropbox.Api.Paper.PaperDocCreateArgs,System.IO.Stream)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync(Dropbox.Api.Paper.PaperDocExport)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync(System.String,Dropbox.Api.Paper.ExportFormat)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(System.String,System.Int32)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(System.String,System.String)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync(Dropbox.Api.Paper.RefPaperDoc)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync(System.String)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsFilterBy,Dropbox.Api.Paper.ListPaperDocsSortBy,Dropbox.Api.Paper.ListPaperDocsSortOrder,System.Int32)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(System.String)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync(Dropbox.Api.Paper.RefPaperDoc)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync(System.String)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync(Dropbox.Api.Paper.RefPaperDoc)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync(System.String)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync(Dropbox.Api.Paper.PaperDocSharingPolicy)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync(System.String,Dropbox.Api.Paper.SharingPolicy)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync(Dropbox.Api.Paper.PaperDocUpdateArgs,System.IO.Stream)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync(System.String,Dropbox.Api.Paper.PaperDocUpdatePolicy,System.Int64,Dropbox.Api.Paper.ImportFormat,System.IO.Stream)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync(Dropbox.Api.Paper.AddPaperDocUser)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember},System.String,System.Boolean)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(System.String,System.Int32,Dropbox.Api.Paper.UserOnPaperDocFilter)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(System.String,System.String)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync(Dropbox.Api.Paper.RemovePaperDocUser)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync(System.String,Dropbox.Api.Sharing.MemberSelector)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsArchive(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsCreate(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsDownload(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersList(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersListContinue(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsGetFolderInfo(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsList(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsListContinue(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsPermanentlyDelete(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicyGet(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicySet(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUpdate(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersAdd(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersList(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersListContinue(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersRemove(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.EndFoldersCreate(System.IAsyncResult)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync(Dropbox.Api.Paper.PaperFolderCreateArg)
  - Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync(System.String,System.String,System.Nullable{System.Boolean})
  langs:
  - csharp
  - vb
  name: PaperUserRoutes
  nameWithType: PaperUserRoutes
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PaperUserRoutes
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 15
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>The routes for the <xref href=\"Dropbox.Api.Paper\" data-throw-if-not-resolved=\"false\"></xref> namespace</p>\n"
  example: []
  syntax:
    content: 'public class PaperUserRoutes : object'
    content.vb: >-
      Public Class PaperUserRoutes
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync(Dropbox.Api.Paper.RefPaperDoc)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync(Dropbox.Api.Paper.RefPaperDoc)
  id: DocsArchiveAsync(Dropbox.Api.Paper.RefPaperDoc)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsArchiveAsync(RefPaperDoc)
  nameWithType: PaperUserRoutes.DocsArchiveAsync(RefPaperDoc)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync(Dropbox.Api.Paper.RefPaperDoc)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsArchiveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 49
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Marks the given Paper doc as archived.</p>\n<p>This action can be performed or undone by anyone with edit permissions to the\ndoc.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>This endpoint will be retired in September 2020. Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for more information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task DocsArchiveAsync(RefPaperDoc refPaperDoc)
    parameters:
    - id: refPaperDoc
      type: Dropbox.Api.Paper.RefPaperDoc
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function DocsArchiveAsync(refPaperDoc As RefPaperDoc) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  id: BeginDocsArchive(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsArchive(RefPaperDoc, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsArchive(RefPaperDoc, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive(Dropbox.Api.Paper.RefPaperDoc, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsArchive
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 64
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs archive route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsArchive(RefPaperDoc refPaperDoc, System.AsyncCallback callback, object state = null)
    parameters:
    - id: refPaperDoc
      type: Dropbox.Api.Paper.RefPaperDoc
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsArchive(refPaperDoc As RefPaperDoc, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync(System.String)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync(System.String)
  id: DocsArchiveAsync(System.String)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsArchiveAsync(String)
  nameWithType: PaperUserRoutes.DocsArchiveAsync(String)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsArchiveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 89
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Marks the given Paper doc as archived.</p>\n<p>This action can be performed or undone by anyone with edit permissions to the\ndoc.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>This endpoint will be retired in September 2020. Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for more information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task DocsArchiveAsync(string docId)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function DocsArchiveAsync(docId As String) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive(System.String,System.AsyncCallback,System.Object)
  id: BeginDocsArchive(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsArchive(String, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsArchive(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsArchive
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 106
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs archive route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsArchive(string docId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsArchive(docId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsArchive(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsArchive(System.IAsyncResult)
  id: EndDocsArchive(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsArchive(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsArchive(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsArchive(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsArchive
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 125
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs archive route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndDocsArchive(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndDocsArchive(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsArchive*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync(Dropbox.Api.Paper.PaperDocCreateArgs,System.IO.Stream)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync(Dropbox.Api.Paper.PaperDocCreateArgs,System.IO.Stream)
  id: DocsCreateAsync(Dropbox.Api.Paper.PaperDocCreateArgs,System.IO.Stream)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsCreateAsync(PaperDocCreateArgs, System.IO.Stream)
  nameWithType: PaperUserRoutes.DocsCreateAsync(PaperDocCreateArgs, System.IO.Stream)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync(Dropbox.Api.Paper.PaperDocCreateArgs, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsCreateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 152
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Creates a new Paper doc with the provided content.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>This endpoint will be retired in September 2020. Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for more information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperDocCreateUpdateResult> DocsCreateAsync(PaperDocCreateArgs paperDocCreateArgs, System.IO.Stream body)
    parameters:
    - id: paperDocCreateArgs
      type: Dropbox.Api.Paper.PaperDocCreateArgs
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperDocCreateUpdateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsCreateAsync(paperDocCreateArgs As PaperDocCreateArgs, body As System.IO.Stream) As System.Threading.Tasks.Task(Of PaperDocCreateUpdateResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.PaperDocCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate(Dropbox.Api.Paper.PaperDocCreateArgs,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate(Dropbox.Api.Paper.PaperDocCreateArgs,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginDocsCreate(Dropbox.Api.Paper.PaperDocCreateArgs,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsCreate(PaperDocCreateArgs, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsCreate(PaperDocCreateArgs, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate(Dropbox.Api.Paper.PaperDocCreateArgs, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 168
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs create route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsCreate(PaperDocCreateArgs paperDocCreateArgs, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: paperDocCreateArgs
      type: Dropbox.Api.Paper.PaperDocCreateArgs
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsCreate(paperDocCreateArgs As PaperDocCreateArgs, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync(Dropbox.Api.Paper.ImportFormat,System.String,System.IO.Stream)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync(Dropbox.Api.Paper.ImportFormat,System.String,System.IO.Stream)
  id: DocsCreateAsync(Dropbox.Api.Paper.ImportFormat,System.String,System.IO.Stream)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsCreateAsync(ImportFormat, String, System.IO.Stream)
  nameWithType: PaperUserRoutes.DocsCreateAsync(ImportFormat, String, System.IO.Stream)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync(Dropbox.Api.Paper.ImportFormat, System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsCreateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 196
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Creates a new Paper doc with the provided content.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>This endpoint will be retired in September 2020. Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for more information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperDocCreateUpdateResult> DocsCreateAsync(ImportFormat importFormat, string parentFolderId = null, System.IO.Stream body = null)
    parameters:
    - id: importFormat
      type: Dropbox.Api.Paper.ImportFormat
      description: The format of provided data.
    - id: parentFolderId
      type: System.String
      description: >-
        The Paper folder ID where the Paper document should be

        created. The API user has to have write access to this folder or error is

        thrown.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperDocCreateUpdateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsCreateAsync(importFormat As ImportFormat, parentFolderId As String = Nothing, body As System.IO.Stream = Nothing) As System.Threading.Tasks.Task(Of PaperDocCreateUpdateResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.PaperDocCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate(Dropbox.Api.Paper.ImportFormat,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate(Dropbox.Api.Paper.ImportFormat,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginDocsCreate(Dropbox.Api.Paper.ImportFormat,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsCreate(ImportFormat, String, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsCreate(ImportFormat, String, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate(Dropbox.Api.Paper.ImportFormat, System.String, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 220
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs create route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsCreate(ImportFormat importFormat, string parentFolderId = null, System.IO.Stream body = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: importFormat
      type: Dropbox.Api.Paper.ImportFormat
      description: The format of provided data.
    - id: parentFolderId
      type: System.String
      description: >-
        The Paper folder ID where the Paper document should be

        created. The API user has to have write access to this folder or error is

        thrown.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsCreate(importFormat As ImportFormat, parentFolderId As String = Nothing, body As System.IO.Stream = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsCreate(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsCreate(System.IAsyncResult)
  id: EndDocsCreate(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsCreate(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsCreate(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsCreate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 243
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs create route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public PaperDocCreateUpdateResult EndDocsCreate(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.PaperDocCreateUpdateResult
      description: The response to the send request
    content.vb: Public Function EndDocsCreate(asyncResult As System.IAsyncResult) As PaperDocCreateUpdateResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsCreate*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.PaperDocCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync(Dropbox.Api.Paper.PaperDocExport)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync(Dropbox.Api.Paper.PaperDocExport)
  id: DocsDownloadAsync(Dropbox.Api.Paper.PaperDocExport)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsDownloadAsync(PaperDocExport)
  nameWithType: PaperUserRoutes.DocsDownloadAsync(PaperDocExport)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync(Dropbox.Api.Paper.PaperDocExport)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsDownloadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 271
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Exports and downloads Paper doc either as HTML or markdown.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<PaperDocExportResult>> DocsDownloadAsync(PaperDocExport paperDocExport)
    parameters:
    - id: paperDocExport
      type: Dropbox.Api.Paper.PaperDocExport
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Paper.PaperDocExportResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsDownloadAsync(paperDocExport As PaperDocExport) As System.Threading.Tasks.Task(Of IDownloadResponse(Of PaperDocExportResult))
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload(Dropbox.Api.Paper.PaperDocExport,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload(Dropbox.Api.Paper.PaperDocExport,System.AsyncCallback,System.Object)
  id: BeginDocsDownload(Dropbox.Api.Paper.PaperDocExport,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsDownload(PaperDocExport, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsDownload(PaperDocExport, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload(Dropbox.Api.Paper.PaperDocExport, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsDownload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 286
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs download route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsDownload(PaperDocExport paperDocExport, System.AsyncCallback callback, object state = null)
    parameters:
    - id: paperDocExport
      type: Dropbox.Api.Paper.PaperDocExport
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsDownload(paperDocExport As PaperDocExport, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync(System.String,Dropbox.Api.Paper.ExportFormat)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync(System.String,Dropbox.Api.Paper.ExportFormat)
  id: DocsDownloadAsync(System.String,Dropbox.Api.Paper.ExportFormat)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsDownloadAsync(String, ExportFormat)
  nameWithType: PaperUserRoutes.DocsDownloadAsync(String, ExportFormat)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync(System.String, Dropbox.Api.Paper.ExportFormat)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsDownloadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 311
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Exports and downloads Paper doc either as HTML or markdown.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<PaperDocExportResult>> DocsDownloadAsync(string docId, ExportFormat exportFormat)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: exportFormat
      type: Dropbox.Api.Paper.ExportFormat
      description: The export format
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Paper.PaperDocExportResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsDownloadAsync(docId As String, exportFormat As ExportFormat) As System.Threading.Tasks.Task(Of IDownloadResponse(Of PaperDocExportResult))
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload(System.String,Dropbox.Api.Paper.ExportFormat,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload(System.String,Dropbox.Api.Paper.ExportFormat,System.AsyncCallback,System.Object)
  id: BeginDocsDownload(System.String,Dropbox.Api.Paper.ExportFormat,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsDownload(String, ExportFormat, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsDownload(String, ExportFormat, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload(System.String, Dropbox.Api.Paper.ExportFormat, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsDownload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 331
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs download route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsDownload(string docId, ExportFormat exportFormat, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: exportFormat
      type: Dropbox.Api.Paper.ExportFormat
      description: The export format
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsDownload(docId As String, exportFormat As ExportFormat, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsDownload(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsDownload(System.IAsyncResult)
  id: EndDocsDownload(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsDownload(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsDownload(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsDownload(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsDownload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 353
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs download route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<PaperDocExportResult> EndDocsDownload(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Paper.PaperDocExportResult}
      description: The response to the send request
    content.vb: Public Function EndDocsDownload(asyncResult As System.IAsyncResult) As IDownloadResponse(Of PaperDocExportResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsDownload*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)
  id: DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsFolderUsersListAsync(ListUsersOnFolderArgs)
  nameWithType: PaperUserRoutes.DocsFolderUsersListAsync(ListUsersOnFolderArgs)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsFolderUsersListAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 384
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Lists the users who are explicitly invited to the Paper folder in which the\nPaper doc is contained. For private folders all users (including owner) shared on\nthe folder are listed and for team folders all non-team users shared on the folder\nare returned.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListUsersOnFolderResponse> DocsFolderUsersListAsync(ListUsersOnFolderArgs listUsersOnFolderArgs)
    parameters:
    - id: listUsersOnFolderArgs
      type: Dropbox.Api.Paper.ListUsersOnFolderArgs
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnFolderResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsFolderUsersListAsync(listUsersOnFolderArgs As ListUsersOnFolderArgs) As System.Threading.Tasks.Task(Of ListUsersOnFolderResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList(Dropbox.Api.Paper.ListUsersOnFolderArgs,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList(Dropbox.Api.Paper.ListUsersOnFolderArgs,System.AsyncCallback,System.Object)
  id: BeginDocsFolderUsersList(Dropbox.Api.Paper.ListUsersOnFolderArgs,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsFolderUsersList(ListUsersOnFolderArgs, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsFolderUsersList(ListUsersOnFolderArgs, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList(Dropbox.Api.Paper.ListUsersOnFolderArgs, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsFolderUsersList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 399
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs folder users list route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsFolderUsersList(ListUsersOnFolderArgs listUsersOnFolderArgs, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listUsersOnFolderArgs
      type: Dropbox.Api.Paper.ListUsersOnFolderArgs
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsFolderUsersList(listUsersOnFolderArgs As ListUsersOnFolderArgs, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(System.String,System.Int32)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(System.String,System.Int32)
  id: DocsFolderUsersListAsync(System.String,System.Int32)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsFolderUsersListAsync(String, Int32)
  nameWithType: PaperUserRoutes.DocsFolderUsersListAsync(String, Int32)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsFolderUsersListAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 429
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Lists the users who are explicitly invited to the Paper folder in which the\nPaper doc is contained. For private folders all users (including owner) shared on\nthe folder are listed and for team folders all non-team users shared on the folder\nare returned.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListUsersOnFolderResponse> DocsFolderUsersListAsync(string docId, int limit = 1000)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: limit
      type: System.Int32
      description: >-
        Size limit per batch. The maximum number of users that can be

        retrieved per batch is 1000. Higher value results in invalid arguments

        error.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnFolderResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsFolderUsersListAsync(docId As String, limit As Integer = 1000) As System.Threading.Tasks.Task(Of ListUsersOnFolderResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList(System.String,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList(System.String,System.Int32,System.AsyncCallback,System.Object)
  id: BeginDocsFolderUsersList(System.String,System.Int32,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsFolderUsersList(String, Int32, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsFolderUsersList(String, Int32, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList(System.String, System.Int32, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsFolderUsersList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 451
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs folder users list route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsFolderUsersList(string docId, int limit = 1000, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: limit
      type: System.Int32
      description: >-
        Size limit per batch. The maximum number of users that can be

        retrieved per batch is 1000. Higher value results in invalid arguments

        error.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsFolderUsersList(docId As String, limit As Integer = 1000, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersList(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersList(System.IAsyncResult)
  id: EndDocsFolderUsersList(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsFolderUsersList(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsFolderUsersList(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersList(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsFolderUsersList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 473
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs folder users list route\nto complete</p>\n"
  example: []
  syntax:
    content: public ListUsersOnFolderResponse EndDocsFolderUsersList(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.ListUsersOnFolderResponse
      description: The response to the send request
    content.vb: Public Function EndDocsFolderUsersList(asyncResult As System.IAsyncResult) As ListUsersOnFolderResponse
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersList*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs)
  id: DocsFolderUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsFolderUsersListContinueAsync(ListUsersOnFolderContinueArgs)
  nameWithType: PaperUserRoutes.DocsFolderUsersListContinueAsync(ListUsersOnFolderContinueArgs)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsFolderUsersListContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 503
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)\" data-throw-if-not-resolved=\"false\"></xref>, use\nthis to paginate through all users on the Paper folder.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListUsersOnFolderResponse> DocsFolderUsersListContinueAsync(ListUsersOnFolderContinueArgs listUsersOnFolderContinueArgs)
    parameters:
    - id: listUsersOnFolderContinueArgs
      type: Dropbox.Api.Paper.ListUsersOnFolderContinueArgs
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnFolderResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsFolderUsersListContinueAsync(listUsersOnFolderContinueArgs As ListUsersOnFolderContinueArgs) As System.Threading.Tasks.Task(Of ListUsersOnFolderResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.ListUsersCursorError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs,System.AsyncCallback,System.Object)
  id: BeginDocsFolderUsersListContinue(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsFolderUsersListContinue(ListUsersOnFolderContinueArgs, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsFolderUsersListContinue(ListUsersOnFolderContinueArgs, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsFolderUsersListContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 519
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs folder users list continue\nroute.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsFolderUsersListContinue(ListUsersOnFolderContinueArgs listUsersOnFolderContinueArgs, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listUsersOnFolderContinueArgs
      type: Dropbox.Api.Paper.ListUsersOnFolderContinueArgs
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsFolderUsersListContinue(listUsersOnFolderContinueArgs As ListUsersOnFolderContinueArgs, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(System.String,System.String)
  id: DocsFolderUsersListContinueAsync(System.String,System.String)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsFolderUsersListContinueAsync(String, String)
  nameWithType: PaperUserRoutes.DocsFolderUsersListContinueAsync(String, String)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsFolderUsersListContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 549
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)\" data-throw-if-not-resolved=\"false\"></xref>, use\nthis to paginate through all users on the Paper folder.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListUsersOnFolderResponse> DocsFolderUsersListContinueAsync(string docId, string cursor)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: cursor
      type: System.String
      description: The cursor obtained from <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs)" data-throw-if-not-resolved="false"></xref>. Allows for pagination.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnFolderResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsFolderUsersListContinueAsync(docId As String, cursor As String) As System.Threading.Tasks.Task(Of ListUsersOnFolderResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.ListUsersCursorError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginDocsFolderUsersListContinue(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsFolderUsersListContinue(String, String, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsFolderUsersListContinue(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsFolderUsersListContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 573
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs folder users list continue\nroute.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsFolderUsersListContinue(string docId, string cursor, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: cursor
      type: System.String
      description: The cursor obtained from <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs)" data-throw-if-not-resolved="false"></xref>. Allows for pagination.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsFolderUsersListContinue(docId As String, cursor As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersListContinue(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersListContinue(System.IAsyncResult)
  id: EndDocsFolderUsersListContinue(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsFolderUsersListContinue(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsFolderUsersListContinue(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersListContinue(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsFolderUsersListContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 595
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs folder users list\ncontinue route to complete</p>\n"
  example: []
  syntax:
    content: public ListUsersOnFolderResponse EndDocsFolderUsersListContinue(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.ListUsersOnFolderResponse
      description: The response to the send request
    content.vb: Public Function EndDocsFolderUsersListContinue(asyncResult As System.IAsyncResult) As ListUsersOnFolderResponse
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersListContinue*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.ListUsersCursorError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync(Dropbox.Api.Paper.RefPaperDoc)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync(Dropbox.Api.Paper.RefPaperDoc)
  id: DocsGetFolderInfoAsync(Dropbox.Api.Paper.RefPaperDoc)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsGetFolderInfoAsync(RefPaperDoc)
  nameWithType: PaperUserRoutes.DocsGetFolderInfoAsync(RefPaperDoc)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync(Dropbox.Api.Paper.RefPaperDoc)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsGetFolderInfoAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 630
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Retrieves folder information for the given Paper doc. This includes:</p>\n<p>  - folder sharing policy; permissions for subfolders are set by the\ntop-level folder.</p>\n<p>  - full &apos;filepath&apos;, i.e. the list of folders (both folderId and folderName)\nfrom     the root folder to the folder directly containing the Paper doc.</p>\n<p></p>\n<p>If the Paper doc is not in any folder (aka unfiled) the response will be\nempty.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FoldersContainingPaperDoc> DocsGetFolderInfoAsync(RefPaperDoc refPaperDoc)
    parameters:
    - id: refPaperDoc
      type: Dropbox.Api.Paper.RefPaperDoc
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.FoldersContainingPaperDoc}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsGetFolderInfoAsync(refPaperDoc As RefPaperDoc) As System.Threading.Tasks.Task(Of FoldersContainingPaperDoc)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  id: BeginDocsGetFolderInfo(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsGetFolderInfo(RefPaperDoc, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsGetFolderInfo(RefPaperDoc, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo(Dropbox.Api.Paper.RefPaperDoc, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsGetFolderInfo
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 645
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs get folder info route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsGetFolderInfo(RefPaperDoc refPaperDoc, System.AsyncCallback callback, object state = null)
    parameters:
    - id: refPaperDoc
      type: Dropbox.Api.Paper.RefPaperDoc
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsGetFolderInfo(refPaperDoc As RefPaperDoc, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync(System.String)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync(System.String)
  id: DocsGetFolderInfoAsync(System.String)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsGetFolderInfoAsync(String)
  nameWithType: PaperUserRoutes.DocsGetFolderInfoAsync(String)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsGetFolderInfoAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 676
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Retrieves folder information for the given Paper doc. This includes:</p>\n<p>  - folder sharing policy; permissions for subfolders are set by the\ntop-level folder.</p>\n<p>  - full &apos;filepath&apos;, i.e. the list of folders (both folderId and folderName)\nfrom     the root folder to the folder directly containing the Paper doc.</p>\n<p></p>\n<p>If the Paper doc is not in any folder (aka unfiled) the response will be\nempty.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FoldersContainingPaperDoc> DocsGetFolderInfoAsync(string docId)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.FoldersContainingPaperDoc}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsGetFolderInfoAsync(docId As String) As System.Threading.Tasks.Task(Of FoldersContainingPaperDoc)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo(System.String,System.AsyncCallback,System.Object)
  id: BeginDocsGetFolderInfo(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsGetFolderInfo(String, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsGetFolderInfo(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsGetFolderInfo
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 693
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs get folder info route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsGetFolderInfo(string docId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsGetFolderInfo(docId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsGetFolderInfo(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsGetFolderInfo(System.IAsyncResult)
  id: EndDocsGetFolderInfo(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsGetFolderInfo(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsGetFolderInfo(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsGetFolderInfo(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsGetFolderInfo
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 713
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs get folder info route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public FoldersContainingPaperDoc EndDocsGetFolderInfo(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.FoldersContainingPaperDoc
      description: The response to the send request
    content.vb: Public Function EndDocsGetFolderInfo(asyncResult As System.IAsyncResult) As FoldersContainingPaperDoc
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsGetFolderInfo*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)
  id: DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsListAsync(ListPaperDocsArgs)
  nameWithType: PaperUserRoutes.DocsListAsync(ListPaperDocsArgs)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsListAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 740
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Return the list of all Paper docs according to the argument specifications.\nTo iterate over through the full pagination, pass the cursor to <xref href=\"Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListPaperDocsResponse> DocsListAsync(ListPaperDocsArgs listPaperDocsArgs)
    parameters:
    - id: listPaperDocsArgs
      type: Dropbox.Api.Paper.ListPaperDocsArgs
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListPaperDocsResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsListAsync(listPaperDocsArgs As ListPaperDocsArgs) As System.Threading.Tasks.Task(Of ListPaperDocsResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList(Dropbox.Api.Paper.ListPaperDocsArgs,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList(Dropbox.Api.Paper.ListPaperDocsArgs,System.AsyncCallback,System.Object)
  id: BeginDocsList(Dropbox.Api.Paper.ListPaperDocsArgs,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsList(ListPaperDocsArgs, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsList(ListPaperDocsArgs, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList(Dropbox.Api.Paper.ListPaperDocsArgs, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 755
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs list route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsList(ListPaperDocsArgs listPaperDocsArgs, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listPaperDocsArgs
      type: Dropbox.Api.Paper.ListPaperDocsArgs
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsList(listPaperDocsArgs As ListPaperDocsArgs, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsFilterBy,Dropbox.Api.Paper.ListPaperDocsSortBy,Dropbox.Api.Paper.ListPaperDocsSortOrder,System.Int32)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsFilterBy,Dropbox.Api.Paper.ListPaperDocsSortBy,Dropbox.Api.Paper.ListPaperDocsSortOrder,System.Int32)
  id: DocsListAsync(Dropbox.Api.Paper.ListPaperDocsFilterBy,Dropbox.Api.Paper.ListPaperDocsSortBy,Dropbox.Api.Paper.ListPaperDocsSortOrder,System.Int32)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsListAsync(ListPaperDocsFilterBy, ListPaperDocsSortBy, ListPaperDocsSortOrder, Int32)
  nameWithType: PaperUserRoutes.DocsListAsync(ListPaperDocsFilterBy, ListPaperDocsSortBy, ListPaperDocsSortOrder, Int32)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsFilterBy, Dropbox.Api.Paper.ListPaperDocsSortBy, Dropbox.Api.Paper.ListPaperDocsSortOrder, System.Int32)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsListAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 786
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Return the list of all Paper docs according to the argument specifications.\nTo iterate over through the full pagination, pass the cursor to <xref href=\"Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListPaperDocsResponse> DocsListAsync(ListPaperDocsFilterBy filterBy = null, ListPaperDocsSortBy sortBy = null, ListPaperDocsSortOrder sortOrder = null, int limit = 1000)
    parameters:
    - id: filterBy
      type: Dropbox.Api.Paper.ListPaperDocsFilterBy
      description: >-
        Allows user to specify how the Paper docs should be

        filtered.
    - id: sortBy
      type: Dropbox.Api.Paper.ListPaperDocsSortBy
      description: >-
        Allows user to specify how the Paper docs should be

        sorted.
    - id: sortOrder
      type: Dropbox.Api.Paper.ListPaperDocsSortOrder
      description: >-
        Allows user to specify the sort order of the

        result.
    - id: limit
      type: System.Int32
      description: >-
        Size limit per batch. The maximum number of docs that can be

        retrieved per batch is 1000. Higher value results in invalid arguments

        error.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListPaperDocsResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsListAsync(filterBy As ListPaperDocsFilterBy = Nothing, sortBy As ListPaperDocsSortBy = Nothing, sortOrder As ListPaperDocsSortOrder = Nothing, limit As Integer = 1000) As System.Threading.Tasks.Task(Of ListPaperDocsResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList(Dropbox.Api.Paper.ListPaperDocsFilterBy,Dropbox.Api.Paper.ListPaperDocsSortBy,Dropbox.Api.Paper.ListPaperDocsSortOrder,System.Int32,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList(Dropbox.Api.Paper.ListPaperDocsFilterBy,Dropbox.Api.Paper.ListPaperDocsSortBy,Dropbox.Api.Paper.ListPaperDocsSortOrder,System.Int32,System.AsyncCallback,System.Object)
  id: BeginDocsList(Dropbox.Api.Paper.ListPaperDocsFilterBy,Dropbox.Api.Paper.ListPaperDocsSortBy,Dropbox.Api.Paper.ListPaperDocsSortOrder,System.Int32,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsList(ListPaperDocsFilterBy, ListPaperDocsSortBy, ListPaperDocsSortOrder, Int32, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsList(ListPaperDocsFilterBy, ListPaperDocsSortBy, ListPaperDocsSortOrder, Int32, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList(Dropbox.Api.Paper.ListPaperDocsFilterBy, Dropbox.Api.Paper.ListPaperDocsSortBy, Dropbox.Api.Paper.ListPaperDocsSortOrder, System.Int32, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 817
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs list route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsList(ListPaperDocsFilterBy filterBy = null, ListPaperDocsSortBy sortBy = null, ListPaperDocsSortOrder sortOrder = null, int limit = 1000, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: filterBy
      type: Dropbox.Api.Paper.ListPaperDocsFilterBy
      description: >-
        Allows user to specify how the Paper docs should be

        filtered.
    - id: sortBy
      type: Dropbox.Api.Paper.ListPaperDocsSortBy
      description: >-
        Allows user to specify how the Paper docs should be

        sorted.
    - id: sortOrder
      type: Dropbox.Api.Paper.ListPaperDocsSortOrder
      description: >-
        Allows user to specify the sort order of the

        result.
    - id: limit
      type: System.Int32
      description: >-
        Size limit per batch. The maximum number of docs that can be

        retrieved per batch is 1000. Higher value results in invalid arguments

        error.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsList(filterBy As ListPaperDocsFilterBy = Nothing, sortBy As ListPaperDocsSortBy = Nothing, sortOrder As ListPaperDocsSortOrder = Nothing, limit As Integer = 1000, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsList(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsList(System.IAsyncResult)
  id: EndDocsList(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsList(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsList(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsList(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 840
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs list route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListPaperDocsResponse EndDocsList(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.ListPaperDocsResponse
      description: The response to the send request
    content.vb: Public Function EndDocsList(asyncResult As System.IAsyncResult) As ListPaperDocsResponse
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)
  id: DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsListContinueAsync(ListPaperDocsContinueArgs)
  nameWithType: PaperUserRoutes.DocsListContinueAsync(ListPaperDocsContinueArgs)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsListContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 870
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all Paper doc.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListPaperDocsResponse> DocsListContinueAsync(ListPaperDocsContinueArgs listPaperDocsContinueArgs)
    parameters:
    - id: listPaperDocsContinueArgs
      type: Dropbox.Api.Paper.ListPaperDocsContinueArgs
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListPaperDocsResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsListContinueAsync(listPaperDocsContinueArgs As ListPaperDocsContinueArgs) As System.Threading.Tasks.Task(Of ListPaperDocsResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.ListDocsCursorError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue(Dropbox.Api.Paper.ListPaperDocsContinueArgs,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue(Dropbox.Api.Paper.ListPaperDocsContinueArgs,System.AsyncCallback,System.Object)
  id: BeginDocsListContinue(Dropbox.Api.Paper.ListPaperDocsContinueArgs,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsListContinue(ListPaperDocsContinueArgs, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsListContinue(ListPaperDocsContinueArgs, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue(Dropbox.Api.Paper.ListPaperDocsContinueArgs, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsListContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 885
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs list continue route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsListContinue(ListPaperDocsContinueArgs listPaperDocsContinueArgs, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listPaperDocsContinueArgs
      type: Dropbox.Api.Paper.ListPaperDocsContinueArgs
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsListContinue(listPaperDocsContinueArgs As ListPaperDocsContinueArgs, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(System.String)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(System.String)
  id: DocsListContinueAsync(System.String)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsListContinueAsync(String)
  nameWithType: PaperUserRoutes.DocsListContinueAsync(String)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsListContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 914
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all Paper doc.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListPaperDocsResponse> DocsListContinueAsync(string cursor)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        The cursor obtained from <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)" data-throw-if-not-resolved="false"></xref>. Allows

        for pagination.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListPaperDocsResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsListContinueAsync(cursor As String) As System.Threading.Tasks.Task(Of ListPaperDocsResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.ListDocsCursorError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue(System.String,System.AsyncCallback,System.Object)
  id: BeginDocsListContinue(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsListContinue(String, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsListContinue(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsListContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 934
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs list continue route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsListContinue(string cursor, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        The cursor obtained from <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)" data-throw-if-not-resolved="false"></xref>. Allows

        for pagination.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsListContinue(cursor As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsListContinue(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsListContinue(System.IAsyncResult)
  id: EndDocsListContinue(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsListContinue(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsListContinue(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsListContinue(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsListContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 954
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs list continue route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListPaperDocsResponse EndDocsListContinue(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.ListPaperDocsResponse
      description: The response to the send request
    content.vb: Public Function EndDocsListContinue(asyncResult As System.IAsyncResult) As ListPaperDocsResponse
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsListContinue*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.ListDocsCursorError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync(Dropbox.Api.Paper.RefPaperDoc)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync(Dropbox.Api.Paper.RefPaperDoc)
  id: DocsPermanentlyDeleteAsync(Dropbox.Api.Paper.RefPaperDoc)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsPermanentlyDeleteAsync(RefPaperDoc)
  nameWithType: PaperUserRoutes.DocsPermanentlyDeleteAsync(RefPaperDoc)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync(Dropbox.Api.Paper.RefPaperDoc)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsPermanentlyDeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 983
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Permanently deletes the given Paper doc. This operation is final as the doc\ncannot be recovered.</p>\n<p>This action can be performed only by the doc owner.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task DocsPermanentlyDeleteAsync(RefPaperDoc refPaperDoc)
    parameters:
    - id: refPaperDoc
      type: Dropbox.Api.Paper.RefPaperDoc
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function DocsPermanentlyDeleteAsync(refPaperDoc As RefPaperDoc) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  id: BeginDocsPermanentlyDelete(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsPermanentlyDelete(RefPaperDoc, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsPermanentlyDelete(RefPaperDoc, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete(Dropbox.Api.Paper.RefPaperDoc, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsPermanentlyDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 998
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs permanently delete route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsPermanentlyDelete(RefPaperDoc refPaperDoc, System.AsyncCallback callback, object state = null)
    parameters:
    - id: refPaperDoc
      type: Dropbox.Api.Paper.RefPaperDoc
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsPermanentlyDelete(refPaperDoc As RefPaperDoc, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync(System.String)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync(System.String)
  id: DocsPermanentlyDeleteAsync(System.String)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsPermanentlyDeleteAsync(String)
  nameWithType: PaperUserRoutes.DocsPermanentlyDeleteAsync(String)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsPermanentlyDeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1023
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Permanently deletes the given Paper doc. This operation is final as the doc\ncannot be recovered.</p>\n<p>This action can be performed only by the doc owner.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task DocsPermanentlyDeleteAsync(string docId)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function DocsPermanentlyDeleteAsync(docId As String) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete(System.String,System.AsyncCallback,System.Object)
  id: BeginDocsPermanentlyDelete(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsPermanentlyDelete(String, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsPermanentlyDelete(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsPermanentlyDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1040
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs permanently delete route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsPermanentlyDelete(string docId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsPermanentlyDelete(docId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsPermanentlyDelete(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsPermanentlyDelete(System.IAsyncResult)
  id: EndDocsPermanentlyDelete(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsPermanentlyDelete(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsPermanentlyDelete(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsPermanentlyDelete(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsPermanentlyDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1059
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs permanently delete route\nto complete</p>\n"
  example: []
  syntax:
    content: public void EndDocsPermanentlyDelete(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndDocsPermanentlyDelete(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsPermanentlyDelete*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync(Dropbox.Api.Paper.RefPaperDoc)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync(Dropbox.Api.Paper.RefPaperDoc)
  id: DocsSharingPolicyGetAsync(Dropbox.Api.Paper.RefPaperDoc)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsSharingPolicyGetAsync(RefPaperDoc)
  nameWithType: PaperUserRoutes.DocsSharingPolicyGetAsync(RefPaperDoc)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync(Dropbox.Api.Paper.RefPaperDoc)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsSharingPolicyGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1085
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Gets the default sharing policy for the given Paper doc.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SharingPolicy> DocsSharingPolicyGetAsync(RefPaperDoc refPaperDoc)
    parameters:
    - id: refPaperDoc
      type: Dropbox.Api.Paper.RefPaperDoc
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.SharingPolicy}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsSharingPolicyGetAsync(refPaperDoc As RefPaperDoc) As System.Threading.Tasks.Task(Of SharingPolicy)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  id: BeginDocsSharingPolicyGet(Dropbox.Api.Paper.RefPaperDoc,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsSharingPolicyGet(RefPaperDoc, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsSharingPolicyGet(RefPaperDoc, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet(Dropbox.Api.Paper.RefPaperDoc, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsSharingPolicyGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1100
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs sharing policy get route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsSharingPolicyGet(RefPaperDoc refPaperDoc, System.AsyncCallback callback, object state = null)
    parameters:
    - id: refPaperDoc
      type: Dropbox.Api.Paper.RefPaperDoc
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsSharingPolicyGet(refPaperDoc As RefPaperDoc, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync(System.String)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync(System.String)
  id: DocsSharingPolicyGetAsync(System.String)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsSharingPolicyGetAsync(String)
  nameWithType: PaperUserRoutes.DocsSharingPolicyGetAsync(String)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsSharingPolicyGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1124
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Gets the default sharing policy for the given Paper doc.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SharingPolicy> DocsSharingPolicyGetAsync(string docId)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.SharingPolicy}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsSharingPolicyGetAsync(docId As String) As System.Threading.Tasks.Task(Of SharingPolicy)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet(System.String,System.AsyncCallback,System.Object)
  id: BeginDocsSharingPolicyGet(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsSharingPolicyGet(String, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsSharingPolicyGet(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsSharingPolicyGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1141
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs sharing policy get route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsSharingPolicyGet(string docId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsSharingPolicyGet(docId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicyGet(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicyGet(System.IAsyncResult)
  id: EndDocsSharingPolicyGet(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsSharingPolicyGet(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsSharingPolicyGet(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicyGet(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsSharingPolicyGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1161
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs sharing policy get route\nto complete</p>\n"
  example: []
  syntax:
    content: public SharingPolicy EndDocsSharingPolicyGet(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.SharingPolicy
      description: The response to the send request
    content.vb: Public Function EndDocsSharingPolicyGet(asyncResult As System.IAsyncResult) As SharingPolicy
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicyGet*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync(Dropbox.Api.Paper.PaperDocSharingPolicy)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync(Dropbox.Api.Paper.PaperDocSharingPolicy)
  id: DocsSharingPolicySetAsync(Dropbox.Api.Paper.PaperDocSharingPolicy)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsSharingPolicySetAsync(PaperDocSharingPolicy)
  nameWithType: PaperUserRoutes.DocsSharingPolicySetAsync(PaperDocSharingPolicy)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync(Dropbox.Api.Paper.PaperDocSharingPolicy)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsSharingPolicySetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1192
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Sets the default sharing policy for the given Paper doc. The default\n&apos;team_sharing_policy&apos; can be changed only by teams, omit this field for personal\naccounts.</p>\n<p>The &apos;public_sharing_policy&apos; policy can&apos;t be set to the value &apos;disabled&apos;\nbecause this setting can be changed only via the team admin console.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task DocsSharingPolicySetAsync(PaperDocSharingPolicy paperDocSharingPolicy)
    parameters:
    - id: paperDocSharingPolicy
      type: Dropbox.Api.Paper.PaperDocSharingPolicy
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function DocsSharingPolicySetAsync(paperDocSharingPolicy As PaperDocSharingPolicy) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet(Dropbox.Api.Paper.PaperDocSharingPolicy,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet(Dropbox.Api.Paper.PaperDocSharingPolicy,System.AsyncCallback,System.Object)
  id: BeginDocsSharingPolicySet(Dropbox.Api.Paper.PaperDocSharingPolicy,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsSharingPolicySet(PaperDocSharingPolicy, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsSharingPolicySet(PaperDocSharingPolicy, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet(Dropbox.Api.Paper.PaperDocSharingPolicy, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsSharingPolicySet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1207
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs sharing policy set route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsSharingPolicySet(PaperDocSharingPolicy paperDocSharingPolicy, System.AsyncCallback callback, object state = null)
    parameters:
    - id: paperDocSharingPolicy
      type: Dropbox.Api.Paper.PaperDocSharingPolicy
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsSharingPolicySet(paperDocSharingPolicy As PaperDocSharingPolicy, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync(System.String,Dropbox.Api.Paper.SharingPolicy)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync(System.String,Dropbox.Api.Paper.SharingPolicy)
  id: DocsSharingPolicySetAsync(System.String,Dropbox.Api.Paper.SharingPolicy)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsSharingPolicySetAsync(String, SharingPolicy)
  nameWithType: PaperUserRoutes.DocsSharingPolicySetAsync(String, SharingPolicy)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync(System.String, Dropbox.Api.Paper.SharingPolicy)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsSharingPolicySetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1236
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Sets the default sharing policy for the given Paper doc. The default\n&apos;team_sharing_policy&apos; can be changed only by teams, omit this field for personal\naccounts.</p>\n<p>The &apos;public_sharing_policy&apos; policy can&apos;t be set to the value &apos;disabled&apos;\nbecause this setting can be changed only via the team admin console.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task DocsSharingPolicySetAsync(string docId, SharingPolicy sharingPolicy)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: sharingPolicy
      type: Dropbox.Api.Paper.SharingPolicy
      description: >-
        The default sharing policy to be set for the Paper

        doc.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function DocsSharingPolicySetAsync(docId As String, sharingPolicy As SharingPolicy) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet(System.String,Dropbox.Api.Paper.SharingPolicy,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet(System.String,Dropbox.Api.Paper.SharingPolicy,System.AsyncCallback,System.Object)
  id: BeginDocsSharingPolicySet(System.String,Dropbox.Api.Paper.SharingPolicy,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsSharingPolicySet(String, SharingPolicy, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsSharingPolicySet(String, SharingPolicy, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet(System.String, Dropbox.Api.Paper.SharingPolicy, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsSharingPolicySet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1257
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs sharing policy set route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsSharingPolicySet(string docId, SharingPolicy sharingPolicy, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: sharingPolicy
      type: Dropbox.Api.Paper.SharingPolicy
      description: >-
        The default sharing policy to be set for the Paper

        doc.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsSharingPolicySet(docId As String, sharingPolicy As SharingPolicy, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicySet(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicySet(System.IAsyncResult)
  id: EndDocsSharingPolicySet(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsSharingPolicySet(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsSharingPolicySet(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicySet(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsSharingPolicySet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1278
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs sharing policy set route\nto complete</p>\n"
  example: []
  syntax:
    content: public void EndDocsSharingPolicySet(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndDocsSharingPolicySet(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicySet*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync(Dropbox.Api.Paper.PaperDocUpdateArgs,System.IO.Stream)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync(Dropbox.Api.Paper.PaperDocUpdateArgs,System.IO.Stream)
  id: DocsUpdateAsync(Dropbox.Api.Paper.PaperDocUpdateArgs,System.IO.Stream)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUpdateAsync(PaperDocUpdateArgs, System.IO.Stream)
  nameWithType: PaperUserRoutes.DocsUpdateAsync(PaperDocUpdateArgs, System.IO.Stream)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync(Dropbox.Api.Paper.PaperDocUpdateArgs, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1305
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Updates an existing Paper doc with the provided content.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>This endpoint will be retired in September 2020. Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for more information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperDocCreateUpdateResult> DocsUpdateAsync(PaperDocUpdateArgs paperDocUpdateArgs, System.IO.Stream body)
    parameters:
    - id: paperDocUpdateArgs
      type: Dropbox.Api.Paper.PaperDocUpdateArgs
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperDocCreateUpdateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsUpdateAsync(paperDocUpdateArgs As PaperDocUpdateArgs, body As System.IO.Stream) As System.Threading.Tasks.Task(Of PaperDocCreateUpdateResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.PaperDocUpdateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate(Dropbox.Api.Paper.PaperDocUpdateArgs,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate(Dropbox.Api.Paper.PaperDocUpdateArgs,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginDocsUpdate(Dropbox.Api.Paper.PaperDocUpdateArgs,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUpdate(PaperDocUpdateArgs, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUpdate(PaperDocUpdateArgs, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate(Dropbox.Api.Paper.PaperDocUpdateArgs, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1321
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs update route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUpdate(PaperDocUpdateArgs paperDocUpdateArgs, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: paperDocUpdateArgs
      type: Dropbox.Api.Paper.PaperDocUpdateArgs
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUpdate(paperDocUpdateArgs As PaperDocUpdateArgs, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync(System.String,Dropbox.Api.Paper.PaperDocUpdatePolicy,System.Int64,Dropbox.Api.Paper.ImportFormat,System.IO.Stream)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync(System.String,Dropbox.Api.Paper.PaperDocUpdatePolicy,System.Int64,Dropbox.Api.Paper.ImportFormat,System.IO.Stream)
  id: DocsUpdateAsync(System.String,Dropbox.Api.Paper.PaperDocUpdatePolicy,System.Int64,Dropbox.Api.Paper.ImportFormat,System.IO.Stream)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUpdateAsync(String, PaperDocUpdatePolicy, Int64, ImportFormat, System.IO.Stream)
  nameWithType: PaperUserRoutes.DocsUpdateAsync(String, PaperDocUpdatePolicy, Int64, ImportFormat, System.IO.Stream)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync(System.String, Dropbox.Api.Paper.PaperDocUpdatePolicy, System.Int64, Dropbox.Api.Paper.ImportFormat, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1351
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Updates an existing Paper doc with the provided content.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>This endpoint will be retired in September 2020. Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for more information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperDocCreateUpdateResult> DocsUpdateAsync(string docId, PaperDocUpdatePolicy docUpdatePolicy, long revision, ImportFormat importFormat, System.IO.Stream body)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: docUpdatePolicy
      type: Dropbox.Api.Paper.PaperDocUpdatePolicy
      description: The policy used for the current update call.
    - id: revision
      type: System.Int64
      description: >-
        The latest doc revision. This value must match the head

        revision or an error code will be returned. This is to prevent colliding

        writes.
    - id: importFormat
      type: Dropbox.Api.Paper.ImportFormat
      description: The format of provided data.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperDocCreateUpdateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsUpdateAsync(docId As String, docUpdatePolicy As PaperDocUpdatePolicy, revision As Long, importFormat As ImportFormat, body As System.IO.Stream) As System.Threading.Tasks.Task(Of PaperDocCreateUpdateResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.PaperDocUpdateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate(System.String,Dropbox.Api.Paper.PaperDocUpdatePolicy,System.Int64,Dropbox.Api.Paper.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate(System.String,Dropbox.Api.Paper.PaperDocUpdatePolicy,System.Int64,Dropbox.Api.Paper.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginDocsUpdate(System.String,Dropbox.Api.Paper.PaperDocUpdatePolicy,System.Int64,Dropbox.Api.Paper.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUpdate(String, PaperDocUpdatePolicy, Int64, ImportFormat, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUpdate(String, PaperDocUpdatePolicy, Int64, ImportFormat, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate(System.String, Dropbox.Api.Paper.PaperDocUpdatePolicy, System.Int64, Dropbox.Api.Paper.ImportFormat, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1381
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs update route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUpdate(string docId, PaperDocUpdatePolicy docUpdatePolicy, long revision, ImportFormat importFormat, System.IO.Stream body, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: docUpdatePolicy
      type: Dropbox.Api.Paper.PaperDocUpdatePolicy
      description: The policy used for the current update call.
    - id: revision
      type: System.Int64
      description: >-
        The latest doc revision. This value must match the head

        revision or an error code will be returned. This is to prevent colliding

        writes.
    - id: importFormat
      type: Dropbox.Api.Paper.ImportFormat
      description: The format of provided data.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUpdate(docId As String, docUpdatePolicy As PaperDocUpdatePolicy, revision As Long, importFormat As ImportFormat, body As System.IO.Stream, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUpdate(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUpdate(System.IAsyncResult)
  id: EndDocsUpdate(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsUpdate(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsUpdate(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUpdate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1408
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs update route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public PaperDocCreateUpdateResult EndDocsUpdate(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.PaperDocCreateUpdateResult
      description: The response to the send request
    content.vb: Public Function EndDocsUpdate(asyncResult As System.IAsyncResult) As PaperDocCreateUpdateResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUpdate*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.PaperDocUpdateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync(Dropbox.Api.Paper.AddPaperDocUser)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync(Dropbox.Api.Paper.AddPaperDocUser)
  id: DocsUsersAddAsync(Dropbox.Api.Paper.AddPaperDocUser)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUsersAddAsync(AddPaperDocUser)
  nameWithType: PaperUserRoutes.DocsUsersAddAsync(AddPaperDocUser)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync(Dropbox.Api.Paper.AddPaperDocUser)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUsersAddAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1438
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Allows an owner or editor to add users to a Paper doc or change their\npermissions using their email address or Dropbox account ID.</p>\n<p>The doc owner&apos;s permissions cannot be changed.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<System.Collections.Generic.List<AddPaperDocUserMemberResult>> DocsUsersAddAsync(AddPaperDocUser addPaperDocUser)
    parameters:
    - id: addPaperDocUser
      type: Dropbox.Api.Paper.AddPaperDocUser
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Dropbox.Api.Paper.AddPaperDocUserMemberResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsUsersAddAsync(addPaperDocUser As AddPaperDocUser) As System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of AddPaperDocUserMemberResult))
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd(Dropbox.Api.Paper.AddPaperDocUser,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd(Dropbox.Api.Paper.AddPaperDocUser,System.AsyncCallback,System.Object)
  id: BeginDocsUsersAdd(Dropbox.Api.Paper.AddPaperDocUser,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUsersAdd(AddPaperDocUser, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUsersAdd(AddPaperDocUser, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd(Dropbox.Api.Paper.AddPaperDocUser, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUsersAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1453
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs users add route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUsersAdd(AddPaperDocUser addPaperDocUser, System.AsyncCallback callback, object state = null)
    parameters:
    - id: addPaperDocUser
      type: Dropbox.Api.Paper.AddPaperDocUser
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUsersAdd(addPaperDocUser As AddPaperDocUser, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember},System.String,System.Boolean)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember},System.String,System.Boolean)
  id: DocsUsersAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember},System.String,System.Boolean)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUsersAddAsync(String, System.Collections.Generic.IEnumerable<AddMember>, String, Boolean)
  nameWithType: PaperUserRoutes.DocsUsersAddAsync(String, System.Collections.Generic.IEnumerable<AddMember>, String, Boolean)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.Paper.AddMember>, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUsersAddAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1485
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Allows an owner or editor to add users to a Paper doc or change their\npermissions using their email address or Dropbox account ID.</p>\n<p>The doc owner&apos;s permissions cannot be changed.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<System.Collections.Generic.List<AddPaperDocUserMemberResult>> DocsUsersAddAsync(string docId, System.Collections.Generic.IEnumerable<AddMember> members, string customMessage = null, bool quiet = false)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: members
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember}
      description: >-
        User which should be added to the Paper doc. Specify only

        email address or Dropbox account ID.
    - id: customMessage
      type: System.String
      description: >-
        A personal message that will be emailed to each

        successfully added member.
    - id: quiet
      type: System.Boolean
      description: >-
        Clients should set this to true if no email message shall be

        sent to added users.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{Dropbox.Api.Paper.AddPaperDocUserMemberResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsUsersAddAsync(docId As String, members As System.Collections.Generic.IEnumerable(Of AddMember), customMessage As String = Nothing, quiet As Boolean = False) As System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of AddPaperDocUserMemberResult))
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: PaperUserRoutes.DocsUsersAddAsync(String, System.Collections.Generic.IEnumerable(Of AddMember), String, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.Paper.AddMember), System.String, System.Boolean)
  name.vb: DocsUsersAddAsync(String, System.Collections.Generic.IEnumerable(Of AddMember), String, Boolean)
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember},System.String,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember},System.String,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginDocsUsersAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember},System.String,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUsersAdd(String, System.Collections.Generic.IEnumerable<AddMember>, String, Boolean, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUsersAdd(String, System.Collections.Generic.IEnumerable<AddMember>, String, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.Paper.AddMember>, System.String, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUsersAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1514
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs users add route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUsersAdd(string docId, System.Collections.Generic.IEnumerable<AddMember> members, string customMessage = null, bool quiet = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: members
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember}
      description: >-
        User which should be added to the Paper doc. Specify only

        email address or Dropbox account ID.
    - id: customMessage
      type: System.String
      description: >-
        A personal message that will be emailed to each

        successfully added member.
    - id: quiet
      type: System.Boolean
      description: >-
        Clients should set this to true if no email message shall be

        sent to added users.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUsersAdd(docId As String, members As System.Collections.Generic.IEnumerable(Of AddMember), customMessage As String = Nothing, quiet As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd*
  nameWithType.vb: PaperUserRoutes.BeginDocsUsersAdd(String, System.Collections.Generic.IEnumerable(Of AddMember), String, Boolean, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.Paper.AddMember), System.String, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginDocsUsersAdd(String, System.Collections.Generic.IEnumerable(Of AddMember), String, Boolean, System.AsyncCallback, Object)
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersAdd(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersAdd(System.IAsyncResult)
  id: EndDocsUsersAdd(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsUsersAdd(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsUsersAdd(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersAdd(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsUsersAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1540
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs users add route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public System.Collections.Generic.List<AddPaperDocUserMemberResult> EndDocsUsersAdd(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: System.Collections.Generic.List{Dropbox.Api.Paper.AddPaperDocUserMemberResult}
      description: The response to the send request
    content.vb: Public Function EndDocsUsersAdd(asyncResult As System.IAsyncResult) As System.Collections.Generic.List(Of AddPaperDocUserMemberResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersAdd*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)
  id: DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUsersListAsync(ListUsersOnPaperDocArgs)
  nameWithType: PaperUserRoutes.DocsUsersListAsync(ListUsersOnPaperDocArgs)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUsersListAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1572
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Lists all users who visited the Paper doc or users with explicit access. This\ncall excludes users who have been removed. The list is sorted by the date of the\nvisit or the share date.</p>\n<p>The list will include both users, the explicitly shared ones as well as those\nwho came in using the Paper url link.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListUsersOnPaperDocResponse> DocsUsersListAsync(ListUsersOnPaperDocArgs listUsersOnPaperDocArgs)
    parameters:
    - id: listUsersOnPaperDocArgs
      type: Dropbox.Api.Paper.ListUsersOnPaperDocArgs
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnPaperDocResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsUsersListAsync(listUsersOnPaperDocArgs As ListUsersOnPaperDocArgs) As System.Threading.Tasks.Task(Of ListUsersOnPaperDocResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList(Dropbox.Api.Paper.ListUsersOnPaperDocArgs,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList(Dropbox.Api.Paper.ListUsersOnPaperDocArgs,System.AsyncCallback,System.Object)
  id: BeginDocsUsersList(Dropbox.Api.Paper.ListUsersOnPaperDocArgs,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUsersList(ListUsersOnPaperDocArgs, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUsersList(ListUsersOnPaperDocArgs, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList(Dropbox.Api.Paper.ListUsersOnPaperDocArgs, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUsersList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1587
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs users list route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUsersList(ListUsersOnPaperDocArgs listUsersOnPaperDocArgs, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listUsersOnPaperDocArgs
      type: Dropbox.Api.Paper.ListUsersOnPaperDocArgs
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUsersList(listUsersOnPaperDocArgs As ListUsersOnPaperDocArgs, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(System.String,System.Int32,Dropbox.Api.Paper.UserOnPaperDocFilter)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(System.String,System.Int32,Dropbox.Api.Paper.UserOnPaperDocFilter)
  id: DocsUsersListAsync(System.String,System.Int32,Dropbox.Api.Paper.UserOnPaperDocFilter)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUsersListAsync(String, Int32, UserOnPaperDocFilter)
  nameWithType: PaperUserRoutes.DocsUsersListAsync(String, Int32, UserOnPaperDocFilter)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(System.String, System.Int32, Dropbox.Api.Paper.UserOnPaperDocFilter)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUsersListAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1620
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Lists all users who visited the Paper doc or users with explicit access. This\ncall excludes users who have been removed. The list is sorted by the date of the\nvisit or the share date.</p>\n<p>The list will include both users, the explicitly shared ones as well as those\nwho came in using the Paper url link.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListUsersOnPaperDocResponse> DocsUsersListAsync(string docId, int limit = 1000, UserOnPaperDocFilter filterBy = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: limit
      type: System.Int32
      description: >-
        Size limit per batch. The maximum number of users that can be

        retrieved per batch is 1000. Higher value results in invalid arguments

        error.
    - id: filterBy
      type: Dropbox.Api.Paper.UserOnPaperDocFilter
      description: >-
        Specify this attribute if you want to obtain users that have

        already accessed the Paper doc.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnPaperDocResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsUsersListAsync(docId As String, limit As Integer = 1000, filterBy As UserOnPaperDocFilter = Nothing) As System.Threading.Tasks.Task(Of ListUsersOnPaperDocResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList(System.String,System.Int32,Dropbox.Api.Paper.UserOnPaperDocFilter,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList(System.String,System.Int32,Dropbox.Api.Paper.UserOnPaperDocFilter,System.AsyncCallback,System.Object)
  id: BeginDocsUsersList(System.String,System.Int32,Dropbox.Api.Paper.UserOnPaperDocFilter,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUsersList(String, Int32, UserOnPaperDocFilter, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUsersList(String, Int32, UserOnPaperDocFilter, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList(System.String, System.Int32, Dropbox.Api.Paper.UserOnPaperDocFilter, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUsersList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1646
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs users list route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUsersList(string docId, int limit = 1000, UserOnPaperDocFilter filterBy = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: limit
      type: System.Int32
      description: >-
        Size limit per batch. The maximum number of users that can be

        retrieved per batch is 1000. Higher value results in invalid arguments

        error.
    - id: filterBy
      type: Dropbox.Api.Paper.UserOnPaperDocFilter
      description: >-
        Specify this attribute if you want to obtain users that have

        already accessed the Paper doc.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUsersList(docId As String, limit As Integer = 1000, filterBy As UserOnPaperDocFilter = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersList(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersList(System.IAsyncResult)
  id: EndDocsUsersList(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsUsersList(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsUsersList(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersList(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsUsersList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1670
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs users list route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListUsersOnPaperDocResponse EndDocsUsersList(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.ListUsersOnPaperDocResponse
      description: The response to the send request
    content.vb: Public Function EndDocsUsersList(asyncResult As System.IAsyncResult) As ListUsersOnPaperDocResponse
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersList*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs)
  id: DocsUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUsersListContinueAsync(ListUsersOnPaperDocContinueArgs)
  nameWithType: PaperUserRoutes.DocsUsersListContinueAsync(ListUsersOnPaperDocContinueArgs)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUsersListContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1700
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all users on the Paper doc.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListUsersOnPaperDocResponse> DocsUsersListContinueAsync(ListUsersOnPaperDocContinueArgs listUsersOnPaperDocContinueArgs)
    parameters:
    - id: listUsersOnPaperDocContinueArgs
      type: Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnPaperDocResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsUsersListContinueAsync(listUsersOnPaperDocContinueArgs As ListUsersOnPaperDocContinueArgs) As System.Threading.Tasks.Task(Of ListUsersOnPaperDocResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.ListUsersCursorError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs,System.AsyncCallback,System.Object)
  id: BeginDocsUsersListContinue(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUsersListContinue(ListUsersOnPaperDocContinueArgs, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUsersListContinue(ListUsersOnPaperDocContinueArgs, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUsersListContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1715
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs users list continue route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUsersListContinue(ListUsersOnPaperDocContinueArgs listUsersOnPaperDocContinueArgs, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listUsersOnPaperDocContinueArgs
      type: Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUsersListContinue(listUsersOnPaperDocContinueArgs As ListUsersOnPaperDocContinueArgs, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(System.String,System.String)
  id: DocsUsersListContinueAsync(System.String,System.String)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUsersListContinueAsync(String, String)
  nameWithType: PaperUserRoutes.DocsUsersListContinueAsync(String, String)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUsersListContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1745
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all users on the Paper doc.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListUsersOnPaperDocResponse> DocsUsersListContinueAsync(string docId, string cursor)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: cursor
      type: System.String
      description: >-
        The cursor obtained from <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs)" data-throw-if-not-resolved="false"></xref>.

        Allows for pagination.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnPaperDocResponse}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DocsUsersListContinueAsync(docId As String, cursor As String) As System.Threading.Tasks.Task(Of ListUsersOnPaperDocResponse)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.ListUsersCursorError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginDocsUsersListContinue(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUsersListContinue(String, String, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUsersListContinue(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUsersListContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1768
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs users list continue route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUsersListContinue(string docId, string cursor, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: cursor
      type: System.String
      description: >-
        The cursor obtained from <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs)" data-throw-if-not-resolved="false"></xref>.

        Allows for pagination.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUsersListContinue(docId As String, cursor As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersListContinue(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersListContinue(System.IAsyncResult)
  id: EndDocsUsersListContinue(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsUsersListContinue(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsUsersListContinue(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersListContinue(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsUsersListContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1790
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs users list continue route\nto complete</p>\n"
  example: []
  syntax:
    content: public ListUsersOnPaperDocResponse EndDocsUsersListContinue(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.ListUsersOnPaperDocResponse
      description: The response to the send request
    content.vb: Public Function EndDocsUsersListContinue(asyncResult As System.IAsyncResult) As ListUsersOnPaperDocResponse
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersListContinue*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.ListUsersCursorError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync(Dropbox.Api.Paper.RemovePaperDocUser)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync(Dropbox.Api.Paper.RemovePaperDocUser)
  id: DocsUsersRemoveAsync(Dropbox.Api.Paper.RemovePaperDocUser)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUsersRemoveAsync(RemovePaperDocUser)
  nameWithType: PaperUserRoutes.DocsUsersRemoveAsync(RemovePaperDocUser)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync(Dropbox.Api.Paper.RemovePaperDocUser)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUsersRemoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1819
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Allows an owner or editor to remove users from a Paper doc using their email\naddress or Dropbox account ID.</p>\n<p>The doc owner cannot be removed.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task DocsUsersRemoveAsync(RemovePaperDocUser removePaperDocUser)
    parameters:
    - id: removePaperDocUser
      type: Dropbox.Api.Paper.RemovePaperDocUser
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function DocsUsersRemoveAsync(removePaperDocUser As RemovePaperDocUser) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove(Dropbox.Api.Paper.RemovePaperDocUser,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove(Dropbox.Api.Paper.RemovePaperDocUser,System.AsyncCallback,System.Object)
  id: BeginDocsUsersRemove(Dropbox.Api.Paper.RemovePaperDocUser,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUsersRemove(RemovePaperDocUser, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUsersRemove(RemovePaperDocUser, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove(Dropbox.Api.Paper.RemovePaperDocUser, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUsersRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1834
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs users remove route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUsersRemove(RemovePaperDocUser removePaperDocUser, System.AsyncCallback callback, object state = null)
    parameters:
    - id: removePaperDocUser
      type: Dropbox.Api.Paper.RemovePaperDocUser
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUsersRemove(removePaperDocUser As RemovePaperDocUser, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync(System.String,Dropbox.Api.Sharing.MemberSelector)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync(System.String,Dropbox.Api.Sharing.MemberSelector)
  id: DocsUsersRemoveAsync(System.String,Dropbox.Api.Sharing.MemberSelector)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: DocsUsersRemoveAsync(String, MemberSelector)
  nameWithType: PaperUserRoutes.DocsUsersRemoveAsync(String, MemberSelector)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync(System.String, Dropbox.Api.Sharing.MemberSelector)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DocsUsersRemoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1861
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Allows an owner or editor to remove users from a Paper doc using their email\naddress or Dropbox account ID.</p>\n<p>The doc owner cannot be removed.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task DocsUsersRemoveAsync(string docId, MemberSelector member)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: member
      type: Dropbox.Api.Sharing.MemberSelector
      description: >-
        User which should be removed from the Paper doc. Specify only

        email address or Dropbox account ID.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function DocsUsersRemoveAsync(docId As String, member As MemberSelector) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove(System.String,Dropbox.Api.Sharing.MemberSelector,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove(System.String,Dropbox.Api.Sharing.MemberSelector,System.AsyncCallback,System.Object)
  id: BeginDocsUsersRemove(System.String,Dropbox.Api.Sharing.MemberSelector,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDocsUsersRemove(String, MemberSelector, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginDocsUsersRemove(String, MemberSelector, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove(System.String, Dropbox.Api.Sharing.MemberSelector, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDocsUsersRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1882
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the docs users remove route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDocsUsersRemove(string docId, MemberSelector member, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: docId
      type: System.String
      description: The Paper doc ID.
    - id: member
      type: Dropbox.Api.Sharing.MemberSelector
      description: >-
        User which should be removed from the Paper doc. Specify only

        email address or Dropbox account ID.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDocsUsersRemove(docId As String, member As MemberSelector, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersRemove(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersRemove(System.IAsyncResult)
  id: EndDocsUsersRemove(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndDocsUsersRemove(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndDocsUsersRemove(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersRemove(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDocsUsersRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1903
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the docs users remove route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndDocsUsersRemove(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndDocsUsersRemove(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersRemove*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.DocLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync(Dropbox.Api.Paper.PaperFolderCreateArg)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync(Dropbox.Api.Paper.PaperFolderCreateArg)
  id: FoldersCreateAsync(Dropbox.Api.Paper.PaperFolderCreateArg)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: FoldersCreateAsync(PaperFolderCreateArg)
  nameWithType: PaperUserRoutes.FoldersCreateAsync(PaperFolderCreateArg)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync(Dropbox.Api.Paper.PaperFolderCreateArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: FoldersCreateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1929
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Create a new Paper folder with the provided info.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperFolderCreateResult> FoldersCreateAsync(PaperFolderCreateArg paperFolderCreateArg)
    parameters:
    - id: paperFolderCreateArg
      type: Dropbox.Api.Paper.PaperFolderCreateArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperFolderCreateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function FoldersCreateAsync(paperFolderCreateArg As PaperFolderCreateArg) As System.Threading.Tasks.Task(Of PaperFolderCreateResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.PaperFolderCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate(Dropbox.Api.Paper.PaperFolderCreateArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate(Dropbox.Api.Paper.PaperFolderCreateArg,System.AsyncCallback,System.Object)
  id: BeginFoldersCreate(Dropbox.Api.Paper.PaperFolderCreateArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginFoldersCreate(PaperFolderCreateArg, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginFoldersCreate(PaperFolderCreateArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate(Dropbox.Api.Paper.PaperFolderCreateArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginFoldersCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1944
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the folders create route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginFoldersCreate(PaperFolderCreateArg paperFolderCreateArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: paperFolderCreateArg
      type: Dropbox.Api.Paper.PaperFolderCreateArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginFoldersCreate(paperFolderCreateArg As PaperFolderCreateArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync(System.String,System.String,System.Nullable{System.Boolean})
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync(System.String,System.String,System.Nullable{System.Boolean})
  id: FoldersCreateAsync(System.String,System.String,System.Nullable{System.Boolean})
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: FoldersCreateAsync(String, String, Nullable<Boolean>)
  nameWithType: PaperUserRoutes.FoldersCreateAsync(String, String, Nullable<Boolean>)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync(System.String, System.String, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: FoldersCreateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 1977
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Create a new Paper folder with the provided info.</p>\n<p>Note that this endpoint will continue to work for content created by users on\nthe older version of Paper. To check which version of Paper a user is on, use\n/users/features/get_values. If the paper_as_files feature is enabled, then the user\nis running the new version of Paper.</p>\n<p>Refer to the <a href=\"https://www.dropbox.com/lp/developers/reference/paper-migration-guide\">Paper\nMigration Guide</a> for migration information.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperFolderCreateResult> FoldersCreateAsync(string name, string parentFolderId = null, bool? isTeamFolder = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the new Paper folder.
    - id: parentFolderId
      type: System.String
      description: >-
        The encrypted Paper folder Id where the new Paper

        folder should be created. The API user has to have write access to this folder or

        error is thrown. If not supplied, the new folder will be created at top

        level.
    - id: isTeamFolder
      type: System.Nullable{System.Boolean}
      description: >-
        Whether the folder to be created should be a team

        folder. This value will be ignored if parent_folder_id is supplied, as the new

        folder will inherit the type (private or team folder) from its parent. We will by

        default create a top-level private folder if both parent_folder_id and

        is_team_folder are not supplied.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperFolderCreateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function FoldersCreateAsync(name As String, parentFolderId As String = Nothing, isTeamFolder As Boolean? = Nothing) As System.Threading.Tasks.Task(Of PaperFolderCreateResult)
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.PaperFolderCreateError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: PaperUserRoutes.FoldersCreateAsync(String, String, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync(System.String, System.String, System.Nullable(Of System.Boolean))
  name.vb: FoldersCreateAsync(String, String, Nullable(Of Boolean))
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate(System.String,System.String,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate(System.String,System.String,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  id: BeginFoldersCreate(System.String,System.String,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: BeginFoldersCreate(String, String, Nullable<Boolean>, System.AsyncCallback, Object)
  nameWithType: PaperUserRoutes.BeginFoldersCreate(String, String, Nullable<Boolean>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate(System.String, System.String, System.Nullable<System.Boolean>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginFoldersCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 2007
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Begins an asynchronous send to the folders create route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginFoldersCreate(string name, string parentFolderId = null, bool? isTeamFolder = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: name
      type: System.String
      description: The name of the new Paper folder.
    - id: parentFolderId
      type: System.String
      description: >-
        The encrypted Paper folder Id where the new Paper

        folder should be created. The API user has to have write access to this folder or

        error is thrown. If not supplied, the new folder will be created at top

        level.
    - id: isTeamFolder
      type: System.Nullable{System.Boolean}
      description: >-
        Whether the folder to be created should be a team

        folder. This value will be ignored if parent_folder_id is supplied, as the new

        folder will inherit the type (private or team folder) from its parent. We will by

        default create a top-level private folder if both parent_folder_id and

        is_team_folder are not supplied.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginFoldersCreate(name As String, parentFolderId As String = Nothing, isTeamFolder As Boolean? = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate*
  nameWithType.vb: PaperUserRoutes.BeginFoldersCreate(String, String, Nullable(Of Boolean), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate(System.String, System.String, System.Nullable(Of System.Boolean), System.AsyncCallback, System.Object)
  name.vb: BeginFoldersCreate(String, String, Nullable(Of Boolean), System.AsyncCallback, Object)
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndFoldersCreate(System.IAsyncResult)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndFoldersCreate(System.IAsyncResult)
  id: EndFoldersCreate(System.IAsyncResult)
  parent: Dropbox.Api.Paper.Routes.PaperUserRoutes
  langs:
  - csharp
  - vb
  name: EndFoldersCreate(System.IAsyncResult)
  nameWithType: PaperUserRoutes.EndFoldersCreate(System.IAsyncResult)
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndFoldersCreate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndFoldersCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Paper/PaperUserRoutes.cs
    startLine: 2031
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Paper.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the folders create route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public PaperFolderCreateResult EndFoldersCreate(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Paper.PaperFolderCreateResult
      description: The response to the send request
    content.vb: Public Function EndFoldersCreate(asyncResult As System.IAsyncResult) As PaperFolderCreateResult
  overload: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndFoldersCreate*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Paper.PaperFolderCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Dropbox.Api.Paper
  commentId: N:Dropbox.Api.Paper
  name: Dropbox.Api.Paper
  nameWithType: Dropbox.Api.Paper
  fullName: Dropbox.Api.Paper
- uid: Dropbox.Api.Paper.Routes
  commentId: N:Dropbox.Api.Paper.Routes
  name: Dropbox.Api.Paper.Routes
  nameWithType: Dropbox.Api.Paper.Routes
  fullName: Dropbox.Api.Paper.Routes
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Dropbox.Api.Paper.DocLookupError
  commentId: T:Dropbox.Api.Paper.DocLookupError
  parent: Dropbox.Api.Paper
  name: DocLookupError
  nameWithType: DocLookupError
  fullName: Dropbox.Api.Paper.DocLookupError
- uid: Dropbox.Api.ApiException`1
  commentId: T:Dropbox.Api.ApiException`1
  name: ApiException<TError>
  nameWithType: ApiException<TError>
  fullName: Dropbox.Api.ApiException<TError>
  nameWithType.vb: ApiException(Of TError)
  fullName.vb: Dropbox.Api.ApiException(Of TError)
  name.vb: ApiException(Of TError)
  spec.csharp:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: <
    nameWithType: <
    fullName: <
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync
  name: DocsArchiveAsync
  nameWithType: PaperUserRoutes.DocsArchiveAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsArchiveAsync
- uid: Dropbox.Api.Paper.RefPaperDoc
  commentId: T:Dropbox.Api.Paper.RefPaperDoc
  parent: Dropbox.Api.Paper
  name: RefPaperDoc
  nameWithType: RefPaperDoc
  fullName: Dropbox.Api.Paper.RefPaperDoc
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: System.Threading.Tasks.Task
  nameWithType: System.Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive
  name: BeginDocsArchive
  nameWithType: PaperUserRoutes.BeginDocsArchive
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsArchive
- uid: System.AsyncCallback
  isExternal: true
  name: System.AsyncCallback
  nameWithType: System.AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  isExternal: true
  name: System.IAsyncResult
  nameWithType: System.IAsyncResult
  fullName: System.IAsyncResult
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsArchive*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsArchive
  name: EndDocsArchive
  nameWithType: PaperUserRoutes.EndDocsArchive
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsArchive
- uid: Dropbox.Api.Paper.PaperDocCreateError
  commentId: T:Dropbox.Api.Paper.PaperDocCreateError
  parent: Dropbox.Api.Paper
  name: PaperDocCreateError
  nameWithType: PaperDocCreateError
  fullName: Dropbox.Api.Paper.PaperDocCreateError
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync
  name: DocsCreateAsync
  nameWithType: PaperUserRoutes.DocsCreateAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsCreateAsync
- uid: Dropbox.Api.Paper.PaperDocCreateArgs
  commentId: T:Dropbox.Api.Paper.PaperDocCreateArgs
  parent: Dropbox.Api.Paper
  name: PaperDocCreateArgs
  nameWithType: PaperDocCreateArgs
  fullName: Dropbox.Api.Paper.PaperDocCreateArgs
- uid: System.IO.Stream
  isExternal: true
  name: System.IO.Stream
  nameWithType: System.IO.Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperDocCreateUpdateResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperDocCreateUpdateResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<PaperDocCreateUpdateResult>
  nameWithType: System.Threading.Tasks.Task<PaperDocCreateUpdateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Paper.PaperDocCreateUpdateResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of PaperDocCreateUpdateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Paper.PaperDocCreateUpdateResult)
  name.vb: System.Threading.Tasks.Task(Of PaperDocCreateUpdateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.PaperDocCreateUpdateResult
    name: PaperDocCreateUpdateResult
    nameWithType: PaperDocCreateUpdateResult
    fullName: Dropbox.Api.Paper.PaperDocCreateUpdateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.PaperDocCreateUpdateResult
    name: PaperDocCreateUpdateResult
    nameWithType: PaperDocCreateUpdateResult
    fullName: Dropbox.Api.Paper.PaperDocCreateUpdateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: System.Threading.Tasks.Task<>
  nameWithType: System.Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: System.Threading.Tasks.Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: System.Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate
  name: BeginDocsCreate
  nameWithType: PaperUserRoutes.BeginDocsCreate
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsCreate
- uid: Dropbox.Api.Paper.ImportFormat
  commentId: T:Dropbox.Api.Paper.ImportFormat
  parent: Dropbox.Api.Paper
  name: ImportFormat
  nameWithType: ImportFormat
  fullName: Dropbox.Api.Paper.ImportFormat
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsCreate*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsCreate
  name: EndDocsCreate
  nameWithType: PaperUserRoutes.EndDocsCreate
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsCreate
- uid: Dropbox.Api.Paper.PaperDocCreateUpdateResult
  commentId: T:Dropbox.Api.Paper.PaperDocCreateUpdateResult
  parent: Dropbox.Api.Paper
  name: PaperDocCreateUpdateResult
  nameWithType: PaperDocCreateUpdateResult
  fullName: Dropbox.Api.Paper.PaperDocCreateUpdateResult
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync
  name: DocsDownloadAsync
  nameWithType: PaperUserRoutes.DocsDownloadAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsDownloadAsync
- uid: Dropbox.Api.Paper.PaperDocExport
  commentId: T:Dropbox.Api.Paper.PaperDocExport
  parent: Dropbox.Api.Paper
  name: PaperDocExport
  nameWithType: PaperDocExport
  fullName: Dropbox.Api.Paper.PaperDocExport
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Paper.PaperDocExportResult}}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Paper.PaperDocExportResult}}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<IDownloadResponse<PaperDocExportResult>>
  nameWithType: System.Threading.Tasks.Task<IDownloadResponse<PaperDocExportResult>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Paper.PaperDocExportResult>>
  nameWithType.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of PaperDocExportResult))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Paper.PaperDocExportResult))
  name.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of PaperDocExportResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.PaperDocExportResult
    name: PaperDocExportResult
    nameWithType: PaperDocExportResult
    fullName: Dropbox.Api.Paper.PaperDocExportResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.PaperDocExportResult
    name: PaperDocExportResult
    nameWithType: PaperDocExportResult
    fullName: Dropbox.Api.Paper.PaperDocExportResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload
  name: BeginDocsDownload
  nameWithType: PaperUserRoutes.BeginDocsDownload
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsDownload
- uid: Dropbox.Api.Paper.ExportFormat
  commentId: T:Dropbox.Api.Paper.ExportFormat
  parent: Dropbox.Api.Paper
  name: ExportFormat
  nameWithType: ExportFormat
  fullName: Dropbox.Api.Paper.ExportFormat
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsDownload*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsDownload
  name: EndDocsDownload
  nameWithType: PaperUserRoutes.EndDocsDownload
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsDownload
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Paper.PaperDocExportResult}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Paper.PaperDocExportResult}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<PaperDocExportResult>
  nameWithType: IDownloadResponse<PaperDocExportResult>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Paper.PaperDocExportResult>
  nameWithType.vb: IDownloadResponse(Of PaperDocExportResult)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Paper.PaperDocExportResult)
  name.vb: IDownloadResponse(Of PaperDocExportResult)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.PaperDocExportResult
    name: PaperDocExportResult
    nameWithType: PaperDocExportResult
    fullName: Dropbox.Api.Paper.PaperDocExportResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.PaperDocExportResult
    name: PaperDocExportResult
    nameWithType: PaperDocExportResult
    fullName: Dropbox.Api.Paper.PaperDocExportResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Stone.IDownloadResponse`1
  commentId: T:Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<TResponse>
  nameWithType: IDownloadResponse<TResponse>
  fullName: Dropbox.Api.Stone.IDownloadResponse<TResponse>
  nameWithType.vb: IDownloadResponse(Of TResponse)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of TResponse)
  name.vb: IDownloadResponse(Of TResponse)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Stone
  commentId: N:Dropbox.Api.Stone
  name: Dropbox.Api.Stone
  nameWithType: Dropbox.Api.Stone
  fullName: Dropbox.Api.Stone
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync
  name: DocsFolderUsersListAsync
  nameWithType: PaperUserRoutes.DocsFolderUsersListAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync
- uid: Dropbox.Api.Paper.ListUsersOnFolderArgs
  commentId: T:Dropbox.Api.Paper.ListUsersOnFolderArgs
  parent: Dropbox.Api.Paper
  name: ListUsersOnFolderArgs
  nameWithType: ListUsersOnFolderArgs
  fullName: Dropbox.Api.Paper.ListUsersOnFolderArgs
- uid: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnFolderResponse}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnFolderResponse}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<ListUsersOnFolderResponse>
  nameWithType: System.Threading.Tasks.Task<ListUsersOnFolderResponse>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Paper.ListUsersOnFolderResponse>
  nameWithType.vb: System.Threading.Tasks.Task(Of ListUsersOnFolderResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Paper.ListUsersOnFolderResponse)
  name.vb: System.Threading.Tasks.Task(Of ListUsersOnFolderResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.ListUsersOnFolderResponse
    name: ListUsersOnFolderResponse
    nameWithType: ListUsersOnFolderResponse
    fullName: Dropbox.Api.Paper.ListUsersOnFolderResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.ListUsersOnFolderResponse
    name: ListUsersOnFolderResponse
    nameWithType: ListUsersOnFolderResponse
    fullName: Dropbox.Api.Paper.ListUsersOnFolderResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList
  name: BeginDocsFolderUsersList
  nameWithType: PaperUserRoutes.BeginDocsFolderUsersList
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersList
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersList*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersList
  name: EndDocsFolderUsersList
  nameWithType: PaperUserRoutes.EndDocsFolderUsersList
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersList
- uid: Dropbox.Api.Paper.ListUsersOnFolderResponse
  commentId: T:Dropbox.Api.Paper.ListUsersOnFolderResponse
  parent: Dropbox.Api.Paper
  name: ListUsersOnFolderResponse
  nameWithType: ListUsersOnFolderResponse
  fullName: Dropbox.Api.Paper.ListUsersOnFolderResponse
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListAsync(Dropbox.Api.Paper.ListUsersOnFolderArgs)
  isExternal: true
- uid: Dropbox.Api.Paper.ListUsersCursorError
  commentId: T:Dropbox.Api.Paper.ListUsersCursorError
  parent: Dropbox.Api.Paper
  name: ListUsersCursorError
  nameWithType: ListUsersCursorError
  fullName: Dropbox.Api.Paper.ListUsersCursorError
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync
  name: DocsFolderUsersListContinueAsync
  nameWithType: PaperUserRoutes.DocsFolderUsersListContinueAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync
- uid: Dropbox.Api.Paper.ListUsersOnFolderContinueArgs
  commentId: T:Dropbox.Api.Paper.ListUsersOnFolderContinueArgs
  parent: Dropbox.Api.Paper
  name: ListUsersOnFolderContinueArgs
  nameWithType: ListUsersOnFolderContinueArgs
  fullName: Dropbox.Api.Paper.ListUsersOnFolderContinueArgs
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue
  name: BeginDocsFolderUsersListContinue
  nameWithType: PaperUserRoutes.BeginDocsFolderUsersListContinue
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsFolderUsersListContinue
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsFolderUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnFolderContinueArgs)
  isExternal: true
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersListContinue*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersListContinue
  name: EndDocsFolderUsersListContinue
  nameWithType: PaperUserRoutes.EndDocsFolderUsersListContinue
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsFolderUsersListContinue
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync
  name: DocsGetFolderInfoAsync
  nameWithType: PaperUserRoutes.DocsGetFolderInfoAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsGetFolderInfoAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Paper.FoldersContainingPaperDoc}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Paper.FoldersContainingPaperDoc}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<FoldersContainingPaperDoc>
  nameWithType: System.Threading.Tasks.Task<FoldersContainingPaperDoc>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Paper.FoldersContainingPaperDoc>
  nameWithType.vb: System.Threading.Tasks.Task(Of FoldersContainingPaperDoc)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Paper.FoldersContainingPaperDoc)
  name.vb: System.Threading.Tasks.Task(Of FoldersContainingPaperDoc)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.FoldersContainingPaperDoc
    name: FoldersContainingPaperDoc
    nameWithType: FoldersContainingPaperDoc
    fullName: Dropbox.Api.Paper.FoldersContainingPaperDoc
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.FoldersContainingPaperDoc
    name: FoldersContainingPaperDoc
    nameWithType: FoldersContainingPaperDoc
    fullName: Dropbox.Api.Paper.FoldersContainingPaperDoc
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo
  name: BeginDocsGetFolderInfo
  nameWithType: PaperUserRoutes.BeginDocsGetFolderInfo
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsGetFolderInfo
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsGetFolderInfo*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsGetFolderInfo
  name: EndDocsGetFolderInfo
  nameWithType: PaperUserRoutes.EndDocsGetFolderInfo
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsGetFolderInfo
- uid: Dropbox.Api.Paper.FoldersContainingPaperDoc
  commentId: T:Dropbox.Api.Paper.FoldersContainingPaperDoc
  parent: Dropbox.Api.Paper
  name: FoldersContainingPaperDoc
  nameWithType: FoldersContainingPaperDoc
  fullName: Dropbox.Api.Paper.FoldersContainingPaperDoc
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync(Dropbox.Api.Paper.ListPaperDocsContinueArgs)
  isExternal: true
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync
  name: DocsListAsync
  nameWithType: PaperUserRoutes.DocsListAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync
- uid: Dropbox.Api.Paper.ListPaperDocsArgs
  commentId: T:Dropbox.Api.Paper.ListPaperDocsArgs
  parent: Dropbox.Api.Paper
  name: ListPaperDocsArgs
  nameWithType: ListPaperDocsArgs
  fullName: Dropbox.Api.Paper.ListPaperDocsArgs
- uid: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListPaperDocsResponse}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Paper.ListPaperDocsResponse}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<ListPaperDocsResponse>
  nameWithType: System.Threading.Tasks.Task<ListPaperDocsResponse>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Paper.ListPaperDocsResponse>
  nameWithType.vb: System.Threading.Tasks.Task(Of ListPaperDocsResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Paper.ListPaperDocsResponse)
  name.vb: System.Threading.Tasks.Task(Of ListPaperDocsResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.ListPaperDocsResponse
    name: ListPaperDocsResponse
    nameWithType: ListPaperDocsResponse
    fullName: Dropbox.Api.Paper.ListPaperDocsResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.ListPaperDocsResponse
    name: ListPaperDocsResponse
    nameWithType: ListPaperDocsResponse
    fullName: Dropbox.Api.Paper.ListPaperDocsResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList
  name: BeginDocsList
  nameWithType: PaperUserRoutes.BeginDocsList
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsList
- uid: Dropbox.Api.Paper.ListPaperDocsFilterBy
  commentId: T:Dropbox.Api.Paper.ListPaperDocsFilterBy
  parent: Dropbox.Api.Paper
  name: ListPaperDocsFilterBy
  nameWithType: ListPaperDocsFilterBy
  fullName: Dropbox.Api.Paper.ListPaperDocsFilterBy
- uid: Dropbox.Api.Paper.ListPaperDocsSortBy
  commentId: T:Dropbox.Api.Paper.ListPaperDocsSortBy
  parent: Dropbox.Api.Paper
  name: ListPaperDocsSortBy
  nameWithType: ListPaperDocsSortBy
  fullName: Dropbox.Api.Paper.ListPaperDocsSortBy
- uid: Dropbox.Api.Paper.ListPaperDocsSortOrder
  commentId: T:Dropbox.Api.Paper.ListPaperDocsSortOrder
  parent: Dropbox.Api.Paper
  name: ListPaperDocsSortOrder
  nameWithType: ListPaperDocsSortOrder
  fullName: Dropbox.Api.Paper.ListPaperDocsSortOrder
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsList*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsList
  name: EndDocsList
  nameWithType: PaperUserRoutes.EndDocsList
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsList
- uid: Dropbox.Api.Paper.ListPaperDocsResponse
  commentId: T:Dropbox.Api.Paper.ListPaperDocsResponse
  parent: Dropbox.Api.Paper
  name: ListPaperDocsResponse
  nameWithType: ListPaperDocsResponse
  fullName: Dropbox.Api.Paper.ListPaperDocsResponse
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListAsync(Dropbox.Api.Paper.ListPaperDocsArgs)
  isExternal: true
- uid: Dropbox.Api.Paper.ListDocsCursorError
  commentId: T:Dropbox.Api.Paper.ListDocsCursorError
  parent: Dropbox.Api.Paper
  name: ListDocsCursorError
  nameWithType: ListDocsCursorError
  fullName: Dropbox.Api.Paper.ListDocsCursorError
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync
  name: DocsListContinueAsync
  nameWithType: PaperUserRoutes.DocsListContinueAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsListContinueAsync
- uid: Dropbox.Api.Paper.ListPaperDocsContinueArgs
  commentId: T:Dropbox.Api.Paper.ListPaperDocsContinueArgs
  parent: Dropbox.Api.Paper
  name: ListPaperDocsContinueArgs
  nameWithType: ListPaperDocsContinueArgs
  fullName: Dropbox.Api.Paper.ListPaperDocsContinueArgs
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue
  name: BeginDocsListContinue
  nameWithType: PaperUserRoutes.BeginDocsListContinue
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsListContinue
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsListContinue*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsListContinue
  name: EndDocsListContinue
  nameWithType: PaperUserRoutes.EndDocsListContinue
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsListContinue
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync
  name: DocsPermanentlyDeleteAsync
  nameWithType: PaperUserRoutes.DocsPermanentlyDeleteAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsPermanentlyDeleteAsync
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete
  name: BeginDocsPermanentlyDelete
  nameWithType: PaperUserRoutes.BeginDocsPermanentlyDelete
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsPermanentlyDelete
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsPermanentlyDelete*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsPermanentlyDelete
  name: EndDocsPermanentlyDelete
  nameWithType: PaperUserRoutes.EndDocsPermanentlyDelete
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsPermanentlyDelete
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync
  name: DocsSharingPolicyGetAsync
  nameWithType: PaperUserRoutes.DocsSharingPolicyGetAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicyGetAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Paper.SharingPolicy}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Paper.SharingPolicy}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<SharingPolicy>
  nameWithType: System.Threading.Tasks.Task<SharingPolicy>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Paper.SharingPolicy>
  nameWithType.vb: System.Threading.Tasks.Task(Of SharingPolicy)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Paper.SharingPolicy)
  name.vb: System.Threading.Tasks.Task(Of SharingPolicy)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.SharingPolicy
    name: SharingPolicy
    nameWithType: SharingPolicy
    fullName: Dropbox.Api.Paper.SharingPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.SharingPolicy
    name: SharingPolicy
    nameWithType: SharingPolicy
    fullName: Dropbox.Api.Paper.SharingPolicy
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet
  name: BeginDocsSharingPolicyGet
  nameWithType: PaperUserRoutes.BeginDocsSharingPolicyGet
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicyGet
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicyGet*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicyGet
  name: EndDocsSharingPolicyGet
  nameWithType: PaperUserRoutes.EndDocsSharingPolicyGet
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicyGet
- uid: Dropbox.Api.Paper.SharingPolicy
  commentId: T:Dropbox.Api.Paper.SharingPolicy
  parent: Dropbox.Api.Paper
  name: SharingPolicy
  nameWithType: SharingPolicy
  fullName: Dropbox.Api.Paper.SharingPolicy
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync
  name: DocsSharingPolicySetAsync
  nameWithType: PaperUserRoutes.DocsSharingPolicySetAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsSharingPolicySetAsync
- uid: Dropbox.Api.Paper.PaperDocSharingPolicy
  commentId: T:Dropbox.Api.Paper.PaperDocSharingPolicy
  parent: Dropbox.Api.Paper
  name: PaperDocSharingPolicy
  nameWithType: PaperDocSharingPolicy
  fullName: Dropbox.Api.Paper.PaperDocSharingPolicy
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet
  name: BeginDocsSharingPolicySet
  nameWithType: PaperUserRoutes.BeginDocsSharingPolicySet
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsSharingPolicySet
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicySet*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicySet
  name: EndDocsSharingPolicySet
  nameWithType: PaperUserRoutes.EndDocsSharingPolicySet
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsSharingPolicySet
- uid: Dropbox.Api.Paper.PaperDocUpdateError
  commentId: T:Dropbox.Api.Paper.PaperDocUpdateError
  parent: Dropbox.Api.Paper
  name: PaperDocUpdateError
  nameWithType: PaperDocUpdateError
  fullName: Dropbox.Api.Paper.PaperDocUpdateError
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync
  name: DocsUpdateAsync
  nameWithType: PaperUserRoutes.DocsUpdateAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUpdateAsync
- uid: Dropbox.Api.Paper.PaperDocUpdateArgs
  commentId: T:Dropbox.Api.Paper.PaperDocUpdateArgs
  parent: Dropbox.Api.Paper
  name: PaperDocUpdateArgs
  nameWithType: PaperDocUpdateArgs
  fullName: Dropbox.Api.Paper.PaperDocUpdateArgs
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate
  name: BeginDocsUpdate
  nameWithType: PaperUserRoutes.BeginDocsUpdate
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUpdate
- uid: Dropbox.Api.Paper.PaperDocUpdatePolicy
  commentId: T:Dropbox.Api.Paper.PaperDocUpdatePolicy
  parent: Dropbox.Api.Paper
  name: PaperDocUpdatePolicy
  nameWithType: PaperDocUpdatePolicy
  fullName: Dropbox.Api.Paper.PaperDocUpdatePolicy
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUpdate*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUpdate
  name: EndDocsUpdate
  nameWithType: PaperUserRoutes.EndDocsUpdate
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUpdate
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync
  name: DocsUsersAddAsync
  nameWithType: PaperUserRoutes.DocsUsersAddAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersAddAsync
- uid: Dropbox.Api.Paper.AddPaperDocUser
  commentId: T:Dropbox.Api.Paper.AddPaperDocUser
  parent: Dropbox.Api.Paper
  name: AddPaperDocUser
  nameWithType: AddPaperDocUser
  fullName: Dropbox.Api.Paper.AddPaperDocUser
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{Dropbox.Api.Paper.AddPaperDocUserMemberResult}}
  commentId: '!:System.Threading.Tasks.Task{System.Collections.Generic.List{Dropbox.Api.Paper.AddPaperDocUserMemberResult}}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<System.Collections.Generic.List<AddPaperDocUserMemberResult>>
  nameWithType: System.Threading.Tasks.Task<System.Collections.Generic.List<AddPaperDocUserMemberResult>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<Dropbox.Api.Paper.AddPaperDocUserMemberResult>>
  nameWithType.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of AddPaperDocUserMemberResult))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of Dropbox.Api.Paper.AddPaperDocUserMemberResult))
  name.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of AddPaperDocUserMemberResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: System.Collections.Generic.List
    nameWithType: System.Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.AddPaperDocUserMemberResult
    name: AddPaperDocUserMemberResult
    nameWithType: AddPaperDocUserMemberResult
    fullName: Dropbox.Api.Paper.AddPaperDocUserMemberResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: System.Collections.Generic.List
    nameWithType: System.Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.AddPaperDocUserMemberResult
    name: AddPaperDocUserMemberResult
    nameWithType: AddPaperDocUserMemberResult
    fullName: Dropbox.Api.Paper.AddPaperDocUserMemberResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd
  name: BeginDocsUsersAdd
  nameWithType: PaperUserRoutes.BeginDocsUsersAdd
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersAdd
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember}
  commentId: '!:System.Collections.Generic.IEnumerable{Dropbox.Api.Paper.AddMember}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<AddMember>
  nameWithType: System.Collections.Generic.IEnumerable<AddMember>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Paper.AddMember>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of AddMember)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Paper.AddMember)
  name.vb: System.Collections.Generic.IEnumerable(Of AddMember)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.AddMember
    name: AddMember
    nameWithType: AddMember
    fullName: Dropbox.Api.Paper.AddMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.AddMember
    name: AddMember
    nameWithType: AddMember
    fullName: Dropbox.Api.Paper.AddMember
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: System.Collections.Generic.IEnumerable<>
  nameWithType: System.Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersAdd*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersAdd
  name: EndDocsUsersAdd
  nameWithType: PaperUserRoutes.EndDocsUsersAdd
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersAdd
- uid: System.Collections.Generic.List{Dropbox.Api.Paper.AddPaperDocUserMemberResult}
  commentId: '!:System.Collections.Generic.List{Dropbox.Api.Paper.AddPaperDocUserMemberResult}'
  definition: System.Collections.Generic.List`1
  name: System.Collections.Generic.List<AddPaperDocUserMemberResult>
  nameWithType: System.Collections.Generic.List<AddPaperDocUserMemberResult>
  fullName: System.Collections.Generic.List<Dropbox.Api.Paper.AddPaperDocUserMemberResult>
  nameWithType.vb: System.Collections.Generic.List(Of AddPaperDocUserMemberResult)
  fullName.vb: System.Collections.Generic.List(Of Dropbox.Api.Paper.AddPaperDocUserMemberResult)
  name.vb: System.Collections.Generic.List(Of AddPaperDocUserMemberResult)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: System.Collections.Generic.List
    nameWithType: System.Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.AddPaperDocUserMemberResult
    name: AddPaperDocUserMemberResult
    nameWithType: AddPaperDocUserMemberResult
    fullName: Dropbox.Api.Paper.AddPaperDocUserMemberResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: System.Collections.Generic.List
    nameWithType: System.Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.AddPaperDocUserMemberResult
    name: AddPaperDocUserMemberResult
    nameWithType: AddPaperDocUserMemberResult
    fullName: Dropbox.Api.Paper.AddPaperDocUserMemberResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  isExternal: true
  name: System.Collections.Generic.List<>
  nameWithType: System.Collections.Generic.List<>
  fullName: System.Collections.Generic.List<>
  nameWithType.vb: System.Collections.Generic.List(Of )
  fullName.vb: System.Collections.Generic.List(Of )
  name.vb: System.Collections.Generic.List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: System.Collections.Generic.List
    nameWithType: System.Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: System.Collections.Generic.List
    nameWithType: System.Collections.Generic.List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync
  name: DocsUsersListAsync
  nameWithType: PaperUserRoutes.DocsUsersListAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync
- uid: Dropbox.Api.Paper.ListUsersOnPaperDocArgs
  commentId: T:Dropbox.Api.Paper.ListUsersOnPaperDocArgs
  parent: Dropbox.Api.Paper
  name: ListUsersOnPaperDocArgs
  nameWithType: ListUsersOnPaperDocArgs
  fullName: Dropbox.Api.Paper.ListUsersOnPaperDocArgs
- uid: System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnPaperDocResponse}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Paper.ListUsersOnPaperDocResponse}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<ListUsersOnPaperDocResponse>
  nameWithType: System.Threading.Tasks.Task<ListUsersOnPaperDocResponse>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Paper.ListUsersOnPaperDocResponse>
  nameWithType.vb: System.Threading.Tasks.Task(Of ListUsersOnPaperDocResponse)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Paper.ListUsersOnPaperDocResponse)
  name.vb: System.Threading.Tasks.Task(Of ListUsersOnPaperDocResponse)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.ListUsersOnPaperDocResponse
    name: ListUsersOnPaperDocResponse
    nameWithType: ListUsersOnPaperDocResponse
    fullName: Dropbox.Api.Paper.ListUsersOnPaperDocResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.ListUsersOnPaperDocResponse
    name: ListUsersOnPaperDocResponse
    nameWithType: ListUsersOnPaperDocResponse
    fullName: Dropbox.Api.Paper.ListUsersOnPaperDocResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList
  name: BeginDocsUsersList
  nameWithType: PaperUserRoutes.BeginDocsUsersList
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersList
- uid: Dropbox.Api.Paper.UserOnPaperDocFilter
  commentId: T:Dropbox.Api.Paper.UserOnPaperDocFilter
  parent: Dropbox.Api.Paper
  name: UserOnPaperDocFilter
  nameWithType: UserOnPaperDocFilter
  fullName: Dropbox.Api.Paper.UserOnPaperDocFilter
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersList*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersList
  name: EndDocsUsersList
  nameWithType: PaperUserRoutes.EndDocsUsersList
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersList
- uid: Dropbox.Api.Paper.ListUsersOnPaperDocResponse
  commentId: T:Dropbox.Api.Paper.ListUsersOnPaperDocResponse
  parent: Dropbox.Api.Paper
  name: ListUsersOnPaperDocResponse
  nameWithType: ListUsersOnPaperDocResponse
  fullName: Dropbox.Api.Paper.ListUsersOnPaperDocResponse
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListAsync(Dropbox.Api.Paper.ListUsersOnPaperDocArgs)
  isExternal: true
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync
  name: DocsUsersListContinueAsync
  nameWithType: PaperUserRoutes.DocsUsersListContinueAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync
- uid: Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs
  commentId: T:Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs
  parent: Dropbox.Api.Paper
  name: ListUsersOnPaperDocContinueArgs
  nameWithType: ListUsersOnPaperDocContinueArgs
  fullName: Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue
  name: BeginDocsUsersListContinue
  nameWithType: PaperUserRoutes.BeginDocsUsersListContinue
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersListContinue
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs)
  commentId: M:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersListContinueAsync(Dropbox.Api.Paper.ListUsersOnPaperDocContinueArgs)
  isExternal: true
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersListContinue*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersListContinue
  name: EndDocsUsersListContinue
  nameWithType: PaperUserRoutes.EndDocsUsersListContinue
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersListContinue
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync
  name: DocsUsersRemoveAsync
  nameWithType: PaperUserRoutes.DocsUsersRemoveAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.DocsUsersRemoveAsync
- uid: Dropbox.Api.Paper.RemovePaperDocUser
  commentId: T:Dropbox.Api.Paper.RemovePaperDocUser
  parent: Dropbox.Api.Paper
  name: RemovePaperDocUser
  nameWithType: RemovePaperDocUser
  fullName: Dropbox.Api.Paper.RemovePaperDocUser
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove
  name: BeginDocsUsersRemove
  nameWithType: PaperUserRoutes.BeginDocsUsersRemove
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginDocsUsersRemove
- uid: Dropbox.Api.Sharing.MemberSelector
  commentId: T:Dropbox.Api.Sharing.MemberSelector
  parent: Dropbox.Api.Sharing
  name: MemberSelector
  nameWithType: MemberSelector
  fullName: Dropbox.Api.Sharing.MemberSelector
- uid: Dropbox.Api.Sharing
  commentId: N:Dropbox.Api.Sharing
  name: Dropbox.Api.Sharing
  nameWithType: Dropbox.Api.Sharing
  fullName: Dropbox.Api.Sharing
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersRemove*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersRemove
  name: EndDocsUsersRemove
  nameWithType: PaperUserRoutes.EndDocsUsersRemove
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndDocsUsersRemove
- uid: Dropbox.Api.Paper.PaperFolderCreateError
  commentId: T:Dropbox.Api.Paper.PaperFolderCreateError
  parent: Dropbox.Api.Paper
  name: PaperFolderCreateError
  nameWithType: PaperFolderCreateError
  fullName: Dropbox.Api.Paper.PaperFolderCreateError
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync
  name: FoldersCreateAsync
  nameWithType: PaperUserRoutes.FoldersCreateAsync
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.FoldersCreateAsync
- uid: Dropbox.Api.Paper.PaperFolderCreateArg
  commentId: T:Dropbox.Api.Paper.PaperFolderCreateArg
  parent: Dropbox.Api.Paper
  name: PaperFolderCreateArg
  nameWithType: PaperFolderCreateArg
  fullName: Dropbox.Api.Paper.PaperFolderCreateArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperFolderCreateResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Paper.PaperFolderCreateResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<PaperFolderCreateResult>
  nameWithType: System.Threading.Tasks.Task<PaperFolderCreateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Paper.PaperFolderCreateResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of PaperFolderCreateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Paper.PaperFolderCreateResult)
  name.vb: System.Threading.Tasks.Task(Of PaperFolderCreateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Paper.PaperFolderCreateResult
    name: PaperFolderCreateResult
    nameWithType: PaperFolderCreateResult
    fullName: Dropbox.Api.Paper.PaperFolderCreateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Paper.PaperFolderCreateResult
    name: PaperFolderCreateResult
    nameWithType: PaperFolderCreateResult
    fullName: Dropbox.Api.Paper.PaperFolderCreateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate
  name: BeginFoldersCreate
  nameWithType: PaperUserRoutes.BeginFoldersCreate
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.BeginFoldersCreate
- uid: System.Nullable{System.Boolean}
  commentId: '!:System.Nullable{System.Boolean}'
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndFoldersCreate*
  commentId: Overload:Dropbox.Api.Paper.Routes.PaperUserRoutes.EndFoldersCreate
  name: EndFoldersCreate
  nameWithType: PaperUserRoutes.EndFoldersCreate
  fullName: Dropbox.Api.Paper.Routes.PaperUserRoutes.EndFoldersCreate
- uid: Dropbox.Api.Paper.PaperFolderCreateResult
  commentId: T:Dropbox.Api.Paper.PaperFolderCreateResult
  parent: Dropbox.Api.Paper
  name: PaperFolderCreateResult
  nameWithType: PaperFolderCreateResult
  fullName: Dropbox.Api.Paper.PaperFolderCreateResult
shouldSkipMarkup: true
