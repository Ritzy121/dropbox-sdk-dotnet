### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.Files.WriteConflictError
  commentId: T:Dropbox.Api.Files.WriteConflictError
  id: WriteConflictError
  parent: Dropbox.Api.Files
  children:
  - Dropbox.Api.Files.WriteConflictError.#ctor
  - Dropbox.Api.Files.WriteConflictError.AsFile
  - Dropbox.Api.Files.WriteConflictError.AsFileAncestor
  - Dropbox.Api.Files.WriteConflictError.AsFolder
  - Dropbox.Api.Files.WriteConflictError.AsOther
  - Dropbox.Api.Files.WriteConflictError.IsFile
  - Dropbox.Api.Files.WriteConflictError.IsFileAncestor
  - Dropbox.Api.Files.WriteConflictError.IsFolder
  - Dropbox.Api.Files.WriteConflictError.IsOther
  langs:
  - csharp
  - vb
  name: WriteConflictError
  nameWithType: WriteConflictError
  fullName: Dropbox.Api.Files.WriteConflictError
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: WriteConflictError
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 15
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>The write conflict error object</p>\n"
  example: []
  syntax:
    content: 'public class WriteConflictError : object'
    content.vb: >-
      Public Class WriteConflictError
          Inherits Object
  inheritance:
  - System.Object
  derivedClasses:
  - Dropbox.Api.Files.WriteConflictError.File
  - Dropbox.Api.Files.WriteConflictError.FileAncestor
  - Dropbox.Api.Files.WriteConflictError.Folder
  - Dropbox.Api.Files.WriteConflictError.Other
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.Files.WriteConflictError.#ctor
  commentId: M:Dropbox.Api.Files.WriteConflictError.#ctor
  id: '#ctor'
  parent: Dropbox.Api.Files.WriteConflictError
  langs:
  - csharp
  - vb
  name: WriteConflictError()
  nameWithType: WriteConflictError.WriteConflictError()
  fullName: Dropbox.Api.Files.WriteConflictError.WriteConflictError()
  type: Constructor
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: .ctor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 33
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Initializes a new instance of the <xref href=\"Dropbox.Api.Files.WriteConflictError\" data-throw-if-not-resolved=\"false\"></xref>\nclass.</p>\n"
  example: []
  syntax:
    content: public WriteConflictError()
    content.vb: Public Sub New
  overload: Dropbox.Api.Files.WriteConflictError.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.WriteConflictError.IsFile
  commentId: P:Dropbox.Api.Files.WriteConflictError.IsFile
  id: IsFile
  parent: Dropbox.Api.Files.WriteConflictError
  langs:
  - csharp
  - vb
  name: IsFile
  nameWithType: WriteConflictError.IsFile
  fullName: Dropbox.Api.Files.WriteConflictError.IsFile
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: IsFile
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 40
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Gets a value indicating whether this instance is File</p>\n"
  example: []
  syntax:
    content: public bool IsFile { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFile As Boolean
  overload: Dropbox.Api.Files.WriteConflictError.IsFile*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Files.WriteConflictError.AsFile
  commentId: P:Dropbox.Api.Files.WriteConflictError.AsFile
  id: AsFile
  parent: Dropbox.Api.Files.WriteConflictError
  langs:
  - csharp
  - vb
  name: AsFile
  nameWithType: WriteConflictError.AsFile
  fullName: Dropbox.Api.Files.WriteConflictError.AsFile
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: AsFile
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 51
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Gets this instance as a File, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public WriteConflictError.File AsFile { get; }
    parameters: []
    return:
      type: Dropbox.Api.Files.WriteConflictError.File
    content.vb: Public ReadOnly Property AsFile As WriteConflictError.File
  overload: Dropbox.Api.Files.WriteConflictError.AsFile*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Files.WriteConflictError.IsFolder
  commentId: P:Dropbox.Api.Files.WriteConflictError.IsFolder
  id: IsFolder
  parent: Dropbox.Api.Files.WriteConflictError
  langs:
  - csharp
  - vb
  name: IsFolder
  nameWithType: WriteConflictError.IsFolder
  fullName: Dropbox.Api.Files.WriteConflictError.IsFolder
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: IsFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 62
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Gets a value indicating whether this instance is Folder</p>\n"
  example: []
  syntax:
    content: public bool IsFolder { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFolder As Boolean
  overload: Dropbox.Api.Files.WriteConflictError.IsFolder*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Files.WriteConflictError.AsFolder
  commentId: P:Dropbox.Api.Files.WriteConflictError.AsFolder
  id: AsFolder
  parent: Dropbox.Api.Files.WriteConflictError
  langs:
  - csharp
  - vb
  name: AsFolder
  nameWithType: WriteConflictError.AsFolder
  fullName: Dropbox.Api.Files.WriteConflictError.AsFolder
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: AsFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 73
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Gets this instance as a Folder, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public WriteConflictError.Folder AsFolder { get; }
    parameters: []
    return:
      type: Dropbox.Api.Files.WriteConflictError.Folder
    content.vb: Public ReadOnly Property AsFolder As WriteConflictError.Folder
  overload: Dropbox.Api.Files.WriteConflictError.AsFolder*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Files.WriteConflictError.IsFileAncestor
  commentId: P:Dropbox.Api.Files.WriteConflictError.IsFileAncestor
  id: IsFileAncestor
  parent: Dropbox.Api.Files.WriteConflictError
  langs:
  - csharp
  - vb
  name: IsFileAncestor
  nameWithType: WriteConflictError.IsFileAncestor
  fullName: Dropbox.Api.Files.WriteConflictError.IsFileAncestor
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: IsFileAncestor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 84
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Gets a value indicating whether this instance is FileAncestor</p>\n"
  example: []
  syntax:
    content: public bool IsFileAncestor { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFileAncestor As Boolean
  overload: Dropbox.Api.Files.WriteConflictError.IsFileAncestor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Files.WriteConflictError.AsFileAncestor
  commentId: P:Dropbox.Api.Files.WriteConflictError.AsFileAncestor
  id: AsFileAncestor
  parent: Dropbox.Api.Files.WriteConflictError
  langs:
  - csharp
  - vb
  name: AsFileAncestor
  nameWithType: WriteConflictError.AsFileAncestor
  fullName: Dropbox.Api.Files.WriteConflictError.AsFileAncestor
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: AsFileAncestor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 95
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Gets this instance as a FileAncestor, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public WriteConflictError.FileAncestor AsFileAncestor { get; }
    parameters: []
    return:
      type: Dropbox.Api.Files.WriteConflictError.FileAncestor
    content.vb: Public ReadOnly Property AsFileAncestor As WriteConflictError.FileAncestor
  overload: Dropbox.Api.Files.WriteConflictError.AsFileAncestor*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Files.WriteConflictError.IsOther
  commentId: P:Dropbox.Api.Files.WriteConflictError.IsOther
  id: IsOther
  parent: Dropbox.Api.Files.WriteConflictError
  langs:
  - csharp
  - vb
  name: IsOther
  nameWithType: WriteConflictError.IsOther
  fullName: Dropbox.Api.Files.WriteConflictError.IsOther
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: IsOther
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 106
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Gets a value indicating whether this instance is Other</p>\n"
  example: []
  syntax:
    content: public bool IsOther { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOther As Boolean
  overload: Dropbox.Api.Files.WriteConflictError.IsOther*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Files.WriteConflictError.AsOther
  commentId: P:Dropbox.Api.Files.WriteConflictError.AsOther
  id: AsOther
  parent: Dropbox.Api.Files.WriteConflictError
  langs:
  - csharp
  - vb
  name: AsOther
  nameWithType: WriteConflictError.AsOther
  fullName: Dropbox.Api.Files.WriteConflictError.AsOther
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: AsOther
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/WriteConflictError.cs
    startLine: 117
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Gets this instance as a Other, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public WriteConflictError.Other AsOther { get; }
    parameters: []
    return:
      type: Dropbox.Api.Files.WriteConflictError.Other
    content.vb: Public ReadOnly Property AsOther As WriteConflictError.Other
  overload: Dropbox.Api.Files.WriteConflictError.AsOther*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Dropbox.Api.Files
  commentId: N:Dropbox.Api.Files
  name: Dropbox.Api.Files
  nameWithType: Dropbox.Api.Files
  fullName: Dropbox.Api.Files
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Dropbox.Api.Files.WriteConflictError
  commentId: T:Dropbox.Api.Files.WriteConflictError
  parent: Dropbox.Api.Files
  name: WriteConflictError
  nameWithType: WriteConflictError
  fullName: Dropbox.Api.Files.WriteConflictError
- uid: Dropbox.Api.Files.WriteConflictError.#ctor*
  commentId: Overload:Dropbox.Api.Files.WriteConflictError.#ctor
  name: WriteConflictError
  nameWithType: WriteConflictError.WriteConflictError
  fullName: Dropbox.Api.Files.WriteConflictError.WriteConflictError
- uid: Dropbox.Api.Files.WriteConflictError.IsFile*
  commentId: Overload:Dropbox.Api.Files.WriteConflictError.IsFile
  name: IsFile
  nameWithType: WriteConflictError.IsFile
  fullName: Dropbox.Api.Files.WriteConflictError.IsFile
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Dropbox.Api.Files.WriteConflictError.AsFile*
  commentId: Overload:Dropbox.Api.Files.WriteConflictError.AsFile
  name: AsFile
  nameWithType: WriteConflictError.AsFile
  fullName: Dropbox.Api.Files.WriteConflictError.AsFile
- uid: Dropbox.Api.Files.WriteConflictError.File
  commentId: T:Dropbox.Api.Files.WriteConflictError.File
  parent: Dropbox.Api.Files
  name: WriteConflictError.File
  nameWithType: WriteConflictError.File
  fullName: Dropbox.Api.Files.WriteConflictError.File
- uid: Dropbox.Api.Files.WriteConflictError.IsFolder*
  commentId: Overload:Dropbox.Api.Files.WriteConflictError.IsFolder
  name: IsFolder
  nameWithType: WriteConflictError.IsFolder
  fullName: Dropbox.Api.Files.WriteConflictError.IsFolder
- uid: Dropbox.Api.Files.WriteConflictError.AsFolder*
  commentId: Overload:Dropbox.Api.Files.WriteConflictError.AsFolder
  name: AsFolder
  nameWithType: WriteConflictError.AsFolder
  fullName: Dropbox.Api.Files.WriteConflictError.AsFolder
- uid: Dropbox.Api.Files.WriteConflictError.Folder
  commentId: T:Dropbox.Api.Files.WriteConflictError.Folder
  parent: Dropbox.Api.Files
  name: WriteConflictError.Folder
  nameWithType: WriteConflictError.Folder
  fullName: Dropbox.Api.Files.WriteConflictError.Folder
- uid: Dropbox.Api.Files.WriteConflictError.IsFileAncestor*
  commentId: Overload:Dropbox.Api.Files.WriteConflictError.IsFileAncestor
  name: IsFileAncestor
  nameWithType: WriteConflictError.IsFileAncestor
  fullName: Dropbox.Api.Files.WriteConflictError.IsFileAncestor
- uid: Dropbox.Api.Files.WriteConflictError.AsFileAncestor*
  commentId: Overload:Dropbox.Api.Files.WriteConflictError.AsFileAncestor
  name: AsFileAncestor
  nameWithType: WriteConflictError.AsFileAncestor
  fullName: Dropbox.Api.Files.WriteConflictError.AsFileAncestor
- uid: Dropbox.Api.Files.WriteConflictError.FileAncestor
  commentId: T:Dropbox.Api.Files.WriteConflictError.FileAncestor
  parent: Dropbox.Api.Files
  name: WriteConflictError.FileAncestor
  nameWithType: WriteConflictError.FileAncestor
  fullName: Dropbox.Api.Files.WriteConflictError.FileAncestor
- uid: Dropbox.Api.Files.WriteConflictError.IsOther*
  commentId: Overload:Dropbox.Api.Files.WriteConflictError.IsOther
  name: IsOther
  nameWithType: WriteConflictError.IsOther
  fullName: Dropbox.Api.Files.WriteConflictError.IsOther
- uid: Dropbox.Api.Files.WriteConflictError.AsOther*
  commentId: Overload:Dropbox.Api.Files.WriteConflictError.AsOther
  name: AsOther
  nameWithType: WriteConflictError.AsOther
  fullName: Dropbox.Api.Files.WriteConflictError.AsOther
- uid: Dropbox.Api.Files.WriteConflictError.Other
  commentId: T:Dropbox.Api.Files.WriteConflictError.Other
  parent: Dropbox.Api.Files
  name: WriteConflictError.Other
  nameWithType: WriteConflictError.Other
  fullName: Dropbox.Api.Files.WriteConflictError.Other
shouldSkipMarkup: true
