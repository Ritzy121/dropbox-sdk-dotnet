### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  commentId: T:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  id: TeamLogTeamRoutes
  parent: Dropbox.Api.TeamLog.Routes
  children:
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents(Dropbox.Api.TeamLog.GetTeamEventsArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents(System.UInt32,System.String,Dropbox.Api.TeamCommon.TimeRange,Dropbox.Api.TeamLog.EventCategory,Dropbox.Api.TeamLog.EventTypeArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue(Dropbox.Api.TeamLog.GetTeamEventsContinueArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEvents(System.IAsyncResult)
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEventsContinue(System.IAsyncResult)
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(Dropbox.Api.TeamLog.GetTeamEventsArg)
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(System.UInt32,System.String,Dropbox.Api.TeamCommon.TimeRange,Dropbox.Api.TeamLog.EventCategory,Dropbox.Api.TeamLog.EventTypeArg)
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(Dropbox.Api.TeamLog.GetTeamEventsContinueArg)
  - Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(System.String)
  langs:
  - csharp
  - vb
  name: TeamLogTeamRoutes
  nameWithType: TeamLogTeamRoutes
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: TeamLogTeamRoutes
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 15
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  summary: "\n<p>The routes for the <xref href=\"Dropbox.Api.TeamLog\" data-throw-if-not-resolved=\"false\"></xref> namespace</p>\n"
  example: []
  syntax:
    content: public class TeamLogTeamRoutes
    content.vb: Public Class TeamLogTeamRoutes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(Dropbox.Api.TeamLog.GetTeamEventsArg)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(Dropbox.Api.TeamLog.GetTeamEventsArg)
  id: GetEventsAsync(Dropbox.Api.TeamLog.GetTeamEventsArg)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: GetEventsAsync(GetTeamEventsArg)
  nameWithType: TeamLogTeamRoutes.GetEventsAsync(GetTeamEventsArg)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(Dropbox.Api.TeamLog.GetTeamEventsArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetEventsAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 55
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  syntax:
    content: public Task<GetTeamEventsResult> GetEventsAsync(GetTeamEventsArg getTeamEventsArg)
    parameters:
    - id: getTeamEventsArg
      type: Dropbox.Api.TeamLog.GetTeamEventsArg
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.TeamLog.GetTeamEventsResult}
    content.vb: Public Function GetEventsAsync(getTeamEventsArg As GetTeamEventsArg) As Task(Of GetTeamEventsResult)
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents(Dropbox.Api.TeamLog.GetTeamEventsArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents(Dropbox.Api.TeamLog.GetTeamEventsArg,System.AsyncCallback,System.Object)
  id: BeginGetEvents(Dropbox.Api.TeamLog.GetTeamEventsArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: BeginGetEvents(GetTeamEventsArg, AsyncCallback, Object)
  nameWithType: TeamLogTeamRoutes.BeginGetEvents(GetTeamEventsArg, AsyncCallback, Object)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents(Dropbox.Api.TeamLog.GetTeamEventsArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetEvents
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 69
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  summary: "\n<p>Begins an asynchronous send to the get events route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetEvents(GetTeamEventsArg getTeamEventsArg, AsyncCallback callback, object state = null)
    parameters:
    - id: getTeamEventsArg
      type: Dropbox.Api.TeamLog.GetTeamEventsArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetEvents(getTeamEventsArg As GetTeamEventsArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(System.UInt32,System.String,Dropbox.Api.TeamCommon.TimeRange,Dropbox.Api.TeamLog.EventCategory,Dropbox.Api.TeamLog.EventTypeArg)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(System.UInt32,System.String,Dropbox.Api.TeamCommon.TimeRange,Dropbox.Api.TeamLog.EventCategory,Dropbox.Api.TeamLog.EventTypeArg)
  id: GetEventsAsync(System.UInt32,System.String,Dropbox.Api.TeamCommon.TimeRange,Dropbox.Api.TeamLog.EventCategory,Dropbox.Api.TeamLog.EventTypeArg)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: GetEventsAsync(UInt32, String, TimeRange, EventCategory, EventTypeArg)
  nameWithType: TeamLogTeamRoutes.GetEventsAsync(UInt32, String, TimeRange, EventCategory, EventTypeArg)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(System.UInt32, System.String, Dropbox.Api.TeamCommon.TimeRange, Dropbox.Api.TeamLog.EventCategory, Dropbox.Api.TeamLog.EventTypeArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetEventsAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 111
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  syntax:
    content: public Task<GetTeamEventsResult> GetEventsAsync(uint limit = 1000U, string accountId = null, TimeRange time = null, EventCategory category = null, EventTypeArg eventType = null)
    parameters:
    - id: limit
      type: System.UInt32
    - id: accountId
      type: System.String
    - id: time
      type: Dropbox.Api.TeamCommon.TimeRange
    - id: category
      type: Dropbox.Api.TeamLog.EventCategory
    - id: eventType
      type: Dropbox.Api.TeamLog.EventTypeArg
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.TeamLog.GetTeamEventsResult}
    content.vb: Public Function GetEventsAsync(limit As UInteger = 1000UI, accountId As String = Nothing, time As TimeRange = Nothing, category As EventCategory = Nothing, eventType As EventTypeArg = Nothing) As Task(Of GetTeamEventsResult)
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents(System.UInt32,System.String,Dropbox.Api.TeamCommon.TimeRange,Dropbox.Api.TeamLog.EventCategory,Dropbox.Api.TeamLog.EventTypeArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents(System.UInt32,System.String,Dropbox.Api.TeamCommon.TimeRange,Dropbox.Api.TeamLog.EventCategory,Dropbox.Api.TeamLog.EventTypeArg,System.AsyncCallback,System.Object)
  id: BeginGetEvents(System.UInt32,System.String,Dropbox.Api.TeamCommon.TimeRange,Dropbox.Api.TeamLog.EventCategory,Dropbox.Api.TeamLog.EventTypeArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: BeginGetEvents(UInt32, String, TimeRange, EventCategory, EventTypeArg, AsyncCallback, Object)
  nameWithType: TeamLogTeamRoutes.BeginGetEvents(UInt32, String, TimeRange, EventCategory, EventTypeArg, AsyncCallback, Object)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents(System.UInt32, System.String, Dropbox.Api.TeamCommon.TimeRange, Dropbox.Api.TeamLog.EventCategory, Dropbox.Api.TeamLog.EventTypeArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetEvents
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 147
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  summary: "\n<p>Begins an asynchronous send to the get events route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetEvents(uint limit = 1000U, string accountId = null, TimeRange time = null, EventCategory category = null, EventTypeArg eventType = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: limit
      type: System.UInt32
      description: >-
        The maximal number of results to return per call. Note that

        some calls may not return <code data-dev-comment-type="paramref" class="paramref">limit</code> number of events, and may even

        return no events, even with `has_more` set to true. In this case, callers should

        fetch again using <xref href="Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(Dropbox.Api.TeamLog.GetTeamEventsContinueArg)" data-throw-if-not-resolved="false"></xref>.
    - id: accountId
      type: System.String
      description: >-
        Filter the events by account ID. Return only events with

        this account_id as either Actor, Context, or Participants.
    - id: time
      type: Dropbox.Api.TeamCommon.TimeRange
      description: Filter by time range.
    - id: category
      type: Dropbox.Api.TeamLog.EventCategory
      description: >-
        Filter the returned events to a single category. Note that

        category shouldn&apos;t be provided together with event_type.
    - id: eventType
      type: Dropbox.Api.TeamLog.EventTypeArg
      description: >-
        Filter the returned events to a single event type. Note

        that event_type shouldn&apos;t be provided together with category.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetEvents(limit As UInteger = 1000UI, accountId As String = Nothing, time As TimeRange = Nothing, category As EventCategory = Nothing, eventType As EventTypeArg = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEvents(System.IAsyncResult)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEvents(System.IAsyncResult)
  id: EndGetEvents(System.IAsyncResult)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: EndGetEvents(IAsyncResult)
  nameWithType: TeamLogTeamRoutes.EndGetEvents(IAsyncResult)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEvents(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetEvents
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 174
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get events route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public GetTeamEventsResult EndGetEvents(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.TeamLog.GetTeamEventsResult
      description: The response to the send request
    content.vb: Public Function EndGetEvents(asyncResult As IAsyncResult) As GetTeamEventsResult
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEvents*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.TeamLog.GetTeamEventsError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(Dropbox.Api.TeamLog.GetTeamEventsContinueArg)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(Dropbox.Api.TeamLog.GetTeamEventsContinueArg)
  id: GetEventsContinueAsync(Dropbox.Api.TeamLog.GetTeamEventsContinueArg)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: GetEventsContinueAsync(GetTeamEventsContinueArg)
  nameWithType: TeamLogTeamRoutes.GetEventsContinueAsync(GetTeamEventsContinueArg)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(Dropbox.Api.TeamLog.GetTeamEventsContinueArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetEventsContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 197
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(Dropbox.Api.TeamLog.GetTeamEventsArg)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all events.</p>\n<p>Permission : Team Auditing.</p>\n"
  example: []
  syntax:
    content: public Task<GetTeamEventsResult> GetEventsContinueAsync(GetTeamEventsContinueArg getTeamEventsContinueArg)
    parameters:
    - id: getTeamEventsContinueArg
      type: Dropbox.Api.TeamLog.GetTeamEventsContinueArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.TeamLog.GetTeamEventsResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetEventsContinueAsync(getTeamEventsContinueArg As GetTeamEventsContinueArg) As Task(Of GetTeamEventsResult)
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.TeamLog.GetTeamEventsContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue(Dropbox.Api.TeamLog.GetTeamEventsContinueArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue(Dropbox.Api.TeamLog.GetTeamEventsContinueArg,System.AsyncCallback,System.Object)
  id: BeginGetEventsContinue(Dropbox.Api.TeamLog.GetTeamEventsContinueArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: BeginGetEventsContinue(GetTeamEventsContinueArg, AsyncCallback, Object)
  nameWithType: TeamLogTeamRoutes.BeginGetEventsContinue(GetTeamEventsContinueArg, AsyncCallback, Object)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue(Dropbox.Api.TeamLog.GetTeamEventsContinueArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetEventsContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 211
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  summary: "\n<p>Begins an asynchronous send to the get events continue route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetEventsContinue(GetTeamEventsContinueArg getTeamEventsContinueArg, AsyncCallback callback, object state = null)
    parameters:
    - id: getTeamEventsContinueArg
      type: Dropbox.Api.TeamLog.GetTeamEventsContinueArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetEventsContinue(getTeamEventsContinueArg As GetTeamEventsContinueArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(System.String)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(System.String)
  id: GetEventsContinueAsync(System.String)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: GetEventsContinueAsync(String)
  nameWithType: TeamLogTeamRoutes.GetEventsContinueAsync(String)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetEventsContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 231
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(Dropbox.Api.TeamLog.GetTeamEventsArg)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all events.</p>\n<p>Permission : Team Auditing.</p>\n"
  example: []
  syntax:
    content: public Task<GetTeamEventsResult> GetEventsContinueAsync(string cursor)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        Indicates from what point to get the next set of

        events.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.TeamLog.GetTeamEventsResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetEventsContinueAsync(cursor As String) As Task(Of GetTeamEventsResult)
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.TeamLog.GetTeamEventsContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue(System.String,System.AsyncCallback,System.Object)
  id: BeginGetEventsContinue(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: BeginGetEventsContinue(String, AsyncCallback, Object)
  nameWithType: TeamLogTeamRoutes.BeginGetEventsContinue(String, AsyncCallback, Object)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetEventsContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 248
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  summary: "\n<p>Begins an asynchronous send to the get events continue route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetEventsContinue(string cursor, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        Indicates from what point to get the next set of

        events.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetEventsContinue(cursor As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEventsContinue(System.IAsyncResult)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEventsContinue(System.IAsyncResult)
  id: EndGetEventsContinue(System.IAsyncResult)
  parent: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes
  langs:
  - csharp
  - vb
  name: EndGetEventsContinue(IAsyncResult)
  nameWithType: TeamLogTeamRoutes.EndGetEventsContinue(IAsyncResult)
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEventsContinue(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetEventsContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/TeamLogTeamRoutes.cs
    startLine: 267
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get events continue route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public GetTeamEventsResult EndGetEventsContinue(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.TeamLog.GetTeamEventsResult
      description: The response to the send request
    content.vb: Public Function EndGetEventsContinue(asyncResult As IAsyncResult) As GetTeamEventsResult
  overload: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEventsContinue*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.TeamLog.GetTeamEventsContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Dropbox.Api.TeamLog
  commentId: N:Dropbox.Api.TeamLog
  name: Dropbox.Api.TeamLog
  nameWithType: Dropbox.Api.TeamLog
  fullName: Dropbox.Api.TeamLog
- uid: Dropbox.Api.TeamLog.Routes
  commentId: N:Dropbox.Api.TeamLog.Routes
  name: Dropbox.Api.TeamLog.Routes
  nameWithType: Dropbox.Api.TeamLog.Routes
  fullName: Dropbox.Api.TeamLog.Routes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync*
  commentId: Overload:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync
  name: GetEventsAsync
  nameWithType: TeamLogTeamRoutes.GetEventsAsync
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync
- uid: Dropbox.Api.TeamLog.GetTeamEventsArg
  commentId: T:Dropbox.Api.TeamLog.GetTeamEventsArg
  parent: Dropbox.Api.TeamLog
  name: GetTeamEventsArg
  nameWithType: GetTeamEventsArg
  fullName: Dropbox.Api.TeamLog.GetTeamEventsArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.TeamLog.GetTeamEventsResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.TeamLog.GetTeamEventsResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetTeamEventsResult>
  nameWithType: Task<GetTeamEventsResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.TeamLog.GetTeamEventsResult>
  nameWithType.vb: Task(Of GetTeamEventsResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.TeamLog.GetTeamEventsResult)
  name.vb: Task(Of GetTeamEventsResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.TeamLog.GetTeamEventsResult
    name: GetTeamEventsResult
    nameWithType: GetTeamEventsResult
    fullName: Dropbox.Api.TeamLog.GetTeamEventsResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.TeamLog.GetTeamEventsResult
    name: GetTeamEventsResult
    nameWithType: GetTeamEventsResult
    fullName: Dropbox.Api.TeamLog.GetTeamEventsResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents*
  commentId: Overload:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents
  name: BeginGetEvents
  nameWithType: TeamLogTeamRoutes.BeginGetEvents
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEvents
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Dropbox.Api.TeamCommon.TimeRange
  commentId: T:Dropbox.Api.TeamCommon.TimeRange
  parent: Dropbox.Api.TeamCommon
  name: TimeRange
  nameWithType: TimeRange
  fullName: Dropbox.Api.TeamCommon.TimeRange
- uid: Dropbox.Api.TeamLog.EventCategory
  commentId: T:Dropbox.Api.TeamLog.EventCategory
  parent: Dropbox.Api.TeamLog
  name: EventCategory
  nameWithType: EventCategory
  fullName: Dropbox.Api.TeamLog.EventCategory
- uid: Dropbox.Api.TeamLog.EventTypeArg
  commentId: T:Dropbox.Api.TeamLog.EventTypeArg
  parent: Dropbox.Api.TeamLog
  name: EventTypeArg
  nameWithType: EventTypeArg
  fullName: Dropbox.Api.TeamLog.EventTypeArg
- uid: Dropbox.Api.TeamCommon
  commentId: N:Dropbox.Api.TeamCommon
  name: Dropbox.Api.TeamCommon
  nameWithType: Dropbox.Api.TeamCommon
  fullName: Dropbox.Api.TeamCommon
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(Dropbox.Api.TeamLog.GetTeamEventsContinueArg)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync(Dropbox.Api.TeamLog.GetTeamEventsContinueArg)
  isExternal: true
- uid: Dropbox.Api.TeamLog.GetTeamEventsError
  commentId: T:Dropbox.Api.TeamLog.GetTeamEventsError
  parent: Dropbox.Api.TeamLog
  name: GetTeamEventsError
  nameWithType: GetTeamEventsError
  fullName: Dropbox.Api.TeamLog.GetTeamEventsError
- uid: Dropbox.Api.ApiException`1
  commentId: T:Dropbox.Api.ApiException`1
  name: ApiException<TError>
  nameWithType: ApiException<TError>
  fullName: Dropbox.Api.ApiException<TError>
  nameWithType.vb: ApiException(Of TError)
  fullName.vb: Dropbox.Api.ApiException(Of TError)
  name.vb: ApiException(Of TError)
  spec.csharp:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: <
    nameWithType: <
    fullName: <
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEvents*
  commentId: Overload:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEvents
  name: EndGetEvents
  nameWithType: TeamLogTeamRoutes.EndGetEvents
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEvents
- uid: Dropbox.Api.TeamLog.GetTeamEventsResult
  commentId: T:Dropbox.Api.TeamLog.GetTeamEventsResult
  parent: Dropbox.Api.TeamLog
  name: GetTeamEventsResult
  nameWithType: GetTeamEventsResult
  fullName: Dropbox.Api.TeamLog.GetTeamEventsResult
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(Dropbox.Api.TeamLog.GetTeamEventsArg)
  commentId: M:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsAsync(Dropbox.Api.TeamLog.GetTeamEventsArg)
  isExternal: true
- uid: Dropbox.Api.TeamLog.GetTeamEventsContinueError
  commentId: T:Dropbox.Api.TeamLog.GetTeamEventsContinueError
  parent: Dropbox.Api.TeamLog
  name: GetTeamEventsContinueError
  nameWithType: GetTeamEventsContinueError
  fullName: Dropbox.Api.TeamLog.GetTeamEventsContinueError
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync*
  commentId: Overload:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync
  name: GetEventsContinueAsync
  nameWithType: TeamLogTeamRoutes.GetEventsContinueAsync
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.GetEventsContinueAsync
- uid: Dropbox.Api.TeamLog.GetTeamEventsContinueArg
  commentId: T:Dropbox.Api.TeamLog.GetTeamEventsContinueArg
  parent: Dropbox.Api.TeamLog
  name: GetTeamEventsContinueArg
  nameWithType: GetTeamEventsContinueArg
  fullName: Dropbox.Api.TeamLog.GetTeamEventsContinueArg
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue*
  commentId: Overload:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue
  name: BeginGetEventsContinue
  nameWithType: TeamLogTeamRoutes.BeginGetEventsContinue
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.BeginGetEventsContinue
- uid: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEventsContinue*
  commentId: Overload:Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEventsContinue
  name: EndGetEventsContinue
  nameWithType: TeamLogTeamRoutes.EndGetEventsContinue
  fullName: Dropbox.Api.TeamLog.Routes.TeamLogTeamRoutes.EndGetEventsContinue
