### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.Sharing.RequestedVisibility
  commentId: T:Dropbox.Api.Sharing.RequestedVisibility
  id: RequestedVisibility
  parent: Dropbox.Api.Sharing
  children:
  - Dropbox.Api.Sharing.RequestedVisibility.#ctor
  - Dropbox.Api.Sharing.RequestedVisibility.AsPassword
  - Dropbox.Api.Sharing.RequestedVisibility.AsPublic
  - Dropbox.Api.Sharing.RequestedVisibility.AsTeamOnly
  - Dropbox.Api.Sharing.RequestedVisibility.IsPassword
  - Dropbox.Api.Sharing.RequestedVisibility.IsPublic
  - Dropbox.Api.Sharing.RequestedVisibility.IsTeamOnly
  langs:
  - csharp
  - vb
  name: RequestedVisibility
  nameWithType: RequestedVisibility
  fullName: Dropbox.Api.Sharing.RequestedVisibility
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: RequestedVisibility
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
    startLine: 19
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Sharing
  summary: "\n<p>The access permission that can be requested by the caller for the shared link.\nNote that the final resolved visibility of the shared link takes into account other\naspects, such as team and shared folder settings. Check the <xref href=\"Dropbox.Api.Sharing.ResolvedVisibility\" data-throw-if-not-resolved=\"false\"></xref> for more info on the possible resolved visibility values\nof shared links.</p>\n"
  example: []
  syntax:
    content: public class RequestedVisibility
    content.vb: Public Class RequestedVisibility
  inheritance:
  - System.Object
  derivedClasses:
  - Dropbox.Api.Sharing.RequestedVisibility.Password
  - Dropbox.Api.Sharing.RequestedVisibility.Public
  - Dropbox.Api.Sharing.RequestedVisibility.TeamOnly
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.Sharing.RequestedVisibility.#ctor
  commentId: M:Dropbox.Api.Sharing.RequestedVisibility.#ctor
  id: '#ctor'
  parent: Dropbox.Api.Sharing.RequestedVisibility
  langs:
  - csharp
  - vb
  name: RequestedVisibility()
  nameWithType: RequestedVisibility.RequestedVisibility()
  fullName: Dropbox.Api.Sharing.RequestedVisibility.RequestedVisibility()
  type: Constructor
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: .ctor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
    startLine: 37
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Sharing
  summary: "\n<p>Initializes a new instance of the <xref href=\"Dropbox.Api.Sharing.RequestedVisibility\" data-throw-if-not-resolved=\"false\"></xref>\nclass.</p>\n"
  example: []
  syntax:
    content: public RequestedVisibility()
    content.vb: Public Sub New
  overload: Dropbox.Api.Sharing.RequestedVisibility.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Sharing.RequestedVisibility.IsPublic
  commentId: P:Dropbox.Api.Sharing.RequestedVisibility.IsPublic
  id: IsPublic
  parent: Dropbox.Api.Sharing.RequestedVisibility
  langs:
  - csharp
  - vb
  name: IsPublic
  nameWithType: RequestedVisibility.IsPublic
  fullName: Dropbox.Api.Sharing.RequestedVisibility.IsPublic
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: IsPublic
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
    startLine: 44
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Sharing
  summary: "\n<p>Gets a value indicating whether this instance is Public</p>\n"
  example: []
  syntax:
    content: public bool IsPublic { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPublic As Boolean
  overload: Dropbox.Api.Sharing.RequestedVisibility.IsPublic*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Sharing.RequestedVisibility.AsPublic
  commentId: P:Dropbox.Api.Sharing.RequestedVisibility.AsPublic
  id: AsPublic
  parent: Dropbox.Api.Sharing.RequestedVisibility
  langs:
  - csharp
  - vb
  name: AsPublic
  nameWithType: RequestedVisibility.AsPublic
  fullName: Dropbox.Api.Sharing.RequestedVisibility.AsPublic
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AsPublic
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
    startLine: 55
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Sharing
  summary: "\n<p>Gets this instance as a Public, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public RequestedVisibility.Public AsPublic { get; }
    parameters: []
    return:
      type: Dropbox.Api.Sharing.RequestedVisibility.Public
    content.vb: Public ReadOnly Property AsPublic As RequestedVisibility.Public
  overload: Dropbox.Api.Sharing.RequestedVisibility.AsPublic*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Sharing.RequestedVisibility.IsTeamOnly
  commentId: P:Dropbox.Api.Sharing.RequestedVisibility.IsTeamOnly
  id: IsTeamOnly
  parent: Dropbox.Api.Sharing.RequestedVisibility
  langs:
  - csharp
  - vb
  name: IsTeamOnly
  nameWithType: RequestedVisibility.IsTeamOnly
  fullName: Dropbox.Api.Sharing.RequestedVisibility.IsTeamOnly
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: IsTeamOnly
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
    startLine: 66
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Sharing
  summary: "\n<p>Gets a value indicating whether this instance is TeamOnly</p>\n"
  example: []
  syntax:
    content: public bool IsTeamOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsTeamOnly As Boolean
  overload: Dropbox.Api.Sharing.RequestedVisibility.IsTeamOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Sharing.RequestedVisibility.AsTeamOnly
  commentId: P:Dropbox.Api.Sharing.RequestedVisibility.AsTeamOnly
  id: AsTeamOnly
  parent: Dropbox.Api.Sharing.RequestedVisibility
  langs:
  - csharp
  - vb
  name: AsTeamOnly
  nameWithType: RequestedVisibility.AsTeamOnly
  fullName: Dropbox.Api.Sharing.RequestedVisibility.AsTeamOnly
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AsTeamOnly
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
    startLine: 77
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Sharing
  summary: "\n<p>Gets this instance as a TeamOnly, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public RequestedVisibility.TeamOnly AsTeamOnly { get; }
    parameters: []
    return:
      type: Dropbox.Api.Sharing.RequestedVisibility.TeamOnly
    content.vb: Public ReadOnly Property AsTeamOnly As RequestedVisibility.TeamOnly
  overload: Dropbox.Api.Sharing.RequestedVisibility.AsTeamOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Sharing.RequestedVisibility.IsPassword
  commentId: P:Dropbox.Api.Sharing.RequestedVisibility.IsPassword
  id: IsPassword
  parent: Dropbox.Api.Sharing.RequestedVisibility
  langs:
  - csharp
  - vb
  name: IsPassword
  nameWithType: RequestedVisibility.IsPassword
  fullName: Dropbox.Api.Sharing.RequestedVisibility.IsPassword
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: IsPassword
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
    startLine: 88
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Sharing
  summary: "\n<p>Gets a value indicating whether this instance is Password</p>\n"
  example: []
  syntax:
    content: public bool IsPassword { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPassword As Boolean
  overload: Dropbox.Api.Sharing.RequestedVisibility.IsPassword*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.Sharing.RequestedVisibility.AsPassword
  commentId: P:Dropbox.Api.Sharing.RequestedVisibility.AsPassword
  id: AsPassword
  parent: Dropbox.Api.Sharing.RequestedVisibility
  langs:
  - csharp
  - vb
  name: AsPassword
  nameWithType: RequestedVisibility.AsPassword
  fullName: Dropbox.Api.Sharing.RequestedVisibility.AsPassword
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AsPassword
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Sharing/RequestedVisibility.cs
    startLine: 99
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Sharing
  summary: "\n<p>Gets this instance as a Password, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public RequestedVisibility.Password AsPassword { get; }
    parameters: []
    return:
      type: Dropbox.Api.Sharing.RequestedVisibility.Password
    content.vb: Public ReadOnly Property AsPassword As RequestedVisibility.Password
  overload: Dropbox.Api.Sharing.RequestedVisibility.AsPassword*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Dropbox.Api.Sharing.ResolvedVisibility
  commentId: T:Dropbox.Api.Sharing.ResolvedVisibility
  parent: Dropbox.Api.Sharing
  name: ResolvedVisibility
  nameWithType: ResolvedVisibility
  fullName: Dropbox.Api.Sharing.ResolvedVisibility
- uid: Dropbox.Api.Sharing
  commentId: N:Dropbox.Api.Sharing
  name: Dropbox.Api.Sharing
  nameWithType: Dropbox.Api.Sharing
  fullName: Dropbox.Api.Sharing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dropbox.Api.Sharing.RequestedVisibility
  commentId: T:Dropbox.Api.Sharing.RequestedVisibility
  parent: Dropbox.Api.Sharing
  name: RequestedVisibility
  nameWithType: RequestedVisibility
  fullName: Dropbox.Api.Sharing.RequestedVisibility
- uid: Dropbox.Api.Sharing.RequestedVisibility.#ctor*
  commentId: Overload:Dropbox.Api.Sharing.RequestedVisibility.#ctor
  name: RequestedVisibility
  nameWithType: RequestedVisibility.RequestedVisibility
  fullName: Dropbox.Api.Sharing.RequestedVisibility.RequestedVisibility
- uid: Dropbox.Api.Sharing.RequestedVisibility.IsPublic*
  commentId: Overload:Dropbox.Api.Sharing.RequestedVisibility.IsPublic
  name: IsPublic
  nameWithType: RequestedVisibility.IsPublic
  fullName: Dropbox.Api.Sharing.RequestedVisibility.IsPublic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Dropbox.Api.Sharing.RequestedVisibility.AsPublic*
  commentId: Overload:Dropbox.Api.Sharing.RequestedVisibility.AsPublic
  name: AsPublic
  nameWithType: RequestedVisibility.AsPublic
  fullName: Dropbox.Api.Sharing.RequestedVisibility.AsPublic
- uid: Dropbox.Api.Sharing.RequestedVisibility.Public
  commentId: T:Dropbox.Api.Sharing.RequestedVisibility.Public
  parent: Dropbox.Api.Sharing
  name: RequestedVisibility.Public
  nameWithType: RequestedVisibility.Public
  fullName: Dropbox.Api.Sharing.RequestedVisibility.Public
- uid: Dropbox.Api.Sharing.RequestedVisibility.IsTeamOnly*
  commentId: Overload:Dropbox.Api.Sharing.RequestedVisibility.IsTeamOnly
  name: IsTeamOnly
  nameWithType: RequestedVisibility.IsTeamOnly
  fullName: Dropbox.Api.Sharing.RequestedVisibility.IsTeamOnly
- uid: Dropbox.Api.Sharing.RequestedVisibility.AsTeamOnly*
  commentId: Overload:Dropbox.Api.Sharing.RequestedVisibility.AsTeamOnly
  name: AsTeamOnly
  nameWithType: RequestedVisibility.AsTeamOnly
  fullName: Dropbox.Api.Sharing.RequestedVisibility.AsTeamOnly
- uid: Dropbox.Api.Sharing.RequestedVisibility.TeamOnly
  commentId: T:Dropbox.Api.Sharing.RequestedVisibility.TeamOnly
  parent: Dropbox.Api.Sharing
  name: RequestedVisibility.TeamOnly
  nameWithType: RequestedVisibility.TeamOnly
  fullName: Dropbox.Api.Sharing.RequestedVisibility.TeamOnly
- uid: Dropbox.Api.Sharing.RequestedVisibility.IsPassword*
  commentId: Overload:Dropbox.Api.Sharing.RequestedVisibility.IsPassword
  name: IsPassword
  nameWithType: RequestedVisibility.IsPassword
  fullName: Dropbox.Api.Sharing.RequestedVisibility.IsPassword
- uid: Dropbox.Api.Sharing.RequestedVisibility.AsPassword*
  commentId: Overload:Dropbox.Api.Sharing.RequestedVisibility.AsPassword
  name: AsPassword
  nameWithType: RequestedVisibility.AsPassword
  fullName: Dropbox.Api.Sharing.RequestedVisibility.AsPassword
- uid: Dropbox.Api.Sharing.RequestedVisibility.Password
  commentId: T:Dropbox.Api.Sharing.RequestedVisibility.Password
  parent: Dropbox.Api.Sharing
  name: RequestedVisibility.Password
  nameWithType: RequestedVisibility.Password
  fullName: Dropbox.Api.Sharing.RequestedVisibility.Password
