### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes
  commentId: T:Dropbox.Api.Files.Routes.FilesUserRoutes
  id: FilesUserRoutes
  parent: Dropbox.Api.Files.Routes
  children:
  - Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(Dropbox.Api.Files.UploadArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(System.String,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(Dropbox.Api.Files.DownloadArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(Dropbox.Api.Files.ExportArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(Dropbox.Api.Files.PreviewArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo,System.Double,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(System.String,System.UInt64,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList(System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(Dropbox.Api.Files.RestoreArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(Dropbox.Api.Files.SearchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(Dropbox.Api.Files.SearchV2Arg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd(Dropbox.Api.Files.AddTagArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet(Dropbox.Api.Files.GetTagsArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet(System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove(Dropbox.Api.Files.RemoveTagArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(Dropbox.Api.Files.UploadArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(System.String,System.UInt64,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch(Dropbox.Api.Files.UploadSessionStartBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch(System.UInt64,Dropbox.Api.Files.UploadSessionType,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(Dropbox.Api.Files.RelocationArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(Dropbox.Api.Files.RelocationArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(System.String,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(System.String,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(Dropbox.Api.Files.DeleteArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(Dropbox.Api.Files.DownloadArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsAdd(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsGet(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsRemove(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStartBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(Dropbox.Api.Files.ExportArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo,System.Double)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(System.String,System.UInt64)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(Dropbox.Api.Files.RelocationArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(Dropbox.Api.Files.RelocationArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(Dropbox.Api.Files.RestoreArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(Dropbox.Api.Files.SearchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync(Dropbox.Api.Files.AddTagArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync(Dropbox.Api.Files.GetTagsArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync(System.Collections.Generic.IEnumerable{System.String})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync(Dropbox.Api.Files.RemoveTagArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(System.String,System.UInt64,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.String,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.String,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.String,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync(Dropbox.Api.Files.UploadSessionStartBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync(System.UInt64,Dropbox.Api.Files.UploadSessionType)
  langs:
  - csharp
  - vb
  name: FilesUserRoutes
  nameWithType: FilesUserRoutes
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: FilesUserRoutes
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 15
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The routes for the <xref href=\"Dropbox.Api.Files\" data-throw-if-not-resolved=\"false\"></xref> namespace</p>\n"
  example: []
  syntax:
    content: public class FilesUserRoutes
    content.vb: Public Class FilesUserRoutes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  id: AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: AlphaGetMetadataAsync(AlphaGetMetadataArg)
  nameWithType: FilesUserRoutes.AlphaGetMetadataAsync(AlphaGetMetadataArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AlphaGetMetadataAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 43
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the metadata for a file or folder. This is an alpha endpoint\ncompatible with the properties API.</p>\n<p>Note: Metadata for the root folder is unsupported.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use GetMetadataAsync instead.")]

      public Task<Metadata> AlphaGetMetadataAsync(AlphaGetMetadataArg alphaGetMetadataArg)
    parameters:
    - id: alphaGetMetadataArg
      type: Dropbox.Api.Files.AlphaGetMetadataArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use GetMetadataAsync instead.")>

      Public Function AlphaGetMetadataAsync(alphaGetMetadataArg As AlphaGetMetadataArg) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.AlphaGetMetadataError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use GetMetadataAsync instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg,System.AsyncCallback,System.Object)
  id: BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginAlphaGetMetadata(AlphaGetMetadataArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginAlphaGetMetadata(AlphaGetMetadataArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginAlphaGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 58
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the alpha get metadata route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginGetMetadata instead.")]

      public IAsyncResult BeginAlphaGetMetadata(AlphaGetMetadataArg alphaGetMetadataArg, AsyncCallback callback, object state = null)
    parameters:
    - id: alphaGetMetadataArg
      type: Dropbox.Api.Files.AlphaGetMetadataArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginGetMetadata instead.")>

      Public Function BeginAlphaGetMetadata(alphaGetMetadataArg As AlphaGetMetadataArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginGetMetadata instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String})
  id: AlphaGetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: AlphaGetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase, IEnumerable<String>)
  nameWithType: FilesUserRoutes.AlphaGetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase, IEnumerable<String>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AlphaGetMetadataAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 92
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the metadata for a file or folder. This is an alpha endpoint\ncompatible with the properties API.</p>\n<p>Note: Metadata for the root folder is unsupported.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use GetMetadataAsync instead.")]

      public Task<Metadata> AlphaGetMetadataAsync(string path, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, TemplateFilterBase includePropertyGroups = null, IEnumerable<string> includePropertyTemplates = null)
    parameters:
    - id: path
      type: System.String
      description: The path of a file or folder on Dropbox.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and

        video.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.DeletedMetadata" data-throw-if-not-resolved="false"></xref> will be

        returned for deleted file or folder, otherwise <xref href="Dropbox.Api.Files.LookupError.NotFound" data-throw-if-not-resolved="false"></xref> will be returned.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includePropertyTemplates
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set for files with

        custom properties.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use GetMetadataAsync instead.")>

      Public Function AlphaGetMetadataAsync(path As String, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includePropertyGroups As TemplateFilterBase = Nothing, includePropertyTemplates As IEnumerable(Of String) = Nothing) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.AlphaGetMetadataError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use GetMetadataAsync instead.
  nameWithType.vb: FilesUserRoutes.AlphaGetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: AlphaGetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase, IEnumerable(Of String))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  id: BeginAlphaGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginAlphaGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, IEnumerable<String>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginAlphaGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, IEnumerable<String>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.Collections.Generic.IEnumerable<System.String>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginAlphaGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 134
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the alpha get metadata route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginGetMetadata instead.")]

      public IAsyncResult BeginAlphaGetMetadata(string path, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, TemplateFilterBase includePropertyGroups = null, IEnumerable<string> includePropertyTemplates = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of a file or folder on Dropbox.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and

        video.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.DeletedMetadata" data-throw-if-not-resolved="false"></xref> will be

        returned for deleted file or folder, otherwise <xref href="Dropbox.Api.Files.LookupError.NotFound" data-throw-if-not-resolved="false"></xref> will be returned.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includePropertyTemplates
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set for files with

        custom properties.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginGetMetadata instead.")>

      Public Function BeginAlphaGetMetadata(path As String, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includePropertyGroups As TemplateFilterBase = Nothing, includePropertyTemplates As IEnumerable(Of String) = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginGetMetadata instead.
  nameWithType.vb: FilesUserRoutes.BeginAlphaGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, IEnumerable(Of String), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.Collections.Generic.IEnumerable(Of System.String), System.AsyncCallback, System.Object)
  name.vb: BeginAlphaGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, IEnumerable(Of String), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata(System.IAsyncResult)
  id: EndAlphaGetMetadata(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndAlphaGetMetadata(IAsyncResult)
  nameWithType: FilesUserRoutes.EndAlphaGetMetadata(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndAlphaGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 164
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the alpha get metadata route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndGetMetadata instead.")]

      public Metadata EndAlphaGetMetadata(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndGetMetadata instead.")>

      Public Function EndAlphaGetMetadata(asyncResult As IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.AlphaGetMetadataError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndGetMetadata instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  id: AlphaUploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: AlphaUploadAsync(UploadArg, Stream)
  nameWithType: FilesUserRoutes.AlphaUploadAsync(UploadArg, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(Dropbox.Api.Files.UploadArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AlphaUploadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 189
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a new file with the contents provided in the request. Note that the\nbehavior of this alpha endpoint is unstable and subject to change.</p>\n<p>Do not use this to upload a file larger than 150 MB. Instead, create an\nupload session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use UploadAsync instead.")]

      public Task<FileMetadata> AlphaUploadAsync(UploadArg uploadArg, Stream body)
    parameters:
    - id: uploadArg
      type: Dropbox.Api.Files.UploadArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use UploadAsync instead.")>

      Public Function AlphaUploadAsync(uploadArg As UploadArg, body As Stream) As Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use UploadAsync instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(Dropbox.Api.Files.UploadArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(Dropbox.Api.Files.UploadArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginAlphaUpload(Dropbox.Api.Files.UploadArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginAlphaUpload(UploadArg, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginAlphaUpload(UploadArg, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(Dropbox.Api.Files.UploadArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginAlphaUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 205
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the alpha upload route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginUpload instead.")]

      public IAsyncResult BeginAlphaUpload(UploadArg uploadArg, Stream body, AsyncCallback callback, object state = null)
    parameters:
    - id: uploadArg
      type: Dropbox.Api.Files.UploadArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginUpload instead.")>

      Public Function BeginAlphaUpload(uploadArg As UploadArg, body As Stream, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginUpload instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream)
  id: AlphaUploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: AlphaUploadAsync(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean, String, Stream)
  nameWithType: FilesUserRoutes.AlphaUploadAsync(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean, String, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable<System.DateTime>, System.Boolean, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.Boolean, System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AlphaUploadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 251
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a new file with the contents provided in the request. Note that the\nbehavior of this alpha endpoint is unstable and subject to change.</p>\n<p>Do not use this to upload a file larger than 150 MB. Instead, create an\nupload session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use UploadAsync instead.")]

      public Task<FileMetadata> AlphaUploadAsync(string path, WriteMode mode = null, bool autorename = false, DateTime? clientModified = null, bool mute = false, IEnumerable<PropertyGroup> propertyGroups = null, bool strictConflict = false, string contentHash = null, Stream body = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to save the file.
    - id: mode
      type: Dropbox.Api.Files.WriteMode
      description: Selects what to do if the file already exists.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, as determined by <code data-dev-comment-type="paramref" class="paramref">mode</code>, have the Dropbox server try to autorename the file to avoid

        conflict.
    - id: clientModified
      type: System.Nullable{System.DateTime}
      description: >-
        The value to store as the <code data-dev-comment-type="paramref" class="paramref">clientModified</code> timestamp. Dropbox automatically records the time at which

        the file was written to the Dropbox servers. It can also record an additional

        timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of

        when the file was actually created or modified.
    - id: mute
      type: System.Boolean
      description: >-
        Normally, users are made aware of any file modifications in

        their Dropbox account via notifications in the client software. If <code>true</code>,

        this tells the clients that this modification shouldn&apos;t result in a user

        notification.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: List of custom properties to add to file.
    - id: strictConflict
      type: System.Boolean
      description: >-
        Be more strict about how each <xref href="Dropbox.Api.Files.WriteMode" data-throw-if-not-resolved="false"></xref>

        detects conflict. For example, always return a conflict error when <code data-dev-comment-type="paramref" class="paramref">mode</code> = <xref href="Dropbox.Api.Files.WriteMode.Update" data-throw-if-not-resolved="false"></xref> and the given

        &quot;rev&quot; doesn&apos;t match the existing file&apos;s &quot;rev&quot;, even if the existing file has been

        deleted. This also forces a conflict even when the target path refers to a file

        with identical contents.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use UploadAsync instead.")>

      Public Function AlphaUploadAsync(path As String, mode As WriteMode = Nothing, autorename As Boolean = False, clientModified As Date? = Nothing, mute As Boolean = False, propertyGroups As IEnumerable(Of PropertyGroup) = Nothing, strictConflict As Boolean = False, contentHash As String = Nothing, body As Stream = Nothing) As Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use UploadAsync instead.
  nameWithType.vb: FilesUserRoutes.AlphaUploadAsync(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean, String, Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable(Of System.DateTime), System.Boolean, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.Boolean, System.String, System.IO.Stream)
  name.vb: AlphaUploadAsync(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean, String, Stream)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginAlphaUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginAlphaUpload(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean, String, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginAlphaUpload(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean, String, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable<System.DateTime>, System.Boolean, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.Boolean, System.String, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginAlphaUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 309
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the alpha upload route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginUpload instead.")]

      public IAsyncResult BeginAlphaUpload(string path, WriteMode mode = null, bool autorename = false, DateTime? clientModified = null, bool mute = false, IEnumerable<PropertyGroup> propertyGroups = null, bool strictConflict = false, string contentHash = null, Stream body = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to save the file.
    - id: mode
      type: Dropbox.Api.Files.WriteMode
      description: Selects what to do if the file already exists.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, as determined by <code data-dev-comment-type="paramref" class="paramref">mode</code>, have the Dropbox server try to autorename the file to avoid

        conflict.
    - id: clientModified
      type: System.Nullable{System.DateTime}
      description: >-
        The value to store as the <code data-dev-comment-type="paramref" class="paramref">clientModified</code> timestamp. Dropbox automatically records the time at which

        the file was written to the Dropbox servers. It can also record an additional

        timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of

        when the file was actually created or modified.
    - id: mute
      type: System.Boolean
      description: >-
        Normally, users are made aware of any file modifications in

        their Dropbox account via notifications in the client software. If <code>true</code>,

        this tells the clients that this modification shouldn&apos;t result in a user

        notification.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: List of custom properties to add to file.
    - id: strictConflict
      type: System.Boolean
      description: >-
        Be more strict about how each <xref href="Dropbox.Api.Files.WriteMode" data-throw-if-not-resolved="false"></xref>

        detects conflict. For example, always return a conflict error when <code data-dev-comment-type="paramref" class="paramref">mode</code> = <xref href="Dropbox.Api.Files.WriteMode.Update" data-throw-if-not-resolved="false"></xref> and the given

        &quot;rev&quot; doesn&apos;t match the existing file&apos;s &quot;rev&quot;, even if the existing file has been

        deleted. This also forces a conflict even when the target path refers to a file

        with identical contents.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginUpload instead.")>

      Public Function BeginAlphaUpload(path As String, mode As WriteMode = Nothing, autorename As Boolean = False, clientModified As Date? = Nothing, mute As Boolean = False, propertyGroups As IEnumerable(Of PropertyGroup) = Nothing, strictConflict As Boolean = False, contentHash As String = Nothing, body As Stream = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginUpload instead.
  nameWithType.vb: FilesUserRoutes.BeginAlphaUpload(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean, String, Stream, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable(Of System.DateTime), System.Boolean, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.Boolean, System.String, System.IO.Stream, System.AsyncCallback, System.Object)
  name.vb: BeginAlphaUpload(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean, String, Stream, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload(System.IAsyncResult)
  id: EndAlphaUpload(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndAlphaUpload(IAsyncResult)
  nameWithType: FilesUserRoutes.EndAlphaUpload(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndAlphaUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 343
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the alpha upload route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndUpload instead.")]

      public FileMetadata EndAlphaUpload(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FileMetadata
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndUpload instead.")>

      Public Function EndAlphaUpload(asyncResult As IAsyncResult) As FileMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndUpload instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(Dropbox.Api.Files.RelocationArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(Dropbox.Api.Files.RelocationArg)
  id: CopyV2Async(Dropbox.Api.Files.RelocationArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyV2Async(RelocationArg)
  nameWithType: FilesUserRoutes.CopyV2Async(RelocationArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(Dropbox.Api.Files.RelocationArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 365
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be copied.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationResult> CopyV2Async(RelocationArg relocationArg)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyV2Async(relocationArg As RelocationArg) As Task(Of RelocationResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  id: BeginCopyV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyV2(RelocationArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyV2(RelocationArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(Dropbox.Api.Files.RelocationArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 379
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyV2(RelocationArg relocationArg, AsyncCallback callback, object state = null)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyV2(relocationArg As RelocationArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: CopyV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyV2Async(String, String, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.CopyV2Async(String, String, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(System.String, System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 403
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be copied.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationResult> CopyV2Async(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyV2Async(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As Task(Of RelocationResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCopyV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyV2(String, String, Boolean, Boolean, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyV2(String, String, Boolean, Boolean, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(System.String, System.String, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 434
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyV2(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyV2(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2(System.IAsyncResult)
  id: EndCopyV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCopyV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 460
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy route to complete</p>\n"
  example: []
  syntax:
    content: public RelocationResult EndCopyV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationResult
      description: The response to the send request
    content.vb: Public Function EndCopyV2(asyncResult As IAsyncResult) As RelocationResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(Dropbox.Api.Files.RelocationArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(Dropbox.Api.Files.RelocationArg)
  id: CopyAsync(Dropbox.Api.Files.RelocationArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyAsync(RelocationArg)
  nameWithType: FilesUserRoutes.CopyAsync(RelocationArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(Dropbox.Api.Files.RelocationArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 481
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be copied.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use CopyV2Async instead.")]

      public Task<Metadata> CopyAsync(RelocationArg relocationArg)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use CopyV2Async instead.")>

      Public Function CopyAsync(relocationArg As RelocationArg) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use CopyV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  id: BeginCopy(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopy(RelocationArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopy(RelocationArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(Dropbox.Api.Files.RelocationArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopy
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 496
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginCopyV2 instead.")]

      public IAsyncResult BeginCopy(RelocationArg relocationArg, AsyncCallback callback, object state = null)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginCopyV2 instead.")>

      Public Function BeginCopy(relocationArg As RelocationArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginCopyV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: CopyAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyAsync(String, String, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.CopyAsync(String, String, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(System.String, System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 521
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be copied.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use CopyV2Async instead.")]

      public Task<Metadata> CopyAsync(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use CopyV2Async instead.")>

      Public Function CopyAsync(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use CopyV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCopy(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopy(String, String, Boolean, Boolean, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopy(String, String, Boolean, Boolean, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(System.String, System.String, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopy
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 553
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginCopyV2 instead.")]

      public IAsyncResult BeginCopy(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginCopyV2 instead.")>

      Public Function BeginCopy(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginCopyV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy(System.IAsyncResult)
  id: EndCopy(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopy(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopy(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCopy
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 580
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy route to complete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndCopyV2 instead.")]

      public Metadata EndCopy(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndCopyV2 instead.")>

      Public Function EndCopy(asyncResult As IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndCopyV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  id: CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchV2Async(RelocationBatchArgBase)
  nameWithType: FilesUserRoutes.CopyBatchV2Async(RelocationBatchArgBase)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 608
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will replace <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. The main\ndifference is this route will return status for each entry, while <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref> raises failure if\nany entry fails.</p>\n<p>This route will either finish synchronously, or return a job ID and do the\nasync copy job in background. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationBatchV2Launch> CopyBatchV2Async(RelocationBatchArgBase relocationBatchArgBase)
    parameters:
    - id: relocationBatchArgBase
      type: Dropbox.Api.Files.RelocationBatchArgBase
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchV2Async(relocationBatchArgBase As RelocationBatchArgBase) As Task(Of RelocationBatchV2Launch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase,System.AsyncCallback,System.Object)
  id: BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchV2(RelocationBatchArgBase, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchV2(RelocationBatchArgBase, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 622
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyBatchV2(RelocationBatchArgBase relocationBatchArgBase, AsyncCallback callback, object state = null)
    parameters:
    - id: relocationBatchArgBase
      type: Dropbox.Api.Files.RelocationBatchArgBase
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchV2(relocationBatchArgBase As RelocationBatchArgBase, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean)
  id: CopyBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchV2Async(IEnumerable<RelocationPath>, Boolean)
  nameWithType: FilesUserRoutes.CopyBatchV2Async(IEnumerable<RelocationPath>, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 648
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will replace <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. The main\ndifference is this route will return status for each entry, while <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref> raises failure if\nany entry fails.</p>\n<p>This route will either finish synchronously, or return a job ID and do the\nasync copy job in background. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationBatchV2Launch> CopyBatchV2Async(IEnumerable<RelocationPath> entries, bool autorename = false)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchV2Async(entries As IEnumerable(Of RelocationPath), autorename As Boolean = False) As Task(Of RelocationBatchV2Launch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async*
  nameWithType.vb: FilesUserRoutes.CopyBatchV2Async(IEnumerable(Of RelocationPath), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean)
  name.vb: CopyBatchV2Async(IEnumerable(Of RelocationPath), Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCopyBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchV2(IEnumerable<RelocationPath>, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchV2(IEnumerable<RelocationPath>, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 669
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyBatchV2(IEnumerable<RelocationPath> entries, bool autorename = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchV2(entries As IEnumerable(Of RelocationPath), autorename As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2*
  nameWithType.vb: FilesUserRoutes.BeginCopyBatchV2(IEnumerable(Of RelocationPath), Boolean, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginCopyBatchV2(IEnumerable(Of RelocationPath), Boolean, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2(System.IAsyncResult)
  id: EndCopyBatchV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyBatchV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyBatchV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCopyBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 687
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchV2Launch EndCopyBatchV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchV2Launch
      description: The response to the send request
    content.vb: Public Function EndCopyBatchV2(asyncResult As IAsyncResult) As RelocationBatchV2Launch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  id: CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchAsync(RelocationBatchArg)
  nameWithType: FilesUserRoutes.CopyBatchAsync(RelocationBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 709
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will return job ID immediately and do the async copy job in\nbackground. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the\njob status.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use CopyBatchV2Async instead.")]

      public Task<RelocationBatchLaunch> CopyBatchAsync(RelocationBatchArg relocationBatchArg)
    parameters:
    - id: relocationBatchArg
      type: Dropbox.Api.Files.RelocationBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use CopyBatchV2Async instead.")>

      Public Function CopyBatchAsync(relocationBatchArg As RelocationBatchArg) As Task(Of RelocationBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use CopyBatchV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  id: BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatch(RelocationBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatch(RelocationBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 724
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginCopyBatchV2 instead.")]

      public IAsyncResult BeginCopyBatch(RelocationBatchArg relocationBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: relocationBatchArg
      type: Dropbox.Api.Files.RelocationBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginCopyBatchV2 instead.")>

      Public Function BeginCopyBatch(relocationBatchArg As RelocationBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginCopyBatchV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  id: CopyBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchAsync(IEnumerable<RelocationPath>, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.CopyBatchAsync(IEnumerable<RelocationPath>, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 750
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will return job ID immediately and do the async copy job in\nbackground. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the\njob status.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use CopyBatchV2Async instead.")]

      public Task<RelocationBatchLaunch> CopyBatchAsync(IEnumerable<RelocationPath> entries, bool autorename = false, bool allowSharedFolder = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use CopyBatchV2Async instead.")>

      Public Function CopyBatchAsync(entries As IEnumerable(Of RelocationPath), autorename As Boolean = False, allowSharedFolder As Boolean = False, allowOwnershipTransfer As Boolean = False) As Task(Of RelocationBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use CopyBatchV2Async instead.
  nameWithType.vb: FilesUserRoutes.CopyBatchAsync(IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.Boolean)
  name.vb: CopyBatchAsync(IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCopyBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatch(IEnumerable<RelocationPath>, Boolean, Boolean, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatch(IEnumerable<RelocationPath>, Boolean, Boolean, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 780
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginCopyBatchV2 instead.")]

      public IAsyncResult BeginCopyBatch(IEnumerable<RelocationPath> entries, bool autorename = false, bool allowSharedFolder = false, bool allowOwnershipTransfer = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginCopyBatchV2 instead.")>

      Public Function BeginCopyBatch(entries As IEnumerable(Of RelocationPath), autorename As Boolean = False, allowSharedFolder As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginCopyBatchV2 instead.
  nameWithType.vb: FilesUserRoutes.BeginCopyBatch(IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginCopyBatch(IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch(System.IAsyncResult)
  id: EndCopyBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCopyBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 803
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndCopyBatchV2 instead.")]

      public RelocationBatchLaunch EndCopyBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchLaunch
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndCopyBatchV2 instead.")>

      Public Function EndCopyBatch(asyncResult As IAsyncResult) As RelocationBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndCopyBatchV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  id: CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchCheckV2Async(PollArg)
  nameWithType: FilesUserRoutes.CopyBatchCheckV2Async(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyBatchCheckV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 826
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)\" data-throw-if-not-resolved=\"false\"></xref>. It returns\nlist of results for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationBatchV2JobStatus> CopyBatchCheckV2Async(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchCheckV2Async(pollArg As PollArg) As Task(Of RelocationBatchV2JobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchCheckV2(PollArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchCheckV2(PollArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 840
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch check route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyBatchCheckV2(PollArg pollArg, AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchCheckV2(pollArg As PollArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(System.String)
  id: CopyBatchCheckV2Async(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchCheckV2Async(String)
  nameWithType: FilesUserRoutes.CopyBatchCheckV2Async(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyBatchCheckV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 859
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)\" data-throw-if-not-resolved=\"false\"></xref>. It returns\nlist of results for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationBatchV2JobStatus> CopyBatchCheckV2Async(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchCheckV2Async(asyncJobId As String) As Task(Of RelocationBatchV2JobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  id: BeginCopyBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchCheckV2(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchCheckV2(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 876
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch check route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyBatchCheckV2(string asyncJobId, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchCheckV2(asyncJobId As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2(System.IAsyncResult)
  id: EndCopyBatchCheckV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyBatchCheckV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyBatchCheckV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCopyBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 895
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchV2JobStatus EndCopyBatchCheckV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchV2JobStatus
      description: The response to the send request
    content.vb: Public Function EndCopyBatchCheckV2(asyncResult As IAsyncResult) As RelocationBatchV2JobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.CopyBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 917
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of results for each entry.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use CopyBatchCheckV2Async instead.")]

      public Task<RelocationBatchJobStatus> CopyBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use CopyBatchCheckV2Async instead.")>

      Public Function CopyBatchCheckAsync(pollArg As PollArg) As Task(Of RelocationBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use CopyBatchCheckV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginCopyBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchCheck(PollArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchCheck(PollArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 932
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch check route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginCopyBatchCheckV2 instead.")]

      public IAsyncResult BeginCopyBatchCheck(PollArg pollArg, AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginCopyBatchCheckV2 instead.")>

      Public Function BeginCopyBatchCheck(pollArg As PollArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginCopyBatchCheckV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(System.String)
  id: CopyBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.CopyBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 952
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of results for each entry.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use CopyBatchCheckV2Async instead.")]

      public Task<RelocationBatchJobStatus> CopyBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use CopyBatchCheckV2Async instead.")>

      Public Function CopyBatchCheckAsync(asyncJobId As String) As Task(Of RelocationBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use CopyBatchCheckV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginCopyBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchCheck(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchCheck(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 970
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch check route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginCopyBatchCheckV2 instead.")]

      public IAsyncResult BeginCopyBatchCheck(string asyncJobId, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginCopyBatchCheckV2 instead.")>

      Public Function BeginCopyBatchCheck(asyncJobId As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginCopyBatchCheckV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck(System.IAsyncResult)
  id: EndCopyBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyBatchCheck(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyBatchCheck(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCopyBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 990
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndCopyBatchCheckV2 instead.")]

      public RelocationBatchJobStatus EndCopyBatchCheck(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchJobStatus
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndCopyBatchCheckV2 instead.")>

      Public Function EndCopyBatchCheck(asyncResult As IAsyncResult) As RelocationBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndCopyBatchCheckV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  id: CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyReferenceGetAsync(GetCopyReferenceArg)
  nameWithType: FilesUserRoutes.CopyReferenceGetAsync(GetCopyReferenceArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyReferenceGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1013
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a copy reference to a file or folder. This reference string can be used\nto save that file or folder to another user&apos;s Dropbox by passing it to <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task<GetCopyReferenceResult> CopyReferenceGetAsync(GetCopyReferenceArg getCopyReferenceArg)
    parameters:
    - id: getCopyReferenceArg
      type: Dropbox.Api.Files.GetCopyReferenceArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetCopyReferenceResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyReferenceGetAsync(getCopyReferenceArg As GetCopyReferenceArg) As Task(Of GetCopyReferenceResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg,System.AsyncCallback,System.Object)
  id: BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyReferenceGet(GetCopyReferenceArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyReferenceGet(GetCopyReferenceArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyReferenceGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1027
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy reference get route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyReferenceGet(GetCopyReferenceArg getCopyReferenceArg, AsyncCallback callback, object state = null)
    parameters:
    - id: getCopyReferenceArg
      type: Dropbox.Api.Files.GetCopyReferenceArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyReferenceGet(getCopyReferenceArg As GetCopyReferenceArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(System.String)
  id: CopyReferenceGetAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyReferenceGetAsync(String)
  nameWithType: FilesUserRoutes.CopyReferenceGetAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyReferenceGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1046
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a copy reference to a file or folder. This reference string can be used\nto save that file or folder to another user&apos;s Dropbox by passing it to <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task<GetCopyReferenceResult> CopyReferenceGetAsync(string path)
    parameters:
    - id: path
      type: System.String
      description: >-
        The path to the file or folder you want to get a copy reference

        to.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetCopyReferenceResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyReferenceGetAsync(path As String) As Task(Of GetCopyReferenceResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(System.String,System.AsyncCallback,System.Object)
  id: BeginCopyReferenceGet(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyReferenceGet(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyReferenceGet(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyReferenceGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1063
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy reference get route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyReferenceGet(string path, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        The path to the file or folder you want to get a copy reference

        to.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyReferenceGet(path As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet(System.IAsyncResult)
  id: EndCopyReferenceGet(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyReferenceGet(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyReferenceGet(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCopyReferenceGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1082
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy reference get route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public GetCopyReferenceResult EndCopyReferenceGet(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.GetCopyReferenceResult
      description: The response to the send request
    content.vb: Public Function EndCopyReferenceGet(asyncResult As IAsyncResult) As GetCopyReferenceResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  id: CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyReferenceSaveAsync(SaveCopyReferenceArg)
  nameWithType: FilesUserRoutes.CopyReferenceSaveAsync(SaveCopyReferenceArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyReferenceSaveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1104
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Save a copy reference returned by <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)\" data-throw-if-not-resolved=\"false\"></xref> to the\nuser&apos;s Dropbox.</p>\n"
  example: []
  syntax:
    content: public Task<SaveCopyReferenceResult> CopyReferenceSaveAsync(SaveCopyReferenceArg saveCopyReferenceArg)
    parameters:
    - id: saveCopyReferenceArg
      type: Dropbox.Api.Files.SaveCopyReferenceArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveCopyReferenceResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyReferenceSaveAsync(saveCopyReferenceArg As SaveCopyReferenceArg) As Task(Of SaveCopyReferenceResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg,System.AsyncCallback,System.Object)
  id: BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyReferenceSave(SaveCopyReferenceArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyReferenceSave(SaveCopyReferenceArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyReferenceSave
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1118
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy reference save route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyReferenceSave(SaveCopyReferenceArg saveCopyReferenceArg, AsyncCallback callback, object state = null)
    parameters:
    - id: saveCopyReferenceArg
      type: Dropbox.Api.Files.SaveCopyReferenceArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyReferenceSave(saveCopyReferenceArg As SaveCopyReferenceArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(System.String,System.String)
  id: CopyReferenceSaveAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyReferenceSaveAsync(String, String)
  nameWithType: FilesUserRoutes.CopyReferenceSaveAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CopyReferenceSaveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1138
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Save a copy reference returned by <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)\" data-throw-if-not-resolved=\"false\"></xref> to the\nuser&apos;s Dropbox.</p>\n"
  example: []
  syntax:
    content: public Task<SaveCopyReferenceResult> CopyReferenceSaveAsync(string copyReference, string path)
    parameters:
    - id: copyReference
      type: System.String
      description: A copy reference returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)" data-throw-if-not-resolved="false"></xref>.
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveCopyReferenceResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyReferenceSaveAsync(copyReference As String, path As String) As Task(Of SaveCopyReferenceResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginCopyReferenceSave(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyReferenceSave(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyReferenceSave(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCopyReferenceSave
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1158
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy reference save route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCopyReferenceSave(string copyReference, string path, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: copyReference
      type: System.String
      description: A copy reference returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)" data-throw-if-not-resolved="false"></xref>.
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyReferenceSave(copyReference As String, path As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave(System.IAsyncResult)
  id: EndCopyReferenceSave(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyReferenceSave(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyReferenceSave(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCopyReferenceSave
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1179
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy reference save route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public SaveCopyReferenceResult EndCopyReferenceSave(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SaveCopyReferenceResult
      description: The response to the send request
    content.vb: Public Function EndCopyReferenceSave(asyncResult As IAsyncResult) As SaveCopyReferenceResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  id: CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderV2Async(CreateFolderArg)
  nameWithType: FilesUserRoutes.CreateFolderV2Async(CreateFolderArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CreateFolderV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1199
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a folder at a given path.</p>\n"
  example: []
  syntax:
    content: public Task<CreateFolderResult> CreateFolderV2Async(CreateFolderArg createFolderArg)
    parameters:
    - id: createFolderArg
      type: Dropbox.Api.Files.CreateFolderArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderV2Async(createFolderArg As CreateFolderArg) As Task(Of CreateFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  id: BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderV2(CreateFolderArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderV2(CreateFolderArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCreateFolderV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1213
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCreateFolderV2(CreateFolderArg createFolderArg, AsyncCallback callback, object state = null)
    parameters:
    - id: createFolderArg
      type: Dropbox.Api.Files.CreateFolderArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderV2(createFolderArg As CreateFolderArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(System.String,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(System.String,System.Boolean)
  id: CreateFolderV2Async(System.String,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderV2Async(String, Boolean)
  nameWithType: FilesUserRoutes.CreateFolderV2Async(String, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CreateFolderV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1231
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a folder at a given path.</p>\n"
  example: []
  syntax:
    content: public Task<CreateFolderResult> CreateFolderV2Async(string path, bool autorename = false)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to create.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderV2Async(path As String, autorename As Boolean = False) As Task(Of CreateFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(System.String,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(System.String,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCreateFolderV2(System.String,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderV2(String, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderV2(String, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(System.String, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCreateFolderV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1251
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCreateFolderV2(string path, bool autorename = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to create.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderV2(path As String, autorename As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2(System.IAsyncResult)
  id: EndCreateFolderV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCreateFolderV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCreateFolderV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCreateFolderV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1272
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the create folder route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public CreateFolderResult EndCreateFolderV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.CreateFolderResult
      description: The response to the send request
    content.vb: Public Function EndCreateFolderV2(asyncResult As IAsyncResult) As CreateFolderResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  id: CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderAsync(CreateFolderArg)
  nameWithType: FilesUserRoutes.CreateFolderAsync(CreateFolderArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CreateFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1292
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a folder at a given path.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use CreateFolderV2Async instead.")]

      public Task<FolderMetadata> CreateFolderAsync(CreateFolderArg createFolderArg)
    parameters:
    - id: createFolderArg
      type: Dropbox.Api.Files.CreateFolderArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FolderMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use CreateFolderV2Async instead.")>

      Public Function CreateFolderAsync(createFolderArg As CreateFolderArg) As Task(Of FolderMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use CreateFolderV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  id: BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolder(CreateFolderArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolder(CreateFolderArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCreateFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1307
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginCreateFolderV2 instead.")]

      public IAsyncResult BeginCreateFolder(CreateFolderArg createFolderArg, AsyncCallback callback, object state = null)
    parameters:
    - id: createFolderArg
      type: Dropbox.Api.Files.CreateFolderArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginCreateFolderV2 instead.")>

      Public Function BeginCreateFolder(createFolderArg As CreateFolderArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginCreateFolderV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(System.String,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(System.String,System.Boolean)
  id: CreateFolderAsync(System.String,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderAsync(String, Boolean)
  nameWithType: FilesUserRoutes.CreateFolderAsync(String, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CreateFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1326
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a folder at a given path.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use CreateFolderV2Async instead.")]

      public Task<FolderMetadata> CreateFolderAsync(string path, bool autorename = false)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to create.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FolderMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use CreateFolderV2Async instead.")>

      Public Function CreateFolderAsync(path As String, autorename As Boolean = False) As Task(Of FolderMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use CreateFolderV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCreateFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolder(String, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolder(String, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(System.String, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCreateFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1347
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginCreateFolderV2 instead.")]

      public IAsyncResult BeginCreateFolder(string path, bool autorename = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to create.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginCreateFolderV2 instead.")>

      Public Function BeginCreateFolder(path As String, autorename As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginCreateFolderV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder(System.IAsyncResult)
  id: EndCreateFolder(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCreateFolder(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCreateFolder(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCreateFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1369
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the create folder route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndCreateFolderV2 instead.")]

      public FolderMetadata EndCreateFolder(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FolderMetadata
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndCreateFolderV2 instead.")>

      Public Function EndCreateFolder(asyncResult As IAsyncResult) As FolderMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndCreateFolderV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  id: CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderBatchAsync(CreateFolderBatchArg)
  nameWithType: FilesUserRoutes.CreateFolderBatchAsync(CreateFolderBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CreateFolderBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1394
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create multiple folders at once.</p>\n<p>This route is asynchronous for large batches, which returns a job ID\nimmediately and runs the create folder batch asynchronously. Otherwise, creates the\nfolders and returns the result synchronously for smaller inputs. You can force\nasynchronous behaviour by using the <xref href=\"Dropbox.Api.Files.CreateFolderBatchArg.ForceAsync\" data-throw-if-not-resolved=\"false\"></xref> flag.  Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to\ncheck the job status.</p>\n"
  example: []
  syntax:
    content: public Task<CreateFolderBatchLaunch> CreateFolderBatchAsync(CreateFolderBatchArg createFolderBatchArg)
    parameters:
    - id: createFolderBatchArg
      type: Dropbox.Api.Files.CreateFolderBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderBatchAsync(createFolderBatchArg As CreateFolderBatchArg) As Task(Of CreateFolderBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg,System.AsyncCallback,System.Object)
  id: BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderBatch(CreateFolderBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderBatch(CreateFolderBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCreateFolderBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1408
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCreateFolderBatch(CreateFolderBatchArg createFolderBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: createFolderBatchArg
      type: Dropbox.Api.Files.CreateFolderBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderBatch(createFolderBatchArg As CreateFolderBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
  id: CreateFolderBatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderBatchAsync(IEnumerable<String>, Boolean, Boolean)
  nameWithType: FilesUserRoutes.CreateFolderBatchAsync(IEnumerable<String>, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable<System.String>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CreateFolderBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1433
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create multiple folders at once.</p>\n<p>This route is asynchronous for large batches, which returns a job ID\nimmediately and runs the create folder batch asynchronously. Otherwise, creates the\nfolders and returns the result synchronously for smaller inputs. You can force\nasynchronous behaviour by using the <xref href=\"Dropbox.Api.Files.CreateFolderBatchArg.ForceAsync\" data-throw-if-not-resolved=\"false\"></xref> flag.  Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to\ncheck the job status.</p>\n"
  example: []
  syntax:
    content: public Task<CreateFolderBatchLaunch> CreateFolderBatchAsync(IEnumerable<string> paths, bool autorename = false, bool forceAsync = false)
    parameters:
    - id: paths
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        List of paths to be created in the user&apos;s Dropbox. Duplicate

        path arguments in the batch are considered only once.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    - id: forceAsync
      type: System.Boolean
      description: >-
        Whether to force the create to happen

        asynchronously.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderBatchAsync(paths As IEnumerable(Of String), autorename As Boolean = False, forceAsync As Boolean = False) As Task(Of CreateFolderBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync*
  nameWithType.vb: FilesUserRoutes.CreateFolderBatchAsync(IEnumerable(Of String), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable(Of System.String), System.Boolean, System.Boolean)
  name.vb: CreateFolderBatchAsync(IEnumerable(Of String), Boolean, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCreateFolderBatch(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderBatch(IEnumerable<String>, Boolean, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderBatch(IEnumerable<String>, Boolean, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable<System.String>, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCreateFolderBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1458
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCreateFolderBatch(IEnumerable<string> paths, bool autorename = false, bool forceAsync = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: paths
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        List of paths to be created in the user&apos;s Dropbox. Duplicate

        path arguments in the batch are considered only once.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    - id: forceAsync
      type: System.Boolean
      description: >-
        Whether to force the create to happen

        asynchronously.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderBatch(paths As IEnumerable(Of String), autorename As Boolean = False, forceAsync As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch*
  nameWithType.vb: FilesUserRoutes.BeginCreateFolderBatch(IEnumerable(Of String), Boolean, Boolean, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable(Of System.String), System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginCreateFolderBatch(IEnumerable(Of String), Boolean, Boolean, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch(System.IAsyncResult)
  id: EndCreateFolderBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCreateFolderBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCreateFolderBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCreateFolderBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1478
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the create folder batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public CreateFolderBatchLaunch EndCreateFolderBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.CreateFolderBatchLaunch
      description: The response to the send request
    content.vb: Public Function EndCreateFolderBatch(asyncResult As IAsyncResult) As CreateFolderBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.CreateFolderBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CreateFolderBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1500
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If\nsuccess, it returns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<CreateFolderBatchJobStatus> CreateFolderBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderBatchCheckAsync(pollArg As PollArg) As Task(Of CreateFolderBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderBatchCheck(PollArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderBatchCheck(PollArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCreateFolderBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1514
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder batch check route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCreateFolderBatchCheck(PollArg pollArg, AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderBatchCheck(pollArg As PollArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(System.String)
  id: CreateFolderBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.CreateFolderBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CreateFolderBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1533
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If\nsuccess, it returns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<CreateFolderBatchJobStatus> CreateFolderBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderBatchCheckAsync(asyncJobId As String) As Task(Of CreateFolderBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginCreateFolderBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderBatchCheck(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderBatchCheck(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginCreateFolderBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1550
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder batch check route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginCreateFolderBatchCheck(string asyncJobId, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderBatchCheck(asyncJobId As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck(System.IAsyncResult)
  id: EndCreateFolderBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCreateFolderBatchCheck(IAsyncResult)
  nameWithType: FilesUserRoutes.EndCreateFolderBatchCheck(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndCreateFolderBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1569
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the create folder batch check\nroute to complete</p>\n"
  example: []
  syntax:
    content: public CreateFolderBatchJobStatus EndCreateFolderBatchCheck(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.CreateFolderBatchJobStatus
      description: The response to the send request
    content.vb: Public Function EndCreateFolderBatchCheck(asyncResult As IAsyncResult) As CreateFolderBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  id: DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteV2Async(DeleteArg)
  nameWithType: FilesUserRoutes.DeleteV2Async(DeleteArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DeleteV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1593
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete the file or folder at a given path.</p>\n<p>If the path is a folder, all its contents will be deleted too.</p>\n<p>A successful response indicates that the file or folder was deleted. The\nreturned metadata will be the corresponding <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the item at time of deletion, and not a <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public Task<DeleteResult> DeleteV2Async(DeleteArg deleteArg)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteV2Async(deleteArg As DeleteArg) As Task(Of DeleteResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  id: BeginDeleteV2(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteV2(DeleteArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteV2(DeleteArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(Dropbox.Api.Files.DeleteArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDeleteV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1607
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDeleteV2(DeleteArg deleteArg, AsyncCallback callback, object state = null)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteV2(deleteArg As DeleteArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(System.String,System.String)
  id: DeleteV2Async(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteV2Async(String, String)
  nameWithType: FilesUserRoutes.DeleteV2Async(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DeleteV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1629
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete the file or folder at a given path.</p>\n<p>If the path is a folder, all its contents will be deleted too.</p>\n<p>A successful response indicates that the file or folder was deleted. The\nreturned metadata will be the corresponding <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the item at time of deletion, and not a <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public Task<DeleteResult> DeleteV2Async(string path, string parentRev = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteV2Async(path As String, parentRev As String = Nothing) As Task(Of DeleteResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginDeleteV2(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteV2(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteV2(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDeleteV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1649
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDeleteV2(string path, string parentRev = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteV2(path As String, parentRev As String = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2(System.IAsyncResult)
  id: EndDeleteV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDeleteV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndDeleteV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndDeleteV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1669
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the delete route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public DeleteResult EndDeleteV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.DeleteResult
      description: The response to the send request
    content.vb: Public Function EndDeleteV2(asyncResult As IAsyncResult) As DeleteResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(Dropbox.Api.Files.DeleteArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(Dropbox.Api.Files.DeleteArg)
  id: DeleteAsync(Dropbox.Api.Files.DeleteArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteAsync(DeleteArg)
  nameWithType: FilesUserRoutes.DeleteAsync(DeleteArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(Dropbox.Api.Files.DeleteArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1693
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete the file or folder at a given path.</p>\n<p>If the path is a folder, all its contents will be deleted too.</p>\n<p>A successful response indicates that the file or folder was deleted. The\nreturned metadata will be the corresponding <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the item at time of deletion, and not a <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use DeleteV2Async instead.")]

      public Task<Metadata> DeleteAsync(DeleteArg deleteArg)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use DeleteV2Async instead.")>

      Public Function DeleteAsync(deleteArg As DeleteArg) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use DeleteV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  id: BeginDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDelete(DeleteArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDelete(DeleteArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(Dropbox.Api.Files.DeleteArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1708
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginDeleteV2 instead.")]

      public IAsyncResult BeginDelete(DeleteArg deleteArg, AsyncCallback callback, object state = null)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginDeleteV2 instead.")>

      Public Function BeginDelete(deleteArg As DeleteArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginDeleteV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(System.String,System.String)
  id: DeleteAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteAsync(String, String)
  nameWithType: FilesUserRoutes.DeleteAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1731
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete the file or folder at a given path.</p>\n<p>If the path is a folder, all its contents will be deleted too.</p>\n<p>A successful response indicates that the file or folder was deleted. The\nreturned metadata will be the corresponding <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the item at time of deletion, and not a <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use DeleteV2Async instead.")]

      public Task<Metadata> DeleteAsync(string path, string parentRev = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use DeleteV2Async instead.")>

      Public Function DeleteAsync(path As String, parentRev As String = Nothing) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use DeleteV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginDelete(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDelete(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDelete(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1752
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginDeleteV2 instead.")]

      public IAsyncResult BeginDelete(string path, string parentRev = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginDeleteV2 instead.")>

      Public Function BeginDelete(path As String, parentRev As String = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginDeleteV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete(System.IAsyncResult)
  id: EndDelete(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDelete(IAsyncResult)
  nameWithType: FilesUserRoutes.EndDelete(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1773
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the delete route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndDeleteV2 instead.")]

      public Metadata EndDelete(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndDeleteV2 instead.")>

      Public Function EndDelete(asyncResult As IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndDeleteV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  id: DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteBatchAsync(DeleteBatchArg)
  nameWithType: FilesUserRoutes.DeleteBatchAsync(DeleteBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DeleteBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1795
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete multiple files/folders at once.</p>\n<p>This route is asynchronous, which returns a job ID immediately and runs the\ndelete batch asynchronously. Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public Task<DeleteBatchLaunch> DeleteBatchAsync(DeleteBatchArg deleteBatchArg)
    parameters:
    - id: deleteBatchArg
      type: Dropbox.Api.Files.DeleteBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteBatchAsync(deleteBatchArg As DeleteBatchArg) As Task(Of DeleteBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg,System.AsyncCallback,System.Object)
  id: BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteBatch(DeleteBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteBatch(DeleteBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDeleteBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1809
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDeleteBatch(DeleteBatchArg deleteBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: deleteBatchArg
      type: Dropbox.Api.Files.DeleteBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteBatch(deleteBatchArg As DeleteBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg})
  id: DeleteBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteBatchAsync(IEnumerable<DeleteArg>)
  nameWithType: FilesUserRoutes.DeleteBatchAsync(IEnumerable<DeleteArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.DeleteArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DeleteBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1826
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete multiple files/folders at once.</p>\n<p>This route is asynchronous, which returns a job ID immediately and runs the\ndelete batch asynchronously. Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public Task<DeleteBatchLaunch> DeleteBatchAsync(IEnumerable<DeleteArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg}
      description: The entries
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteBatchAsync(entries As IEnumerable(Of DeleteArg)) As Task(Of DeleteBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync*
  nameWithType.vb: FilesUserRoutes.DeleteBatchAsync(IEnumerable(Of DeleteArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.DeleteArg))
  name.vb: DeleteBatchAsync(IEnumerable(Of DeleteArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg},System.AsyncCallback,System.Object)
  id: BeginDeleteBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteBatch(IEnumerable<DeleteArg>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteBatch(IEnumerable<DeleteArg>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.DeleteArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDeleteBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1842
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDeleteBatch(IEnumerable<DeleteArg> entries, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg}
      description: The entries
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteBatch(entries As IEnumerable(Of DeleteArg), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch*
  nameWithType.vb: FilesUserRoutes.BeginDeleteBatch(IEnumerable(Of DeleteArg), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.DeleteArg), System.AsyncCallback, System.Object)
  name.vb: BeginDeleteBatch(IEnumerable(Of DeleteArg), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch(System.IAsyncResult)
  id: EndDeleteBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDeleteBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndDeleteBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndDeleteBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1858
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the delete batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public DeleteBatchLaunch EndDeleteBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.DeleteBatchLaunch
      description: The response to the send request
    content.vb: Public Function EndDeleteBatch(asyncResult As IAsyncResult) As DeleteBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.DeleteBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DeleteBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1880
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<DeleteBatchJobStatus> DeleteBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteBatchCheckAsync(pollArg As PollArg) As Task(Of DeleteBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteBatchCheck(PollArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteBatchCheck(PollArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDeleteBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1894
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete batch check route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDeleteBatchCheck(PollArg pollArg, AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteBatchCheck(pollArg As PollArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(System.String)
  id: DeleteBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.DeleteBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DeleteBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1913
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<DeleteBatchJobStatus> DeleteBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteBatchCheckAsync(asyncJobId As String) As Task(Of DeleteBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginDeleteBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteBatchCheck(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteBatchCheck(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDeleteBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1930
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete batch check route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDeleteBatchCheck(string asyncJobId, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteBatchCheck(asyncJobId As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck(System.IAsyncResult)
  id: EndDeleteBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDeleteBatchCheck(IAsyncResult)
  nameWithType: FilesUserRoutes.EndDeleteBatchCheck(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndDeleteBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1949
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the delete batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public DeleteBatchJobStatus EndDeleteBatchCheck(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.DeleteBatchJobStatus
      description: The response to the send request
    content.vb: Public Function EndDeleteBatchCheck(asyncResult As IAsyncResult) As DeleteBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(Dropbox.Api.Files.DownloadArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(Dropbox.Api.Files.DownloadArg)
  id: DownloadAsync(Dropbox.Api.Files.DownloadArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DownloadAsync(DownloadArg)
  nameWithType: FilesUserRoutes.DownloadAsync(DownloadArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(Dropbox.Api.Files.DownloadArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DownloadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1969
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Download a file from a user&apos;s Dropbox.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<FileMetadata>> DownloadAsync(DownloadArg downloadArg)
    parameters:
    - id: downloadArg
      type: Dropbox.Api.Files.DownloadArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DownloadAsync(downloadArg As DownloadArg) As Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(Dropbox.Api.Files.DownloadArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(Dropbox.Api.Files.DownloadArg,System.AsyncCallback,System.Object)
  id: BeginDownload(Dropbox.Api.Files.DownloadArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDownload(DownloadArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDownload(DownloadArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(Dropbox.Api.Files.DownloadArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDownload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1983
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the download route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDownload(DownloadArg downloadArg, AsyncCallback callback, object state = null)
    parameters:
    - id: downloadArg
      type: Dropbox.Api.Files.DownloadArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDownload(downloadArg As DownloadArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(System.String,System.String)
  id: DownloadAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DownloadAsync(String, String)
  nameWithType: FilesUserRoutes.DownloadAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DownloadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2001
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Download a file from a user&apos;s Dropbox.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<FileMetadata>> DownloadAsync(string path, string rev = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to download.
    - id: rev
      type: System.String
      description: >-
        Please specify revision in <code data-dev-comment-type="paramref" class="paramref">path</code>

        instead.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DownloadAsync(path As String, rev As String = Nothing) As Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginDownload(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDownload(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDownload(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDownload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2021
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the download route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDownload(string path, string rev = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to download.
    - id: rev
      type: System.String
      description: >-
        Please specify revision in <code data-dev-comment-type="paramref" class="paramref">path</code>

        instead.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDownload(path As String, rev As String = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload(System.IAsyncResult)
  id: EndDownload(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDownload(IAsyncResult)
  nameWithType: FilesUserRoutes.EndDownload(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndDownload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2042
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the download route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<FileMetadata> EndDownload(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
      description: The response to the send request
    content.vb: Public Function EndDownload(asyncResult As IAsyncResult) As IDownloadResponse(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  id: DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DownloadZipAsync(DownloadZipArg)
  nameWithType: FilesUserRoutes.DownloadZipAsync(DownloadZipArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DownloadZipAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2065
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Download a folder from the user&apos;s Dropbox, as a zip file. The folder must be\nless than 20 GB in size and any single file within must be less than 4 GB in size.\nThe resulting zip must have fewer than 10,000 total file and folder entries,\nincluding the top level folder. The input cannot be a single file.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<DownloadZipResult>> DownloadZipAsync(DownloadZipArg downloadZipArg)
    parameters:
    - id: downloadZipArg
      type: Dropbox.Api.Files.DownloadZipArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DownloadZipAsync(downloadZipArg As DownloadZipArg) As Task(Of IDownloadResponse(Of DownloadZipResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadZipError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg,System.AsyncCallback,System.Object)
  id: BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDownloadZip(DownloadZipArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDownloadZip(DownloadZipArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDownloadZip
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2079
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the download zip route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDownloadZip(DownloadZipArg downloadZipArg, AsyncCallback callback, object state = null)
    parameters:
    - id: downloadZipArg
      type: Dropbox.Api.Files.DownloadZipArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDownloadZip(downloadZipArg As DownloadZipArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(System.String)
  id: DownloadZipAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DownloadZipAsync(String)
  nameWithType: FilesUserRoutes.DownloadZipAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: DownloadZipAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2098
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Download a folder from the user&apos;s Dropbox, as a zip file. The folder must be\nless than 20 GB in size and any single file within must be less than 4 GB in size.\nThe resulting zip must have fewer than 10,000 total file and folder entries,\nincluding the top level folder. The input cannot be a single file.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<DownloadZipResult>> DownloadZipAsync(string path)
    parameters:
    - id: path
      type: System.String
      description: The path of the folder to download.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DownloadZipAsync(path As String) As Task(Of IDownloadResponse(Of DownloadZipResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadZipError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(System.String,System.AsyncCallback,System.Object)
  id: BeginDownloadZip(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDownloadZip(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDownloadZip(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginDownloadZip
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2114
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the download zip route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginDownloadZip(string path, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the folder to download.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDownloadZip(path As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip(System.IAsyncResult)
  id: EndDownloadZip(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDownloadZip(IAsyncResult)
  nameWithType: FilesUserRoutes.EndDownloadZip(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndDownloadZip
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2133
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the download zip route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<DownloadZipResult> EndDownloadZip(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}
      description: The response to the send request
    content.vb: Public Function EndDownloadZip(asyncResult As IAsyncResult) As IDownloadResponse(Of DownloadZipResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadZipError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(Dropbox.Api.Files.ExportArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(Dropbox.Api.Files.ExportArg)
  id: ExportAsync(Dropbox.Api.Files.ExportArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ExportAsync(ExportArg)
  nameWithType: FilesUserRoutes.ExportAsync(ExportArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(Dropbox.Api.Files.ExportArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ExportAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2155
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Export a file from a user&apos;s Dropbox. This route only supports exporting files\nthat cannot be downloaded directly  and whose <xref href=\"Dropbox.Api.Files.ExportResult.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> has <xref href=\"Dropbox.Api.Files.ExportInfo.ExportAs\" data-throw-if-not-resolved=\"false\"></xref> populated.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<ExportResult>> ExportAsync(ExportArg exportArg)
    parameters:
    - id: exportArg
      type: Dropbox.Api.Files.ExportArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ExportAsync(exportArg As ExportArg) As Task(Of IDownloadResponse(Of ExportResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ExportError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(Dropbox.Api.Files.ExportArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(Dropbox.Api.Files.ExportArg,System.AsyncCallback,System.Object)
  id: BeginExport(Dropbox.Api.Files.ExportArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginExport(ExportArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginExport(ExportArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(Dropbox.Api.Files.ExportArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginExport
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2169
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the export route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginExport(ExportArg exportArg, AsyncCallback callback, object state = null)
    parameters:
    - id: exportArg
      type: Dropbox.Api.Files.ExportArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginExport(exportArg As ExportArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(System.String,System.String)
  id: ExportAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ExportAsync(String, String)
  nameWithType: FilesUserRoutes.ExportAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ExportAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2192
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Export a file from a user&apos;s Dropbox. This route only supports exporting files\nthat cannot be downloaded directly  and whose <xref href=\"Dropbox.Api.Files.ExportResult.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> has <xref href=\"Dropbox.Api.Files.ExportInfo.ExportAs\" data-throw-if-not-resolved=\"false\"></xref> populated.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<ExportResult>> ExportAsync(string path, string exportFormat = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to be exported.
    - id: exportFormat
      type: System.String
      description: >-
        The file format to which the file should be exported.

        This must be one of the formats listed in the file&apos;s export_options returned by

        <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)" data-throw-if-not-resolved="false"></xref>. If none

        is specified, the default format (specified in export_as in file metadata) will be

        used.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ExportAsync(path As String, exportFormat As String = Nothing) As Task(Of IDownloadResponse(Of ExportResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ExportError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginExport(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginExport(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginExport(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginExport
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2215
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the export route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginExport(string path, string exportFormat = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to be exported.
    - id: exportFormat
      type: System.String
      description: >-
        The file format to which the file should be exported.

        This must be one of the formats listed in the file&apos;s export_options returned by

        <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)" data-throw-if-not-resolved="false"></xref>. If none

        is specified, the default format (specified in export_as in file metadata) will be

        used.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginExport(path As String, exportFormat As String = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport(System.IAsyncResult)
  id: EndExport(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndExport(IAsyncResult)
  nameWithType: FilesUserRoutes.EndExport(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndExport
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2235
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the export route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<ExportResult> EndExport(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}
      description: The response to the send request
    content.vb: Public Function EndExport(asyncResult As IAsyncResult) As IDownloadResponse(Of ExportResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ExportError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  id: GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetFileLockBatchAsync(LockFileBatchArg)
  nameWithType: FilesUserRoutes.GetFileLockBatchAsync(LockFileBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetFileLockBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2255
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Return the lock metadata for the given list of paths.</p>\n"
  example: []
  syntax:
    content: public Task<LockFileBatchResult> GetFileLockBatchAsync(LockFileBatchArg lockFileBatchArg)
    parameters:
    - id: lockFileBatchArg
      type: Dropbox.Api.Files.LockFileBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetFileLockBatchAsync(lockFileBatchArg As LockFileBatchArg) As Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  id: BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetFileLockBatch(LockFileBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetFileLockBatch(LockFileBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetFileLockBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2269
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get file lock batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetFileLockBatch(LockFileBatchArg lockFileBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: lockFileBatchArg
      type: Dropbox.Api.Files.LockFileBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetFileLockBatch(lockFileBatchArg As LockFileBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  id: GetFileLockBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetFileLockBatchAsync(IEnumerable<LockFileArg>)
  nameWithType: FilesUserRoutes.GetFileLockBatchAsync(IEnumerable<LockFileArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetFileLockBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2287
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Return the lock metadata for the given list of paths.</p>\n"
  example: []
  syntax:
    content: public Task<LockFileBatchResult> GetFileLockBatchAsync(IEnumerable<LockFileArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be locked or queried. Duplicate path arguments in the batch are

        considered only once.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetFileLockBatchAsync(entries As IEnumerable(Of LockFileArg)) As Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.GetFileLockBatchAsync(IEnumerable(Of LockFileArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg))
  name.vb: GetFileLockBatchAsync(IEnumerable(Of LockFileArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  id: BeginGetFileLockBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetFileLockBatch(IEnumerable<LockFileArg>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetFileLockBatch(IEnumerable<LockFileArg>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetFileLockBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2305
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get file lock batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetFileLockBatch(IEnumerable<LockFileArg> entries, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be locked or queried. Duplicate path arguments in the batch are

        considered only once.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetFileLockBatch(entries As IEnumerable(Of LockFileArg), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch*
  nameWithType.vb: FilesUserRoutes.BeginGetFileLockBatch(IEnumerable(Of LockFileArg), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg), System.AsyncCallback, System.Object)
  name.vb: BeginGetFileLockBatch(IEnumerable(Of LockFileArg), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch(System.IAsyncResult)
  id: EndGetFileLockBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetFileLockBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetFileLockBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetFileLockBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2324
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get file lock batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public LockFileBatchResult EndGetFileLockBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.LockFileBatchResult
      description: The response to the send request
    content.vb: Public Function EndGetFileLockBatch(asyncResult As IAsyncResult) As LockFileBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  id: GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetMetadataAsync(GetMetadataArg)
  nameWithType: FilesUserRoutes.GetMetadataAsync(GetMetadataArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetMetadataAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2345
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the metadata for a file or folder.</p>\n<p>Note: Metadata for the root folder is unsupported.</p>\n"
  example: []
  syntax:
    content: public Task<Metadata> GetMetadataAsync(GetMetadataArg getMetadataArg)
    parameters:
    - id: getMetadataArg
      type: Dropbox.Api.Files.GetMetadataArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetMetadataAsync(getMetadataArg As GetMetadataArg) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetMetadataError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg,System.AsyncCallback,System.Object)
  id: BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetMetadata(GetMetadataArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetMetadata(GetMetadataArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2359
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get metadata route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetMetadata(GetMetadataArg getMetadataArg, AsyncCallback callback, object state = null)
    parameters:
    - id: getMetadataArg
      type: Dropbox.Api.Files.GetMetadataArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetMetadata(getMetadataArg As GetMetadataArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase)
  id: GetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase)
  nameWithType: FilesUserRoutes.GetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetMetadataAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2388
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the metadata for a file or folder.</p>\n<p>Note: Metadata for the root folder is unsupported.</p>\n"
  example: []
  syntax:
    content: public Task<Metadata> GetMetadataAsync(string path, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, TemplateFilterBase includePropertyGroups = null)
    parameters:
    - id: path
      type: System.String
      description: The path of a file or folder on Dropbox.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and

        video.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.DeletedMetadata" data-throw-if-not-resolved="false"></xref> will be

        returned for deleted file or folder, otherwise <xref href="Dropbox.Api.Files.LookupError.NotFound" data-throw-if-not-resolved="false"></xref> will be returned.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetMetadataAsync(path As String, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includePropertyGroups As TemplateFilterBase = Nothing) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetMetadataError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.AsyncCallback,System.Object)
  id: BeginGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2424
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get metadata route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetMetadata(string path, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, TemplateFilterBase includePropertyGroups = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of a file or folder on Dropbox.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and

        video.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.DeletedMetadata" data-throw-if-not-resolved="false"></xref> will be

        returned for deleted file or folder, otherwise <xref href="Dropbox.Api.Files.LookupError.NotFound" data-throw-if-not-resolved="false"></xref> will be returned.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetMetadata(path As String, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includePropertyGroups As TemplateFilterBase = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata(System.IAsyncResult)
  id: EndGetMetadata(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetMetadata(IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetMetadata(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2451
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get metadata route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public Metadata EndGetMetadata(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: Public Function EndGetMetadata(asyncResult As IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetMetadataError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  id: GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetPreviewAsync(PreviewArg)
  nameWithType: FilesUserRoutes.GetPreviewAsync(PreviewArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetPreviewAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2476
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a preview for a file.</p>\n<p>Currently, PDF previews are generated for files with the following\nextensions: .ai, .doc, .docm, .docx, .eps, .gdoc, .gslides, .odp, .odt, .pps,\n.ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf.</p>\n<p>HTML previews are generated for files with the following extensions: .csv,\n.ods, .xls, .xlsm, .gsheet, .xlsx.</p>\n<p>Other formats will return an unsupported extension error.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<FileMetadata>> GetPreviewAsync(PreviewArg previewArg)
    parameters:
    - id: previewArg
      type: Dropbox.Api.Files.PreviewArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetPreviewAsync(previewArg As PreviewArg) As Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PreviewError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(Dropbox.Api.Files.PreviewArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(Dropbox.Api.Files.PreviewArg,System.AsyncCallback,System.Object)
  id: BeginGetPreview(Dropbox.Api.Files.PreviewArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetPreview(PreviewArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetPreview(PreviewArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(Dropbox.Api.Files.PreviewArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetPreview
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2490
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get preview route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetPreview(PreviewArg previewArg, AsyncCallback callback, object state = null)
    parameters:
    - id: previewArg
      type: Dropbox.Api.Files.PreviewArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetPreview(previewArg As PreviewArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(System.String,System.String)
  id: GetPreviewAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetPreviewAsync(String, String)
  nameWithType: FilesUserRoutes.GetPreviewAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetPreviewAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2513
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a preview for a file.</p>\n<p>Currently, PDF previews are generated for files with the following\nextensions: .ai, .doc, .docm, .docx, .eps, .gdoc, .gslides, .odp, .odt, .pps,\n.ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf.</p>\n<p>HTML previews are generated for files with the following extensions: .csv,\n.ods, .xls, .xlsm, .gsheet, .xlsx.</p>\n<p>Other formats will return an unsupported extension error.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<FileMetadata>> GetPreviewAsync(string path, string rev = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to preview.
    - id: rev
      type: System.String
      description: >-
        Please specify revision in <code data-dev-comment-type="paramref" class="paramref">path</code>

        instead.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetPreviewAsync(path As String, rev As String = Nothing) As Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PreviewError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginGetPreview(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetPreview(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetPreview(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetPreview
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2533
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get preview route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetPreview(string path, string rev = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to preview.
    - id: rev
      type: System.String
      description: >-
        Please specify revision in <code data-dev-comment-type="paramref" class="paramref">path</code>

        instead.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetPreview(path As String, rev As String = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview(System.IAsyncResult)
  id: EndGetPreview(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetPreview(IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetPreview(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetPreview
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2553
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get preview route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<FileMetadata> EndGetPreview(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
      description: The response to the send request
    content.vb: Public Function EndGetPreview(asyncResult As IAsyncResult) As IDownloadResponse(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PreviewError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  id: GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetTemporaryLinkAsync(GetTemporaryLinkArg)
  nameWithType: FilesUserRoutes.GetTemporaryLinkAsync(GetTemporaryLinkArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetTemporaryLinkAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2576
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a temporary link to stream content of a file. This link will expire in\nfour hours and afterwards you will get 410 Gone. This URL should not be used to\ndisplay content directly in the browser. The Content-Type of the link is determined\nautomatically by the file&apos;s mime type.</p>\n"
  example: []
  syntax:
    content: public Task<GetTemporaryLinkResult> GetTemporaryLinkAsync(GetTemporaryLinkArg getTemporaryLinkArg)
    parameters:
    - id: getTemporaryLinkArg
      type: Dropbox.Api.Files.GetTemporaryLinkArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryLinkResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetTemporaryLinkAsync(getTemporaryLinkArg As GetTemporaryLinkArg) As Task(Of GetTemporaryLinkResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetTemporaryLinkError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg,System.AsyncCallback,System.Object)
  id: BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetTemporaryLink(GetTemporaryLinkArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetTemporaryLink(GetTemporaryLinkArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetTemporaryLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2590
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get temporary link route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetTemporaryLink(GetTemporaryLinkArg getTemporaryLinkArg, AsyncCallback callback, object state = null)
    parameters:
    - id: getTemporaryLinkArg
      type: Dropbox.Api.Files.GetTemporaryLinkArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetTemporaryLink(getTemporaryLinkArg As GetTemporaryLinkArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(System.String)
  id: GetTemporaryLinkAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetTemporaryLinkAsync(String)
  nameWithType: FilesUserRoutes.GetTemporaryLinkAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetTemporaryLinkAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2609
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a temporary link to stream content of a file. This link will expire in\nfour hours and afterwards you will get 410 Gone. This URL should not be used to\ndisplay content directly in the browser. The Content-Type of the link is determined\nautomatically by the file&apos;s mime type.</p>\n"
  example: []
  syntax:
    content: public Task<GetTemporaryLinkResult> GetTemporaryLinkAsync(string path)
    parameters:
    - id: path
      type: System.String
      description: The path to the file you want a temporary link to.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryLinkResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetTemporaryLinkAsync(path As String) As Task(Of GetTemporaryLinkResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetTemporaryLinkError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(System.String,System.AsyncCallback,System.Object)
  id: BeginGetTemporaryLink(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetTemporaryLink(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetTemporaryLink(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetTemporaryLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2625
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get temporary link route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetTemporaryLink(string path, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the file you want a temporary link to.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetTemporaryLink(path As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink(System.IAsyncResult)
  id: EndGetTemporaryLink(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetTemporaryLink(IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetTemporaryLink(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetTemporaryLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2644
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get temporary link route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public GetTemporaryLinkResult EndGetTemporaryLink(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.GetTemporaryLinkResult
      description: The response to the send request
    content.vb: Public Function EndGetTemporaryLink(asyncResult As IAsyncResult) As GetTemporaryLinkResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetTemporaryLinkError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  id: GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetTemporaryUploadLinkAsync(GetTemporaryUploadLinkArg)
  nameWithType: FilesUserRoutes.GetTemporaryUploadLinkAsync(GetTemporaryUploadLinkArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetTemporaryUploadLinkAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2703
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a one-time use temporary upload link to upload a file to a Dropbox\nlocation.</p>\n<p></p>\n<p>This endpoint acts as a delayed <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>. The returned\ntemporary upload link may be used to make a POST request with the data to be\nuploaded. The upload will then be perfomed with the <xref href=\"Dropbox.Api.Files.CommitInfo\" data-throw-if-not-resolved=\"false\"></xref>\npreviously provided to <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)\" data-throw-if-not-resolved=\"false\"></xref> but\nevaluated only upon consumption. Hence, errors stemming from invalid <xref href=\"Dropbox.Api.Files.CommitInfo\" data-throw-if-not-resolved=\"false\"></xref> with respect to the state of the user&apos;s Dropbox will only be\ncommunicated at consumption time. Additionally, these errors are surfaced as\ngeneric HTTP 409 Conflict responses, potentially hiding issue details. The maximum\ntemporary upload link duration is 4 hours. Upon consumption or expiration, a new\nlink will have to be generated. Multiple links may exist for a specific upload path\nat any given time.</p>\n<p></p>\n<p>The POST request on the temporary upload link must have its Content-Type set\nto &quot;application/octet-stream&quot;.</p>\n<p></p>\n<p>Example temporary upload link consumption request:</p>\n<p></p>\n<p>curl -X POST https://content.dropboxapi.com/apitul/1/bNi2uIYF51cVBND</p>\n<p>--header &quot;Content-Type: application/octet-stream&quot;</p>\n<p>--data-binary @local_file.txt</p>\n<p></p>\n<p>A successful temporary upload link consumption request returns the content\nhash of the uploaded data in JSON format.</p>\n<p></p>\n<p>Example successful temporary upload link consumption response:</p>\n<p>{&quot;content-hash&quot;: &quot;599d71033d700ac892a0e48fa61b125d2f5994&quot;}</p>\n<p></p>\n<p>An unsuccessful temporary upload link consumption request returns any of the\nfollowing status codes:</p>\n<p></p>\n<p>HTTP 400 Bad Request: Content-Type is not one of application/octet-stream and\ntext/plain or request is invalid.</p>\n<p>HTTP 409 Conflict: The temporary upload link does not exist or is currently\nunavailable, the upload failed, or another error happened.</p>\n<p>HTTP 410 Gone: The temporary upload link is expired or consumed.</p>\n<p></p>\n<p>Example unsuccessful temporary upload link consumption response:</p>\n<p>Temporary upload link has been recently consumed.</p>\n"
  example: []
  syntax:
    content: public Task<GetTemporaryUploadLinkResult> GetTemporaryUploadLinkAsync(GetTemporaryUploadLinkArg getTemporaryUploadLinkArg)
    parameters:
    - id: getTemporaryUploadLinkArg
      type: Dropbox.Api.Files.GetTemporaryUploadLinkArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryUploadLinkResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetTemporaryUploadLinkAsync(getTemporaryUploadLinkArg As GetTemporaryUploadLinkArg) As Task(Of GetTemporaryUploadLinkResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg,System.AsyncCallback,System.Object)
  id: BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetTemporaryUploadLink(GetTemporaryUploadLinkArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetTemporaryUploadLink(GetTemporaryUploadLinkArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetTemporaryUploadLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2717
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get temporary upload link route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetTemporaryUploadLink(GetTemporaryUploadLinkArg getTemporaryUploadLinkArg, AsyncCallback callback, object state = null)
    parameters:
    - id: getTemporaryUploadLinkArg
      type: Dropbox.Api.Files.GetTemporaryUploadLinkArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetTemporaryUploadLink(getTemporaryUploadLinkArg As GetTemporaryUploadLinkArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo,System.Double)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo,System.Double)
  id: GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo,System.Double)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetTemporaryUploadLinkAsync(CommitInfo, Double)
  nameWithType: FilesUserRoutes.GetTemporaryUploadLinkAsync(CommitInfo, Double)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo, System.Double)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetTemporaryUploadLinkAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2777
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a one-time use temporary upload link to upload a file to a Dropbox\nlocation.</p>\n<p></p>\n<p>This endpoint acts as a delayed <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>. The returned\ntemporary upload link may be used to make a POST request with the data to be\nuploaded. The upload will then be perfomed with the <xref href=\"Dropbox.Api.Files.CommitInfo\" data-throw-if-not-resolved=\"false\"></xref>\npreviously provided to <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)\" data-throw-if-not-resolved=\"false\"></xref> but\nevaluated only upon consumption. Hence, errors stemming from invalid <xref href=\"Dropbox.Api.Files.CommitInfo\" data-throw-if-not-resolved=\"false\"></xref> with respect to the state of the user&apos;s Dropbox will only be\ncommunicated at consumption time. Additionally, these errors are surfaced as\ngeneric HTTP 409 Conflict responses, potentially hiding issue details. The maximum\ntemporary upload link duration is 4 hours. Upon consumption or expiration, a new\nlink will have to be generated. Multiple links may exist for a specific upload path\nat any given time.</p>\n<p></p>\n<p>The POST request on the temporary upload link must have its Content-Type set\nto &quot;application/octet-stream&quot;.</p>\n<p></p>\n<p>Example temporary upload link consumption request:</p>\n<p></p>\n<p>curl -X POST https://content.dropboxapi.com/apitul/1/bNi2uIYF51cVBND</p>\n<p>--header &quot;Content-Type: application/octet-stream&quot;</p>\n<p>--data-binary @local_file.txt</p>\n<p></p>\n<p>A successful temporary upload link consumption request returns the content\nhash of the uploaded data in JSON format.</p>\n<p></p>\n<p>Example successful temporary upload link consumption response:</p>\n<p>{&quot;content-hash&quot;: &quot;599d71033d700ac892a0e48fa61b125d2f5994&quot;}</p>\n<p></p>\n<p>An unsuccessful temporary upload link consumption request returns any of the\nfollowing status codes:</p>\n<p></p>\n<p>HTTP 400 Bad Request: Content-Type is not one of application/octet-stream and\ntext/plain or request is invalid.</p>\n<p>HTTP 409 Conflict: The temporary upload link does not exist or is currently\nunavailable, the upload failed, or another error happened.</p>\n<p>HTTP 410 Gone: The temporary upload link is expired or consumed.</p>\n<p></p>\n<p>Example unsuccessful temporary upload link consumption response:</p>\n<p>Temporary upload link has been recently consumed.</p>\n"
  example: []
  syntax:
    content: public Task<GetTemporaryUploadLinkResult> GetTemporaryUploadLinkAsync(CommitInfo commitInfo, double duration = 14400)
    parameters:
    - id: commitInfo
      type: Dropbox.Api.Files.CommitInfo
      description: >-
        Contains the path and other optional modifiers for the

        future upload commit. Equivalent to the parameters provided to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>.
    - id: duration
      type: System.Double
      description: >-
        How long before this link expires, in seconds.  Attempting

        to start an upload with this link longer than this period  of time after link

        creation will result in an error.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryUploadLinkResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetTemporaryUploadLinkAsync(commitInfo As CommitInfo, duration As Double = 14400) As Task(Of GetTemporaryUploadLinkResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo,System.Double,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo,System.Double,System.AsyncCallback,System.Object)
  id: BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo,System.Double,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetTemporaryUploadLink(CommitInfo, Double, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetTemporaryUploadLink(CommitInfo, Double, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo, System.Double, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetTemporaryUploadLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2800
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get temporary upload link route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetTemporaryUploadLink(CommitInfo commitInfo, double duration = 14400, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: commitInfo
      type: Dropbox.Api.Files.CommitInfo
      description: >-
        Contains the path and other optional modifiers for the

        future upload commit. Equivalent to the parameters provided to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>.
    - id: duration
      type: System.Double
      description: >-
        How long before this link expires, in seconds.  Attempting

        to start an upload with this link longer than this period  of time after link

        creation will result in an error.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetTemporaryUploadLink(commitInfo As CommitInfo, duration As Double = 14400, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink(System.IAsyncResult)
  id: EndGetTemporaryUploadLink(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetTemporaryUploadLink(IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetTemporaryUploadLink(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetTemporaryUploadLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2818
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get temporary upload link\nroute to complete</p>\n"
  example: []
  syntax:
    content: public GetTemporaryUploadLinkResult EndGetTemporaryUploadLink(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.GetTemporaryUploadLinkResult
      description: The response to the send request
    content.vb: Public Function EndGetTemporaryUploadLink(asyncResult As IAsyncResult) As GetTemporaryUploadLinkResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  id: GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailAsync(ThumbnailArg)
  nameWithType: FilesUserRoutes.GetThumbnailAsync(ThumbnailArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetThumbnailAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2841
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<FileMetadata>> GetThumbnailAsync(ThumbnailArg thumbnailArg)
    parameters:
    - id: thumbnailArg
      type: Dropbox.Api.Files.ThumbnailArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailAsync(thumbnailArg As ThumbnailArg) As Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg,System.AsyncCallback,System.Object)
  id: BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnail(ThumbnailArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnail(ThumbnailArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetThumbnail
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2855
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetThumbnail(ThumbnailArg thumbnailArg, AsyncCallback callback, object state = null)
    parameters:
    - id: thumbnailArg
      type: Dropbox.Api.Files.ThumbnailArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnail(thumbnailArg As ThumbnailArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  id: GetThumbnailAsync(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailAsync(String, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  nameWithType: FilesUserRoutes.GetThumbnailAsync(String, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(System.String, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetThumbnailAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2880
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<FileMetadata>> GetThumbnailAsync(string path, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the image file you want to thumbnail.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailAsync(path As String, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing) As Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  id: BeginGetThumbnail(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnail(String, ThumbnailFormat, ThumbnailSize, ThumbnailMode, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnail(String, ThumbnailFormat, ThumbnailSize, ThumbnailMode, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(System.String, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetThumbnail
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2908
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetThumbnail(string path, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the image file you want to thumbnail.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnail(path As String, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail(System.IAsyncResult)
  id: EndGetThumbnail(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetThumbnail(IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetThumbnail(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetThumbnail
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2933
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get thumbnail route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<FileMetadata> EndGetThumbnail(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
      description: The response to the send request
    content.vb: Public Function EndGetThumbnail(asyncResult As IAsyncResult) As IDownloadResponse(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  id: GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailV2Async(ThumbnailV2Arg)
  nameWithType: FilesUserRoutes.GetThumbnailV2Async(ThumbnailV2Arg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetThumbnailV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2956
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<PreviewResult>> GetThumbnailV2Async(ThumbnailV2Arg thumbnailV2Arg)
    parameters:
    - id: thumbnailV2Arg
      type: Dropbox.Api.Files.ThumbnailV2Arg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailV2Async(thumbnailV2Arg As ThumbnailV2Arg) As Task(Of IDownloadResponse(Of PreviewResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailV2Error" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  id: BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailV2(ThumbnailV2Arg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnailV2(ThumbnailV2Arg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetThumbnailV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2970
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetThumbnailV2(ThumbnailV2Arg thumbnailV2Arg, AsyncCallback callback, object state = null)
    parameters:
    - id: thumbnailV2Arg
      type: Dropbox.Api.Files.ThumbnailV2Arg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailV2(thumbnailV2Arg As ThumbnailV2Arg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  id: GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailV2Async(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  nameWithType: FilesUserRoutes.GetThumbnailV2Async(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetThumbnailV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2997
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<PreviewResult>> GetThumbnailV2Async(PathOrLink resource, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null)
    parameters:
    - id: resource
      type: Dropbox.Api.Files.PathOrLink
      description: >-
        Information specifying which file to preview. This could be

        a path to a file, a shared link pointing to a file, or a shared link pointing to a

        folder, with a relative path.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailV2Async(resource As PathOrLink, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing) As Task(Of IDownloadResponse(Of PreviewResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailV2Error" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  id: BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailV2(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnailV2(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetThumbnailV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3027
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetThumbnailV2(PathOrLink resource, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: resource
      type: Dropbox.Api.Files.PathOrLink
      description: >-
        Information specifying which file to preview. This could be

        a path to a file, a shared link pointing to a file, or a shared link pointing to a

        folder, with a relative path.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailV2(resource As PathOrLink, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2(System.IAsyncResult)
  id: EndGetThumbnailV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetThumbnailV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetThumbnailV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetThumbnailV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3052
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get thumbnail route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<PreviewResult> EndGetThumbnailV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}
      description: The response to the send request
    content.vb: Public Function EndGetThumbnailV2(asyncResult As IAsyncResult) As IDownloadResponse(Of PreviewResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailV2Error" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  id: GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailBatchAsync(GetThumbnailBatchArg)
  nameWithType: FilesUserRoutes.GetThumbnailBatchAsync(GetThumbnailBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetThumbnailBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3076
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get thumbnails for a list of images. We allow up to 25 thumbnails in a single\nbatch.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public Task<GetThumbnailBatchResult> GetThumbnailBatchAsync(GetThumbnailBatchArg getThumbnailBatchArg)
    parameters:
    - id: getThumbnailBatchArg
      type: Dropbox.Api.Files.GetThumbnailBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetThumbnailBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailBatchAsync(getThumbnailBatchArg As GetThumbnailBatchArg) As Task(Of GetThumbnailBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetThumbnailBatchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg,System.AsyncCallback,System.Object)
  id: BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailBatch(GetThumbnailBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnailBatch(GetThumbnailBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetThumbnailBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3090
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetThumbnailBatch(GetThumbnailBatchArg getThumbnailBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: getThumbnailBatchArg
      type: Dropbox.Api.Files.GetThumbnailBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailBatch(getThumbnailBatchArg As GetThumbnailBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg})
  id: GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailBatchAsync(IEnumerable<ThumbnailArg>)
  nameWithType: FilesUserRoutes.GetThumbnailBatchAsync(IEnumerable<ThumbnailArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.ThumbnailArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetThumbnailBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3110
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get thumbnails for a list of images. We allow up to 25 thumbnails in a single\nbatch.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public Task<GetThumbnailBatchResult> GetThumbnailBatchAsync(IEnumerable<ThumbnailArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg}
      description: List of files to get thumbnails.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetThumbnailBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailBatchAsync(entries As IEnumerable(Of ThumbnailArg)) As Task(Of GetThumbnailBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetThumbnailBatchError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.GetThumbnailBatchAsync(IEnumerable(Of ThumbnailArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.ThumbnailArg))
  name.vb: GetThumbnailBatchAsync(IEnumerable(Of ThumbnailArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg},System.AsyncCallback,System.Object)
  id: BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailBatch(IEnumerable<ThumbnailArg>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnailBatch(IEnumerable<ThumbnailArg>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.ThumbnailArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetThumbnailBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3126
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetThumbnailBatch(IEnumerable<ThumbnailArg> entries, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg}
      description: List of files to get thumbnails.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailBatch(entries As IEnumerable(Of ThumbnailArg), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch*
  nameWithType.vb: FilesUserRoutes.BeginGetThumbnailBatch(IEnumerable(Of ThumbnailArg), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.ThumbnailArg), System.AsyncCallback, System.Object)
  name.vb: BeginGetThumbnailBatch(IEnumerable(Of ThumbnailArg), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch(System.IAsyncResult)
  id: EndGetThumbnailBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetThumbnailBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetThumbnailBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetThumbnailBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3145
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get thumbnail batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public GetThumbnailBatchResult EndGetThumbnailBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.GetThumbnailBatchResult
      description: The response to the send request
    content.vb: Public Function EndGetThumbnailBatch(asyncResult As IAsyncResult) As GetThumbnailBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetThumbnailBatchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  id: ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderAsync(ListFolderArg)
  nameWithType: FilesUserRoutes.ListFolderAsync(ListFolderArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3195
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Starts returning the contents of a folder. If the result&apos;s <xref href=\"Dropbox.Api.Files.ListFolderResult.HasMore\" data-throw-if-not-resolved=\"false\"></xref> field is <code>true</code>, call\n<xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> with the\nreturned <xref href=\"Dropbox.Api.Files.ListFolderResult.Cursor\" data-throw-if-not-resolved=\"false\"></xref> to retrieve more\nentries.</p>\n<p>If you&apos;re using <xref href=\"Dropbox.Api.Files.ListFolderArg.Recursive\" data-throw-if-not-resolved=\"false\"></xref> set\nto <code>true</code> to keep a local cache of the contents of a Dropbox account, iterate\nthrough each entry in order and process them as follows to keep your local state in\nsync:</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it and remove all its\nchildren.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it but leave the\nchildren as they are. Check the new entry&apos;s <see cref=\"!:Dropbox.Api.Files.FolderSharingInfo.ReadOnly\"></see> and set all its children&apos;s\nread-only statuses to match.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref>, if your local state has something at\nthe given path, remove it and all its children. If there&apos;s nothing at the given\npath, ignore this entry.</p>\n<p>Note: <xref href=\"Dropbox.Api.Auth.RateLimitError\" data-throw-if-not-resolved=\"false\"></xref> may be returned if multiple <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> calls\nwith same parameters are made simultaneously by same API app for same user. If your\napp implements retry logic, please hold off the retry until the previous request\nfinishes.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderResult> ListFolderAsync(ListFolderArg listFolderArg)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderAsync(listFolderArg As ListFolderArg) As Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  id: BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolder(ListFolderArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolder(ListFolderArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3209
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolder(ListFolderArg listFolderArg, AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolder(listFolderArg As ListFolderArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  id: ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  nameWithType: FilesUserRoutes.ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3280
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Starts returning the contents of a folder. If the result&apos;s <xref href=\"Dropbox.Api.Files.ListFolderResult.HasMore\" data-throw-if-not-resolved=\"false\"></xref> field is <code>true</code>, call\n<xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> with the\nreturned <xref href=\"Dropbox.Api.Files.ListFolderResult.Cursor\" data-throw-if-not-resolved=\"false\"></xref> to retrieve more\nentries.</p>\n<p>If you&apos;re using <xref href=\"Dropbox.Api.Files.ListFolderArg.Recursive\" data-throw-if-not-resolved=\"false\"></xref> set\nto <code>true</code> to keep a local cache of the contents of a Dropbox account, iterate\nthrough each entry in order and process them as follows to keep your local state in\nsync:</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it and remove all its\nchildren.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it but leave the\nchildren as they are. Check the new entry&apos;s <see cref=\"!:Dropbox.Api.Files.FolderSharingInfo.ReadOnly\"></see> and set all its children&apos;s\nread-only statuses to match.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref>, if your local state has something at\nthe given path, remove it and all its children. If there&apos;s nothing at the given\npath, ignore this entry.</p>\n<p>Note: <xref href=\"Dropbox.Api.Auth.RateLimitError\" data-throw-if-not-resolved=\"false\"></xref> may be returned if multiple <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> calls\nwith same parameters are made simultaneously by same API app for same user. If your\napp implements retry logic, please hold off the retry until the previous request\nfinishes.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderResult> ListFolderAsync(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderAsync(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True) As Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  name.vb: ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3339
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolder(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolder(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder*
  nameWithType.vb: FilesUserRoutes.BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder(System.IAsyncResult)
  id: EndListFolder(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListFolder(IAsyncResult)
  nameWithType: FilesUserRoutes.EndListFolder(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndListFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3376
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListFolderResult EndListFolder(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderResult
      description: The response to the send request
    content.vb: Public Function EndListFolder(asyncResult As IAsyncResult) As ListFolderResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  id: ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderContinueAsync(ListFolderContinueArg)
  nameWithType: FilesUserRoutes.ListFolderContinueAsync(ListFolderContinueArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3402
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all files and retrieve updates to the folder, following the same\nrules as documented for <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderResult> ListFolderContinueAsync(ListFolderContinueArg listFolderContinueArg)
    parameters:
    - id: listFolderContinueArg
      type: Dropbox.Api.Files.ListFolderContinueArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderContinueAsync(listFolderContinueArg As ListFolderContinueArg) As Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  id: BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderContinue(ListFolderContinueArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderContinue(ListFolderContinueArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolderContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3416
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder continue route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolderContinue(ListFolderContinueArg listFolderContinueArg, AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderContinueArg
      type: Dropbox.Api.Files.ListFolderContinueArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderContinue(listFolderContinueArg As ListFolderContinueArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(System.String)
  id: ListFolderContinueAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderContinueAsync(String)
  nameWithType: FilesUserRoutes.ListFolderContinueAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3442
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all files and retrieve updates to the folder, following the same\nrules as documented for <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderResult> ListFolderContinueAsync(string cursor)
    parameters:
    - id: cursor
      type: System.String
      description: The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderContinueAsync(cursor As String) As Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  id: BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderContinue(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderContinue(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolderContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3462
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder continue route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolderContinue(string cursor, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: cursor
      type: System.String
      description: The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderContinue(cursor As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue(System.IAsyncResult)
  id: EndListFolderContinue(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListFolderContinue(IAsyncResult)
  nameWithType: FilesUserRoutes.EndListFolderContinue(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndListFolderContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3481
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder continue route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListFolderResult EndListFolderContinue(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderResult
      description: The response to the send request
    content.vb: Public Function EndListFolderContinue(asyncResult As IAsyncResult) As ListFolderResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  id: ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderGetLatestCursorAsync(ListFolderArg)
  nameWithType: FilesUserRoutes.ListFolderGetLatestCursorAsync(ListFolderArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderGetLatestCursorAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3507
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>A way to quickly get a cursor for the folder&apos;s state. Unlike <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>\ndoesn&apos;t return any entries. This endpoint is for app which only needs to know about\nnew files and modifications and doesn&apos;t need to know about files that already exist\nin Dropbox.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderGetLatestCursorResult> ListFolderGetLatestCursorAsync(ListFolderArg listFolderArg)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderGetLatestCursorResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderGetLatestCursorAsync(listFolderArg As ListFolderArg) As Task(Of ListFolderGetLatestCursorResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  id: BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderGetLatestCursor(ListFolderArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderGetLatestCursor(ListFolderArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolderGetLatestCursor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3522
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder get latest cursor\nroute.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolderGetLatestCursor(ListFolderArg listFolderArg, AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderGetLatestCursor(listFolderArg As ListFolderArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  id: ListFolderGetLatestCursorAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderGetLatestCursorAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  nameWithType: FilesUserRoutes.ListFolderGetLatestCursorAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderGetLatestCursorAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3569
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>A way to quickly get a cursor for the folder&apos;s state. Unlike <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>\ndoesn&apos;t return any entries. This endpoint is for app which only needs to know about\nnew files and modifications and doesn&apos;t need to know about files that already exist\nin Dropbox.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderGetLatestCursorResult> ListFolderGetLatestCursorAsync(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderGetLatestCursorResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderGetLatestCursorAsync(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True) As Task(Of ListFolderGetLatestCursorResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.ListFolderGetLatestCursorAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  name.vb: ListFolderGetLatestCursorAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginListFolderGetLatestCursor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderGetLatestCursor(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderGetLatestCursor(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolderGetLatestCursor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3629
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder get latest cursor\nroute.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolderGetLatestCursor(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderGetLatestCursor(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor*
  nameWithType.vb: FilesUserRoutes.BeginListFolderGetLatestCursor(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginListFolderGetLatestCursor(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor(System.IAsyncResult)
  id: EndListFolderGetLatestCursor(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListFolderGetLatestCursor(IAsyncResult)
  nameWithType: FilesUserRoutes.EndListFolderGetLatestCursor(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndListFolderGetLatestCursor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3666
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder get latest cursor\nroute to complete</p>\n"
  example: []
  syntax:
    content: public ListFolderGetLatestCursorResult EndListFolderGetLatestCursor(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderGetLatestCursorResult
      description: The response to the send request
    content.vb: Public Function EndListFolderGetLatestCursor(asyncResult As IAsyncResult) As ListFolderGetLatestCursorResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  id: ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderLongpollAsync(ListFolderLongpollArg)
  nameWithType: FilesUserRoutes.ListFolderLongpollAsync(ListFolderLongpollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderLongpollAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3694
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>A longpoll endpoint to wait for changes on an account. In conjunction with\n<xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref>, this\ncall gives you a low-latency way to monitor an account for file changes. The\nconnection will block until there are changes available or a timeout occurs. This\nendpoint is useful mostly for client-side apps. If you&apos;re looking for server-side\nnotifications, check out our <a href=\"https://www.dropbox.com/developers/reference/webhooks\">webhooks\ndocumentation</a>.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderLongpollResult> ListFolderLongpollAsync(ListFolderLongpollArg listFolderLongpollArg)
    parameters:
    - id: listFolderLongpollArg
      type: Dropbox.Api.Files.ListFolderLongpollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderLongpollResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderLongpollAsync(listFolderLongpollArg As ListFolderLongpollArg) As Task(Of ListFolderLongpollResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderLongpollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg,System.AsyncCallback,System.Object)
  id: BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderLongpoll(ListFolderLongpollArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderLongpoll(ListFolderLongpollArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolderLongpoll
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3708
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder longpoll route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolderLongpoll(ListFolderLongpollArg listFolderLongpollArg, AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderLongpollArg
      type: Dropbox.Api.Files.ListFolderLongpollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderLongpoll(listFolderLongpollArg As ListFolderLongpollArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(System.String,System.UInt64)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(System.String,System.UInt64)
  id: ListFolderLongpollAsync(System.String,System.UInt64)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderLongpollAsync(String, UInt64)
  nameWithType: FilesUserRoutes.ListFolderLongpollAsync(String, UInt64)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(System.String, System.UInt64)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderLongpollAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3742
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>A longpoll endpoint to wait for changes on an account. In conjunction with\n<xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref>, this\ncall gives you a low-latency way to monitor an account for file changes. The\nconnection will block until there are changes available or a timeout occurs. This\nendpoint is useful mostly for client-side apps. If you&apos;re looking for server-side\nnotifications, check out our <a href=\"https://www.dropbox.com/developers/reference/webhooks\">webhooks\ndocumentation</a>.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderLongpollResult> ListFolderLongpollAsync(string cursor, ulong timeout = 30UL)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        A cursor as returned by <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>. Cursors

        retrieved by setting <xref href="Dropbox.Api.Files.ListFolderArg.IncludeMediaInfo" data-throw-if-not-resolved="false"></xref> to <code>true</code> are not supported.
    - id: timeout
      type: System.UInt64
      description: >-
        A timeout in seconds. The request will block for at most this

        length of time, plus up to 90 seconds of random jitter added to avoid the

        thundering herd problem. Care should be taken when using this parameter, as some

        network infrastructure does not support long timeouts.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderLongpollResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderLongpollAsync(cursor As String, timeout As ULong = 30UL) As Task(Of ListFolderLongpollResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderLongpollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(System.String,System.UInt64,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(System.String,System.UInt64,System.AsyncCallback,System.Object)
  id: BeginListFolderLongpoll(System.String,System.UInt64,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderLongpoll(String, UInt64, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderLongpoll(String, UInt64, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(System.String, System.UInt64, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolderLongpoll
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3770
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder longpoll route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolderLongpoll(string cursor, ulong timeout = 30UL, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        A cursor as returned by <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>. Cursors

        retrieved by setting <xref href="Dropbox.Api.Files.ListFolderArg.IncludeMediaInfo" data-throw-if-not-resolved="false"></xref> to <code>true</code> are not supported.
    - id: timeout
      type: System.UInt64
      description: >-
        A timeout in seconds. The request will block for at most this

        length of time, plus up to 90 seconds of random jitter added to avoid the

        thundering herd problem. Care should be taken when using this parameter, as some

        network infrastructure does not support long timeouts.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderLongpoll(cursor As String, timeout As ULong = 30UL, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll(System.IAsyncResult)
  id: EndListFolderLongpoll(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListFolderLongpoll(IAsyncResult)
  nameWithType: FilesUserRoutes.EndListFolderLongpoll(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndListFolderLongpoll
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3791
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder longpoll route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListFolderLongpollResult EndListFolderLongpoll(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderLongpollResult
      description: The response to the send request
    content.vb: Public Function EndListFolderLongpoll(asyncResult As IAsyncResult) As ListFolderLongpollResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderLongpollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  id: ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListRevisionsAsync(ListRevisionsArg)
  nameWithType: FilesUserRoutes.ListRevisionsAsync(ListRevisionsArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListRevisionsAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3820
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns revisions for files based on a file path or a file id. The file path\nor file id is identified from the latest file entry at the given file path or id.\nThis end point allows your app to query either by file path or file id by setting\nthe mode parameter appropriately.</p>\n<p>In the <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Path\" data-throw-if-not-resolved=\"false\"></xref> (default)\nmode, all revisions at the same file path as the latest file entry are returned. If\nrevisions with the same file id are desired, then mode must be set to <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Id\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Id\" data-throw-if-not-resolved=\"false\"></xref> mode is useful to retrieve\nrevisions for a given file across moves or renames.</p>\n"
  example: []
  syntax:
    content: public Task<ListRevisionsResult> ListRevisionsAsync(ListRevisionsArg listRevisionsArg)
    parameters:
    - id: listRevisionsArg
      type: Dropbox.Api.Files.ListRevisionsArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListRevisionsResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListRevisionsAsync(listRevisionsArg As ListRevisionsArg) As Task(Of ListRevisionsResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListRevisionsError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg,System.AsyncCallback,System.Object)
  id: BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListRevisions(ListRevisionsArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListRevisions(ListRevisionsArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListRevisions
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3834
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list revisions route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListRevisions(ListRevisionsArg listRevisionsArg, AsyncCallback callback, object state = null)
    parameters:
    - id: listRevisionsArg
      type: Dropbox.Api.Files.ListRevisionsArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListRevisions(listRevisionsArg As ListRevisionsArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64)
  id: ListRevisionsAsync(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListRevisionsAsync(String, ListRevisionsMode, UInt64)
  nameWithType: FilesUserRoutes.ListRevisionsAsync(String, ListRevisionsMode, UInt64)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(System.String, Dropbox.Api.Files.ListRevisionsMode, System.UInt64)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListRevisionsAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3862
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns revisions for files based on a file path or a file id. The file path\nor file id is identified from the latest file entry at the given file path or id.\nThis end point allows your app to query either by file path or file id by setting\nthe mode parameter appropriately.</p>\n<p>In the <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Path\" data-throw-if-not-resolved=\"false\"></xref> (default)\nmode, all revisions at the same file path as the latest file entry are returned. If\nrevisions with the same file id are desired, then mode must be set to <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Id\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Id\" data-throw-if-not-resolved=\"false\"></xref> mode is useful to retrieve\nrevisions for a given file across moves or renames.</p>\n"
  example: []
  syntax:
    content: public Task<ListRevisionsResult> ListRevisionsAsync(string path, ListRevisionsMode mode = null, ulong limit = 10UL)
    parameters:
    - id: path
      type: System.String
      description: The path to the file you want to see the revisions of.
    - id: mode
      type: Dropbox.Api.Files.ListRevisionsMode
      description: >-
        Determines the behavior of the API in listing the revisions for

        a given file path or id.
    - id: limit
      type: System.UInt64
      description: The maximum number of revision entries returned.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListRevisionsResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListRevisionsAsync(path As String, mode As ListRevisionsMode = Nothing, limit As ULong = 10UL) As Task(Of ListRevisionsResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListRevisionsError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64,System.AsyncCallback,System.Object)
  id: BeginListRevisions(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListRevisions(String, ListRevisionsMode, UInt64, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListRevisions(String, ListRevisionsMode, UInt64, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(System.String, Dropbox.Api.Files.ListRevisionsMode, System.UInt64, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListRevisions
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3885
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list revisions route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListRevisions(string path, ListRevisionsMode mode = null, ulong limit = 10UL, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the file you want to see the revisions of.
    - id: mode
      type: Dropbox.Api.Files.ListRevisionsMode
      description: >-
        Determines the behavior of the API in listing the revisions for

        a given file path or id.
    - id: limit
      type: System.UInt64
      description: The maximum number of revision entries returned.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListRevisions(path As String, mode As ListRevisionsMode = Nothing, limit As ULong = 10UL, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions(System.IAsyncResult)
  id: EndListRevisions(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListRevisions(IAsyncResult)
  nameWithType: FilesUserRoutes.EndListRevisions(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndListRevisions
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3908
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list revisions route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListRevisionsResult EndListRevisions(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListRevisionsResult
      description: The response to the send request
    content.vb: Public Function EndListRevisions(asyncResult As IAsyncResult) As ListRevisionsResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListRevisionsError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  id: LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: LockFileBatchAsync(LockFileBatchArg)
  nameWithType: FilesUserRoutes.LockFileBatchAsync(LockFileBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: LockFileBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3930
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Lock the files at the given paths. A locked file will be writable only by the\nlock holder. A successful response indicates that the file has been locked. Returns\na list of the locked file paths and their metadata after this operation.</p>\n"
  example: []
  syntax:
    content: public Task<LockFileBatchResult> LockFileBatchAsync(LockFileBatchArg lockFileBatchArg)
    parameters:
    - id: lockFileBatchArg
      type: Dropbox.Api.Files.LockFileBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function LockFileBatchAsync(lockFileBatchArg As LockFileBatchArg) As Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  id: BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginLockFileBatch(LockFileBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginLockFileBatch(LockFileBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginLockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3944
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the lock file batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginLockFileBatch(LockFileBatchArg lockFileBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: lockFileBatchArg
      type: Dropbox.Api.Files.LockFileBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginLockFileBatch(lockFileBatchArg As LockFileBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  id: LockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: LockFileBatchAsync(IEnumerable<LockFileArg>)
  nameWithType: FilesUserRoutes.LockFileBatchAsync(IEnumerable<LockFileArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: LockFileBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3964
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Lock the files at the given paths. A locked file will be writable only by the\nlock holder. A successful response indicates that the file has been locked. Returns\na list of the locked file paths and their metadata after this operation.</p>\n"
  example: []
  syntax:
    content: public Task<LockFileBatchResult> LockFileBatchAsync(IEnumerable<LockFileArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be locked or queried. Duplicate path arguments in the batch are

        considered only once.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function LockFileBatchAsync(entries As IEnumerable(Of LockFileArg)) As Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.LockFileBatchAsync(IEnumerable(Of LockFileArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg))
  name.vb: LockFileBatchAsync(IEnumerable(Of LockFileArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  id: BeginLockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginLockFileBatch(IEnumerable<LockFileArg>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginLockFileBatch(IEnumerable<LockFileArg>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginLockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3982
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the lock file batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginLockFileBatch(IEnumerable<LockFileArg> entries, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be locked or queried. Duplicate path arguments in the batch are

        considered only once.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginLockFileBatch(entries As IEnumerable(Of LockFileArg), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch*
  nameWithType.vb: FilesUserRoutes.BeginLockFileBatch(IEnumerable(Of LockFileArg), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg), System.AsyncCallback, System.Object)
  name.vb: BeginLockFileBatch(IEnumerable(Of LockFileArg), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch(System.IAsyncResult)
  id: EndLockFileBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndLockFileBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndLockFileBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndLockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4001
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the lock file batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public LockFileBatchResult EndLockFileBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.LockFileBatchResult
      description: The response to the send request
    content.vb: Public Function EndLockFileBatch(asyncResult As IAsyncResult) As LockFileBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(Dropbox.Api.Files.RelocationArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(Dropbox.Api.Files.RelocationArg)
  id: MoveV2Async(Dropbox.Api.Files.RelocationArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveV2Async(RelocationArg)
  nameWithType: FilesUserRoutes.MoveV2Async(RelocationArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(Dropbox.Api.Files.RelocationArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4023
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be moved.</p>\n<p>Note that we do not currently support case-only renaming.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationResult> MoveV2Async(RelocationArg relocationArg)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveV2Async(relocationArg As RelocationArg) As Task(Of RelocationResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  id: BeginMoveV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveV2(RelocationArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveV2(RelocationArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(Dropbox.Api.Files.RelocationArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4037
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginMoveV2(RelocationArg relocationArg, AsyncCallback callback, object state = null)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveV2(relocationArg As RelocationArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: MoveV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveV2Async(String, String, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.MoveV2Async(String, String, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(System.String, System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4062
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be moved.</p>\n<p>Note that we do not currently support case-only renaming.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationResult> MoveV2Async(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveV2Async(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As Task(Of RelocationResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginMoveV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveV2(String, String, Boolean, Boolean, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveV2(String, String, Boolean, Boolean, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(System.String, System.String, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4093
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginMoveV2(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveV2(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2(System.IAsyncResult)
  id: EndMoveV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndMoveV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4119
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move route to complete</p>\n"
  example: []
  syntax:
    content: public RelocationResult EndMoveV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationResult
      description: The response to the send request
    content.vb: Public Function EndMoveV2(asyncResult As IAsyncResult) As RelocationResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(Dropbox.Api.Files.RelocationArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(Dropbox.Api.Files.RelocationArg)
  id: MoveAsync(Dropbox.Api.Files.RelocationArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveAsync(RelocationArg)
  nameWithType: FilesUserRoutes.MoveAsync(RelocationArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(Dropbox.Api.Files.RelocationArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4140
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be moved.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use MoveV2Async instead.")]

      public Task<Metadata> MoveAsync(RelocationArg relocationArg)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use MoveV2Async instead.")>

      Public Function MoveAsync(relocationArg As RelocationArg) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use MoveV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  id: BeginMove(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMove(RelocationArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMove(RelocationArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(Dropbox.Api.Files.RelocationArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4155
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginMoveV2 instead.")]

      public IAsyncResult BeginMove(RelocationArg relocationArg, AsyncCallback callback, object state = null)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginMoveV2 instead.")>

      Public Function BeginMove(relocationArg As RelocationArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginMoveV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: MoveAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveAsync(String, String, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.MoveAsync(String, String, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(System.String, System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4180
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be moved.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use MoveV2Async instead.")]

      public Task<Metadata> MoveAsync(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use MoveV2Async instead.")>

      Public Function MoveAsync(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use MoveV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginMove(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMove(String, String, Boolean, Boolean, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMove(String, String, Boolean, Boolean, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(System.String, System.String, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4212
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginMoveV2 instead.")]

      public IAsyncResult BeginMove(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginMoveV2 instead.")>

      Public Function BeginMove(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginMoveV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove(System.IAsyncResult)
  id: EndMove(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMove(IAsyncResult)
  nameWithType: FilesUserRoutes.EndMove(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndMove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4239
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move route to complete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndMoveV2 instead.")]

      public Metadata EndMove(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndMoveV2 instead.")>

      Public Function EndMove(asyncResult As IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndMoveV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  id: MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchV2Async(MoveBatchArg)
  nameWithType: FilesUserRoutes.MoveBatchV2Async(MoveBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4267
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move multiple files or folders to different locations at once in the user&apos;s\nDropbox. Note that we do not currently support case-only renaming.</p>\n<p>This route will replace <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. The main\ndifference is this route will return status for each entry, while <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref> raises failure if\nany entry fails.</p>\n<p>This route will either finish synchronously, or return a job ID and do the\nasync move job in background. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationBatchV2Launch> MoveBatchV2Async(MoveBatchArg moveBatchArg)
    parameters:
    - id: moveBatchArg
      type: Dropbox.Api.Files.MoveBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchV2Async(moveBatchArg As MoveBatchArg) As Task(Of RelocationBatchV2Launch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg,System.AsyncCallback,System.Object)
  id: BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchV2(MoveBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchV2(MoveBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4281
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginMoveBatchV2(MoveBatchArg moveBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: moveBatchArg
      type: Dropbox.Api.Files.MoveBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchV2(moveBatchArg As MoveBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean)
  id: MoveBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchV2Async(IEnumerable<RelocationPath>, Boolean, Boolean)
  nameWithType: FilesUserRoutes.MoveBatchV2Async(IEnumerable<RelocationPath>, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4310
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move multiple files or folders to different locations at once in the user&apos;s\nDropbox. Note that we do not currently support case-only renaming.</p>\n<p>This route will replace <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. The main\ndifference is this route will return status for each entry, while <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref> raises failure if\nany entry fails.</p>\n<p>This route will either finish synchronously, or return a job ID and do the\nasync move job in background. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationBatchV2Launch> MoveBatchV2Async(IEnumerable<RelocationPath> entries, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchV2Async(entries As IEnumerable(Of RelocationPath), autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As Task(Of RelocationBatchV2Launch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async*
  nameWithType.vb: FilesUserRoutes.MoveBatchV2Async(IEnumerable(Of RelocationPath), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean)
  name.vb: MoveBatchV2Async(IEnumerable(Of RelocationPath), Boolean, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginMoveBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchV2(IEnumerable<RelocationPath>, Boolean, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchV2(IEnumerable<RelocationPath>, Boolean, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4336
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginMoveBatchV2(IEnumerable<RelocationPath> entries, bool autorename = false, bool allowOwnershipTransfer = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchV2(entries As IEnumerable(Of RelocationPath), autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2*
  nameWithType.vb: FilesUserRoutes.BeginMoveBatchV2(IEnumerable(Of RelocationPath), Boolean, Boolean, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginMoveBatchV2(IEnumerable(Of RelocationPath), Boolean, Boolean, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2(System.IAsyncResult)
  id: EndMoveBatchV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveBatchV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveBatchV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndMoveBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4356
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchV2Launch EndMoveBatchV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchV2Launch
      description: The response to the send request
    content.vb: Public Function EndMoveBatchV2(asyncResult As IAsyncResult) As RelocationBatchV2Launch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  id: MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchAsync(RelocationBatchArg)
  nameWithType: FilesUserRoutes.MoveBatchAsync(RelocationBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4378
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will return job ID immediately and do the async moving job in\nbackground. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the\njob status.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use MoveBatchV2Async instead.")]

      public Task<RelocationBatchLaunch> MoveBatchAsync(RelocationBatchArg relocationBatchArg)
    parameters:
    - id: relocationBatchArg
      type: Dropbox.Api.Files.RelocationBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use MoveBatchV2Async instead.")>

      Public Function MoveBatchAsync(relocationBatchArg As RelocationBatchArg) As Task(Of RelocationBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use MoveBatchV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  id: BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatch(RelocationBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatch(RelocationBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4393
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginMoveBatchV2 instead.")]

      public IAsyncResult BeginMoveBatch(RelocationBatchArg relocationBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: relocationBatchArg
      type: Dropbox.Api.Files.RelocationBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginMoveBatchV2 instead.")>

      Public Function BeginMoveBatch(relocationBatchArg As RelocationBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginMoveBatchV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  id: MoveBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchAsync(IEnumerable<RelocationPath>, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.MoveBatchAsync(IEnumerable<RelocationPath>, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4419
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will return job ID immediately and do the async moving job in\nbackground. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the\njob status.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use MoveBatchV2Async instead.")]

      public Task<RelocationBatchLaunch> MoveBatchAsync(IEnumerable<RelocationPath> entries, bool autorename = false, bool allowSharedFolder = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use MoveBatchV2Async instead.")>

      Public Function MoveBatchAsync(entries As IEnumerable(Of RelocationPath), autorename As Boolean = False, allowSharedFolder As Boolean = False, allowOwnershipTransfer As Boolean = False) As Task(Of RelocationBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use MoveBatchV2Async instead.
  nameWithType.vb: FilesUserRoutes.MoveBatchAsync(IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.Boolean)
  name.vb: MoveBatchAsync(IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginMoveBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatch(IEnumerable<RelocationPath>, Boolean, Boolean, Boolean, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatch(IEnumerable<RelocationPath>, Boolean, Boolean, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4449
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginMoveBatchV2 instead.")]

      public IAsyncResult BeginMoveBatch(IEnumerable<RelocationPath> entries, bool autorename = false, bool allowSharedFolder = false, bool allowOwnershipTransfer = false, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginMoveBatchV2 instead.")>

      Public Function BeginMoveBatch(entries As IEnumerable(Of RelocationPath), autorename As Boolean = False, allowSharedFolder As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginMoveBatchV2 instead.
  nameWithType.vb: FilesUserRoutes.BeginMoveBatch(IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginMoveBatch(IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch(System.IAsyncResult)
  id: EndMoveBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndMoveBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4472
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndMoveBatchV2 instead.")]

      public RelocationBatchLaunch EndMoveBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchLaunch
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndMoveBatchV2 instead.")>

      Public Function EndMoveBatch(asyncResult As IAsyncResult) As RelocationBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndMoveBatchV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  id: MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchCheckV2Async(PollArg)
  nameWithType: FilesUserRoutes.MoveBatchCheckV2Async(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveBatchCheckV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4495
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. It returns\nlist of results for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationBatchV2JobStatus> MoveBatchCheckV2Async(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchCheckV2Async(pollArg As PollArg) As Task(Of RelocationBatchV2JobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchCheckV2(PollArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchCheckV2(PollArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4509
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch check route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginMoveBatchCheckV2(PollArg pollArg, AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchCheckV2(pollArg As PollArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(System.String)
  id: MoveBatchCheckV2Async(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchCheckV2Async(String)
  nameWithType: FilesUserRoutes.MoveBatchCheckV2Async(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveBatchCheckV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4528
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. It returns\nlist of results for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<RelocationBatchV2JobStatus> MoveBatchCheckV2Async(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchCheckV2Async(asyncJobId As String) As Task(Of RelocationBatchV2JobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  id: BeginMoveBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchCheckV2(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchCheckV2(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4545
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch check route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginMoveBatchCheckV2(string asyncJobId, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchCheckV2(asyncJobId As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2(System.IAsyncResult)
  id: EndMoveBatchCheckV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveBatchCheckV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveBatchCheckV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndMoveBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4564
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchV2JobStatus EndMoveBatchCheckV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchV2JobStatus
      description: The response to the send request
    content.vb: Public Function EndMoveBatchCheckV2(asyncResult As IAsyncResult) As RelocationBatchV2JobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.MoveBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4586
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of results for each entry.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use MoveBatchCheckV2Async instead.")]

      public Task<RelocationBatchJobStatus> MoveBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use MoveBatchCheckV2Async instead.")>

      Public Function MoveBatchCheckAsync(pollArg As PollArg) As Task(Of RelocationBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use MoveBatchCheckV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginMoveBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchCheck(PollArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchCheck(PollArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4601
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch check route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginMoveBatchCheckV2 instead.")]

      public IAsyncResult BeginMoveBatchCheck(PollArg pollArg, AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginMoveBatchCheckV2 instead.")>

      Public Function BeginMoveBatchCheck(pollArg As PollArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginMoveBatchCheckV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(System.String)
  id: MoveBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.MoveBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: MoveBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4621
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of results for each entry.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use MoveBatchCheckV2Async instead.")]

      public Task<RelocationBatchJobStatus> MoveBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use MoveBatchCheckV2Async instead.")>

      Public Function MoveBatchCheckAsync(asyncJobId As String) As Task(Of RelocationBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use MoveBatchCheckV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginMoveBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchCheck(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchCheck(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginMoveBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4639
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch check route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginMoveBatchCheckV2 instead.")]

      public IAsyncResult BeginMoveBatchCheck(string asyncJobId, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginMoveBatchCheckV2 instead.")>

      Public Function BeginMoveBatchCheck(asyncJobId As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginMoveBatchCheckV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck(System.IAsyncResult)
  id: EndMoveBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveBatchCheck(IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveBatchCheck(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndMoveBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4659
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndMoveBatchCheckV2 instead.")]

      public RelocationBatchJobStatus EndMoveBatchCheck(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchJobStatus
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndMoveBatchCheckV2 instead.")>

      Public Function EndMoveBatchCheck(asyncResult As IAsyncResult) As RelocationBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndMoveBatchCheckV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream)
  id: PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PaperCreateAsync(PaperCreateArg, Stream)
  nameWithType: FilesUserRoutes.PaperCreateAsync(PaperCreateArg, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PaperCreateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4681
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Creates a new Paper doc with the provided content.</p>\n"
  example: []
  syntax:
    content: public Task<PaperCreateResult> PaperCreateAsync(PaperCreateArg paperCreateArg, Stream body)
    parameters:
    - id: paperCreateArg
      type: Dropbox.Api.Files.PaperCreateArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperCreateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PaperCreateAsync(paperCreateArg As PaperCreateArg, body As Stream) As Task(Of PaperCreateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPaperCreate(PaperCreateArg, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPaperCreate(PaperCreateArg, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPaperCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4696
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the paper create route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginPaperCreate(PaperCreateArg paperCreateArg, Stream body, AsyncCallback callback, object state = null)
    parameters:
    - id: paperCreateArg
      type: Dropbox.Api.Files.PaperCreateArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPaperCreate(paperCreateArg As PaperCreateArg, body As Stream, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream)
  id: PaperCreateAsync(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PaperCreateAsync(String, ImportFormat, Stream)
  nameWithType: FilesUserRoutes.PaperCreateAsync(String, ImportFormat, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(System.String, Dropbox.Api.Files.ImportFormat, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PaperCreateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4716
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Creates a new Paper doc with the provided content.</p>\n"
  example: []
  syntax:
    content: public Task<PaperCreateResult> PaperCreateAsync(string path, ImportFormat importFormat, Stream body)
    parameters:
    - id: path
      type: System.String
      description: >-
        The fully qualified path to the location in the user&apos;s Dropbox

        where the Paper Doc should be created. This should include the document&apos;s title and

        end with .paper.
    - id: importFormat
      type: Dropbox.Api.Files.ImportFormat
      description: The format of the provided data.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperCreateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PaperCreateAsync(path As String, importFormat As ImportFormat, body As Stream) As Task(Of PaperCreateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginPaperCreate(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPaperCreate(String, ImportFormat, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPaperCreate(String, ImportFormat, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(System.String, Dropbox.Api.Files.ImportFormat, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPaperCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4739
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the paper create route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginPaperCreate(string path, ImportFormat importFormat, Stream body, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        The fully qualified path to the location in the user&apos;s Dropbox

        where the Paper Doc should be created. This should include the document&apos;s title and

        end with .paper.
    - id: importFormat
      type: Dropbox.Api.Files.ImportFormat
      description: The format of the provided data.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPaperCreate(path As String, importFormat As ImportFormat, body As Stream, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate(System.IAsyncResult)
  id: EndPaperCreate(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPaperCreate(IAsyncResult)
  nameWithType: FilesUserRoutes.EndPaperCreate(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndPaperCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4761
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the paper create route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public PaperCreateResult EndPaperCreate(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.PaperCreateResult
      description: The response to the send request
    content.vb: Public Function EndPaperCreate(asyncResult As IAsyncResult) As PaperCreateResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream)
  id: PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PaperUpdateAsync(PaperUpdateArg, Stream)
  nameWithType: FilesUserRoutes.PaperUpdateAsync(PaperUpdateArg, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PaperUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4782
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Updates an existing Paper doc with the provided content.</p>\n"
  example: []
  syntax:
    content: public Task<PaperUpdateResult> PaperUpdateAsync(PaperUpdateArg paperUpdateArg, Stream body)
    parameters:
    - id: paperUpdateArg
      type: Dropbox.Api.Files.PaperUpdateArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperUpdateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PaperUpdateAsync(paperUpdateArg As PaperUpdateArg, body As Stream) As Task(Of PaperUpdateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperUpdateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPaperUpdate(PaperUpdateArg, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPaperUpdate(PaperUpdateArg, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPaperUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4797
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the paper update route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginPaperUpdate(PaperUpdateArg paperUpdateArg, Stream body, AsyncCallback callback, object state = null)
    parameters:
    - id: paperUpdateArg
      type: Dropbox.Api.Files.PaperUpdateArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPaperUpdate(paperUpdateArg As PaperUpdateArg, body As Stream, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream)
  id: PaperUpdateAsync(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PaperUpdateAsync(String, ImportFormat, PaperDocUpdatePolicy, Nullable<Int64>, Stream)
  nameWithType: FilesUserRoutes.PaperUpdateAsync(String, ImportFormat, PaperDocUpdatePolicy, Nullable<Int64>, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String, Dropbox.Api.Files.ImportFormat, Dropbox.Api.Files.PaperDocUpdatePolicy, System.Nullable<System.Int64>, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PaperUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4821
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Updates an existing Paper doc with the provided content.</p>\n"
  example: []
  syntax:
    content: public Task<PaperUpdateResult> PaperUpdateAsync(string path, ImportFormat importFormat, PaperDocUpdatePolicy docUpdatePolicy, long? paperRevision = null, Stream body = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        Path in the user&apos;s Dropbox to update. The path must correspond

        to a Paper doc or an error will be returned.
    - id: importFormat
      type: Dropbox.Api.Files.ImportFormat
      description: The format of the provided data.
    - id: docUpdatePolicy
      type: Dropbox.Api.Files.PaperDocUpdatePolicy
      description: >-
        How the provided content should be applied to the

        doc.
    - id: paperRevision
      type: System.Nullable{System.Int64}
      description: >-
        The latest doc revision. Required when

        doc_update_policy is update. This value must match the current revision of the doc

        or error revision_mismatch will be returned.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperUpdateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PaperUpdateAsync(path As String, importFormat As ImportFormat, docUpdatePolicy As PaperDocUpdatePolicy, paperRevision As Long? = Nothing, body As Stream = Nothing) As Task(Of PaperUpdateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperUpdateError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.PaperUpdateAsync(String, ImportFormat, PaperDocUpdatePolicy, Nullable(Of Int64), Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String, Dropbox.Api.Files.ImportFormat, Dropbox.Api.Files.PaperDocUpdatePolicy, System.Nullable(Of System.Int64), System.IO.Stream)
  name.vb: PaperUpdateAsync(String, ImportFormat, PaperDocUpdatePolicy, Nullable(Of Int64), Stream)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginPaperUpdate(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPaperUpdate(String, ImportFormat, PaperDocUpdatePolicy, Nullable<Int64>, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPaperUpdate(String, ImportFormat, PaperDocUpdatePolicy, Nullable<Int64>, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String, Dropbox.Api.Files.ImportFormat, Dropbox.Api.Files.PaperDocUpdatePolicy, System.Nullable<System.Int64>, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPaperUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4852
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the paper update route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginPaperUpdate(string path, ImportFormat importFormat, PaperDocUpdatePolicy docUpdatePolicy, long? paperRevision = null, Stream body = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        Path in the user&apos;s Dropbox to update. The path must correspond

        to a Paper doc or an error will be returned.
    - id: importFormat
      type: Dropbox.Api.Files.ImportFormat
      description: The format of the provided data.
    - id: docUpdatePolicy
      type: Dropbox.Api.Files.PaperDocUpdatePolicy
      description: >-
        How the provided content should be applied to the

        doc.
    - id: paperRevision
      type: System.Nullable{System.Int64}
      description: >-
        The latest doc revision. Required when

        doc_update_policy is update. This value must match the current revision of the doc

        or error revision_mismatch will be returned.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPaperUpdate(path As String, importFormat As ImportFormat, docUpdatePolicy As PaperDocUpdatePolicy, paperRevision As Long? = Nothing, body As Stream = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate*
  nameWithType.vb: FilesUserRoutes.BeginPaperUpdate(String, ImportFormat, PaperDocUpdatePolicy, Nullable(Of Int64), Stream, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String, Dropbox.Api.Files.ImportFormat, Dropbox.Api.Files.PaperDocUpdatePolicy, System.Nullable(Of System.Int64), System.IO.Stream, System.AsyncCallback, System.Object)
  name.vb: BeginPaperUpdate(String, ImportFormat, PaperDocUpdatePolicy, Nullable(Of Int64), Stream, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate(System.IAsyncResult)
  id: EndPaperUpdate(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPaperUpdate(IAsyncResult)
  nameWithType: FilesUserRoutes.EndPaperUpdate(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndPaperUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4878
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the paper update route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public PaperUpdateResult EndPaperUpdate(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.PaperUpdateResult
      description: The response to the send request
    content.vb: Public Function EndPaperUpdate(asyncResult As IAsyncResult) As PaperUpdateResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperUpdateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  id: PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PermanentlyDeleteAsync(DeleteArg)
  nameWithType: FilesUserRoutes.PermanentlyDeleteAsync(DeleteArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PermanentlyDeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4901
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Permanently delete the file or folder at a given path (see\nhttps://www.dropbox.com/en/help/40).</p>\n<p>If the given file or folder is not yet deleted, this route will first delete\nit. It is possible for this route to successfully delete, then fail to permanently\ndelete.</p>\n<p>Note: This endpoint is only available for Dropbox Business apps.</p>\n"
  example: []
  syntax:
    content: public Task PermanentlyDeleteAsync(DeleteArg deleteArg)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PermanentlyDeleteAsync(deleteArg As DeleteArg) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  id: BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPermanentlyDelete(DeleteArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPermanentlyDelete(DeleteArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPermanentlyDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4915
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the permanently delete route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginPermanentlyDelete(DeleteArg deleteArg, AsyncCallback callback, object state = null)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPermanentlyDelete(deleteArg As DeleteArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(System.String,System.String)
  id: PermanentlyDeleteAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PermanentlyDeleteAsync(String, String)
  nameWithType: FilesUserRoutes.PermanentlyDeleteAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PermanentlyDeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4936
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Permanently delete the file or folder at a given path (see\nhttps://www.dropbox.com/en/help/40).</p>\n<p>If the given file or folder is not yet deleted, this route will first delete\nit. It is possible for this route to successfully delete, then fail to permanently\ndelete.</p>\n<p>Note: This endpoint is only available for Dropbox Business apps.</p>\n"
  example: []
  syntax:
    content: public Task PermanentlyDeleteAsync(string path, string parentRev = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PermanentlyDeleteAsync(path As String, parentRev As String = Nothing) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginPermanentlyDelete(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPermanentlyDelete(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPermanentlyDelete(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPermanentlyDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4956
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the permanently delete route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginPermanentlyDelete(string path, string parentRev = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPermanentlyDelete(path As String, parentRev As String = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete(System.IAsyncResult)
  id: EndPermanentlyDelete(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPermanentlyDelete(IAsyncResult)
  nameWithType: FilesUserRoutes.EndPermanentlyDelete(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndPermanentlyDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4975
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the permanently delete route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndPermanentlyDelete(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndPermanentlyDelete(asyncResult As IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  id: PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesAddAsync(AddPropertiesArg)
  nameWithType: FilesUserRoutes.PropertiesAddAsync(AddPropertiesArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesAddAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4992
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties add route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task PropertiesAddAsync(AddPropertiesArg addPropertiesArg)
    parameters:
    - id: addPropertiesArg
      type: Dropbox.Api.FileProperties.AddPropertiesArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesAddAsync(addPropertiesArg As AddPropertiesArg) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.AddPropertiesError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesAdd(AddPropertiesArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesAdd(AddPropertiesArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5007
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties add route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesAdd(AddPropertiesArg addPropertiesArg, AsyncCallback callback, object state = null)
    parameters:
    - id: addPropertiesArg
      type: Dropbox.Api.FileProperties.AddPropertiesArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesAdd(addPropertiesArg As AddPropertiesArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  id: PropertiesAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesAddAsync(String, IEnumerable<PropertyGroup>)
  nameWithType: FilesUserRoutes.PropertiesAddAsync(String, IEnumerable<PropertyGroup>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesAddAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5025
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties add route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task PropertiesAddAsync(string path, IEnumerable<PropertyGroup> propertyGroups)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: >-
        The property groups which are to be added to a Dropbox

        file. No two groups in the input should  refer to the same template.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesAddAsync(path As String, propertyGroups As IEnumerable(Of PropertyGroup)) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.AddPropertiesError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  nameWithType.vb: FilesUserRoutes.PropertiesAddAsync(String, IEnumerable(Of PropertyGroup))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup))
  name.vb: PropertiesAddAsync(String, IEnumerable(Of PropertyGroup))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  id: BeginPropertiesAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesAdd(String, IEnumerable<PropertyGroup>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesAdd(String, IEnumerable<PropertyGroup>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5046
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties add route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesAdd(string path, IEnumerable<PropertyGroup> propertyGroups, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: >-
        The property groups which are to be added to a Dropbox

        file. No two groups in the input should  refer to the same template.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesAdd(path As String, propertyGroups As IEnumerable(Of PropertyGroup), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  nameWithType.vb: FilesUserRoutes.BeginPropertiesAdd(String, IEnumerable(Of PropertyGroup), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.AsyncCallback, System.Object)
  name.vb: BeginPropertiesAdd(String, IEnumerable(Of PropertyGroup), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd(System.IAsyncResult)
  id: EndPropertiesAdd(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesAdd(IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesAdd(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndPropertiesAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5067
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties add route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public void EndPropertiesAdd(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Sub EndPropertiesAdd(asyncResult As IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.AddPropertiesError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  id: PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesOverwriteAsync(OverwritePropertyGroupArg)
  nameWithType: FilesUserRoutes.PropertiesOverwriteAsync(OverwritePropertyGroupArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesOverwriteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5085
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties overwrite route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task PropertiesOverwriteAsync(OverwritePropertyGroupArg overwritePropertyGroupArg)
    parameters:
    - id: overwritePropertyGroupArg
      type: Dropbox.Api.FileProperties.OverwritePropertyGroupArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesOverwriteAsync(overwritePropertyGroupArg As OverwritePropertyGroupArg) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.InvalidPropertyGroupError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesOverwrite(OverwritePropertyGroupArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesOverwrite(OverwritePropertyGroupArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesOverwrite
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5100
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties overwrite route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesOverwrite(OverwritePropertyGroupArg overwritePropertyGroupArg, AsyncCallback callback, object state = null)
    parameters:
    - id: overwritePropertyGroupArg
      type: Dropbox.Api.FileProperties.OverwritePropertyGroupArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesOverwrite(overwritePropertyGroupArg As OverwritePropertyGroupArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  id: PropertiesOverwriteAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesOverwriteAsync(String, IEnumerable<PropertyGroup>)
  nameWithType: FilesUserRoutes.PropertiesOverwriteAsync(String, IEnumerable<PropertyGroup>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesOverwriteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5118
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties overwrite route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task PropertiesOverwriteAsync(string path, IEnumerable<PropertyGroup> propertyGroups)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: >-
        The property groups &quot;snapshot&quot; updates to force apply.

        No two groups in the input should  refer to the same template.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesOverwriteAsync(path As String, propertyGroups As IEnumerable(Of PropertyGroup)) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.InvalidPropertyGroupError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  nameWithType.vb: FilesUserRoutes.PropertiesOverwriteAsync(String, IEnumerable(Of PropertyGroup))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup))
  name.vb: PropertiesOverwriteAsync(String, IEnumerable(Of PropertyGroup))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  id: BeginPropertiesOverwrite(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesOverwrite(String, IEnumerable<PropertyGroup>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesOverwrite(String, IEnumerable<PropertyGroup>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesOverwrite
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5139
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties overwrite route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesOverwrite(string path, IEnumerable<PropertyGroup> propertyGroups, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: >-
        The property groups &quot;snapshot&quot; updates to force apply.

        No two groups in the input should  refer to the same template.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesOverwrite(path As String, propertyGroups As IEnumerable(Of PropertyGroup), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  nameWithType.vb: FilesUserRoutes.BeginPropertiesOverwrite(String, IEnumerable(Of PropertyGroup), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.AsyncCallback, System.Object)
  name.vb: BeginPropertiesOverwrite(String, IEnumerable(Of PropertyGroup), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite(System.IAsyncResult)
  id: EndPropertiesOverwrite(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesOverwrite(IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesOverwrite(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndPropertiesOverwrite
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5160
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties overwrite route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public void EndPropertiesOverwrite(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Sub EndPropertiesOverwrite(asyncResult As IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.InvalidPropertyGroupError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  id: PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesRemoveAsync(RemovePropertiesArg)
  nameWithType: FilesUserRoutes.PropertiesRemoveAsync(RemovePropertiesArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesRemoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5178
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties remove route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task PropertiesRemoveAsync(RemovePropertiesArg removePropertiesArg)
    parameters:
    - id: removePropertiesArg
      type: Dropbox.Api.FileProperties.RemovePropertiesArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesRemoveAsync(removePropertiesArg As RemovePropertiesArg) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.RemovePropertiesError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesRemove(RemovePropertiesArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesRemove(RemovePropertiesArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5193
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties remove route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesRemove(RemovePropertiesArg removePropertiesArg, AsyncCallback callback, object state = null)
    parameters:
    - id: removePropertiesArg
      type: Dropbox.Api.FileProperties.RemovePropertiesArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesRemove(removePropertiesArg As RemovePropertiesArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: PropertiesRemoveAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesRemoveAsync(String, IEnumerable<String>)
  nameWithType: FilesUserRoutes.PropertiesRemoveAsync(String, IEnumerable<String>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesRemoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5215
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties remove route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task PropertiesRemoveAsync(string path, IEnumerable<string> propertyTemplateIds)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyTemplateIds
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        A list of identifiers for a template created by

        <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesRemoveAsync(path As String, propertyTemplateIds As IEnumerable(Of String)) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.RemovePropertiesError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  nameWithType.vb: FilesUserRoutes.PropertiesRemoveAsync(String, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: PropertiesRemoveAsync(String, IEnumerable(Of String))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  id: BeginPropertiesRemove(System.String,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesRemove(String, IEnumerable<String>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesRemove(String, IEnumerable<String>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String, System.Collections.Generic.IEnumerable<System.String>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5240
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties remove route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesRemove(string path, IEnumerable<string> propertyTemplateIds, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyTemplateIds
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        A list of identifiers for a template created by

        <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref>.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesRemove(path As String, propertyTemplateIds As IEnumerable(Of String), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  nameWithType.vb: FilesUserRoutes.BeginPropertiesRemove(String, IEnumerable(Of String), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.AsyncCallback, System.Object)
  name.vb: BeginPropertiesRemove(String, IEnumerable(Of String), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove(System.IAsyncResult)
  id: EndPropertiesRemove(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesRemove(IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesRemove(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndPropertiesRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5261
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties remove route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public void EndPropertiesRemove(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Sub EndPropertiesRemove(asyncResult As IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.RemovePropertiesError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  id: PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesTemplateGetAsync(GetTemplateArg)
  nameWithType: FilesUserRoutes.PropertiesTemplateGetAsync(GetTemplateArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesTemplateGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5280
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties template get route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task<GetTemplateResult> PropertiesTemplateGetAsync(GetTemplateArg getTemplateArg)
    parameters:
    - id: getTemplateArg
      type: Dropbox.Api.FileProperties.GetTemplateArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.GetTemplateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesTemplateGetAsync(getTemplateArg As GetTemplateArg) As Task(Of GetTemplateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesTemplateGet(GetTemplateArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateGet(GetTemplateArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesTemplateGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5295
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties template get route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesTemplateGet(GetTemplateArg getTemplateArg, AsyncCallback callback, object state = null)
    parameters:
    - id: getTemplateArg
      type: Dropbox.Api.FileProperties.GetTemplateArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesTemplateGet(getTemplateArg As GetTemplateArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(System.String)
  id: PropertiesTemplateGetAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesTemplateGetAsync(String)
  nameWithType: FilesUserRoutes.PropertiesTemplateGetAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesTemplateGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5316
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties template get route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task<GetTemplateResult> PropertiesTemplateGetAsync(string templateId)
    parameters:
    - id: templateId
      type: System.String
      description: An identifier for template added by route  See <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.GetTemplateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesTemplateGetAsync(templateId As String) As Task(Of GetTemplateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(System.String,System.AsyncCallback,System.Object)
  id: BeginPropertiesTemplateGet(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesTemplateGet(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateGet(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesTemplateGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5337
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties template get route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesTemplateGet(string templateId, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: templateId
      type: System.String
      description: An identifier for template added by route  See <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref>.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesTemplateGet(templateId As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet(System.IAsyncResult)
  id: EndPropertiesTemplateGet(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesTemplateGet(IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesTemplateGet(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndPropertiesTemplateGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5357
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties template get route\nto complete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public GetTemplateResult EndPropertiesTemplateGet(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.FileProperties.GetTemplateResult
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function EndPropertiesTemplateGet(asyncResult As IAsyncResult) As GetTemplateResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
  id: PropertiesTemplateListAsync
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesTemplateListAsync()
  nameWithType: FilesUserRoutes.PropertiesTemplateListAsync()
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync()
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesTemplateListAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5377
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties template list route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task<ListTemplateResult> PropertiesTemplateListAsync()
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.ListTemplateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesTemplateListAsync As Task(Of ListTemplateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList(System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList(System.AsyncCallback,System.Object)
  id: BeginPropertiesTemplateList(System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesTemplateList(AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateList(AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesTemplateList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5391
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties template list route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesTemplateList(AsyncCallback callback, object state = null)
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesTemplateList(callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList(System.IAsyncResult)
  id: EndPropertiesTemplateList(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesTemplateList(IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesTemplateList(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndPropertiesTemplateList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5409
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties template list route\nto complete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public ListTemplateResult EndPropertiesTemplateList(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.FileProperties.ListTemplateResult
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function EndPropertiesTemplateList(asyncResult As IAsyncResult) As ListTemplateResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  id: PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesUpdateAsync(UpdatePropertiesArg)
  nameWithType: FilesUserRoutes.PropertiesUpdateAsync(UpdatePropertiesArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5429
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties update route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task PropertiesUpdateAsync(UpdatePropertiesArg updatePropertiesArg)
    parameters:
    - id: updatePropertiesArg
      type: Dropbox.Api.FileProperties.UpdatePropertiesArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesUpdateAsync(updatePropertiesArg As UpdatePropertiesArg) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.UpdatePropertiesError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesUpdate(UpdatePropertiesArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesUpdate(UpdatePropertiesArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5444
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties update route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesUpdate(UpdatePropertiesArg updatePropertiesArg, AsyncCallback callback, object state = null)
    parameters:
    - id: updatePropertiesArg
      type: Dropbox.Api.FileProperties.UpdatePropertiesArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesUpdate(updatePropertiesArg As UpdatePropertiesArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate})
  id: PropertiesUpdateAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesUpdateAsync(String, IEnumerable<PropertyGroupUpdate>)
  nameWithType: FilesUserRoutes.PropertiesUpdateAsync(String, IEnumerable<PropertyGroupUpdate>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroupUpdate>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertiesUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5462
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties update route</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public Task PropertiesUpdateAsync(string path, IEnumerable<PropertyGroupUpdate> updatePropertyGroups)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: updatePropertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate}
      description: >-
        The property groups &quot;delta&quot; updates to

        apply.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function PropertiesUpdateAsync(path As String, updatePropertyGroups As IEnumerable(Of PropertyGroupUpdate)) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.UpdatePropertiesError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  nameWithType.vb: FilesUserRoutes.PropertiesUpdateAsync(String, IEnumerable(Of PropertyGroupUpdate))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroupUpdate))
  name.vb: PropertiesUpdateAsync(String, IEnumerable(Of PropertyGroupUpdate))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate},System.AsyncCallback,System.Object)
  id: BeginPropertiesUpdate(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesUpdate(String, IEnumerable<PropertyGroupUpdate>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesUpdate(String, IEnumerable<PropertyGroupUpdate>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroupUpdate>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginPropertiesUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5483
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties update route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public IAsyncResult BeginPropertiesUpdate(string path, IEnumerable<PropertyGroupUpdate> updatePropertyGroups, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: updatePropertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate}
      description: >-
        The property groups &quot;delta&quot; updates to

        apply.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Function BeginPropertiesUpdate(path As String, updatePropertyGroups As IEnumerable(Of PropertyGroupUpdate), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  nameWithType.vb: FilesUserRoutes.BeginPropertiesUpdate(String, IEnumerable(Of PropertyGroupUpdate), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroupUpdate), System.AsyncCallback, System.Object)
  name.vb: BeginPropertiesUpdate(String, IEnumerable(Of PropertyGroupUpdate), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate(System.IAsyncResult)
  id: EndPropertiesUpdate(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesUpdate(IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesUpdate(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndPropertiesUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5504
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties update route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated")]

      public void EndPropertiesUpdate(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: >-
      <Obsolete("This function is deprecated")>

      Public Sub EndPropertiesUpdate(asyncResult As IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.UpdatePropertiesError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(Dropbox.Api.Files.RestoreArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(Dropbox.Api.Files.RestoreArg)
  id: RestoreAsync(Dropbox.Api.Files.RestoreArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: RestoreAsync(RestoreArg)
  nameWithType: FilesUserRoutes.RestoreAsync(RestoreArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(Dropbox.Api.Files.RestoreArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: RestoreAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5522
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Restore a specific revision of a file to the given path.</p>\n"
  example: []
  syntax:
    content: public Task<FileMetadata> RestoreAsync(RestoreArg restoreArg)
    parameters:
    - id: restoreArg
      type: Dropbox.Api.Files.RestoreArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function RestoreAsync(restoreArg As RestoreArg) As Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RestoreError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(Dropbox.Api.Files.RestoreArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(Dropbox.Api.Files.RestoreArg,System.AsyncCallback,System.Object)
  id: BeginRestore(Dropbox.Api.Files.RestoreArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginRestore(RestoreArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginRestore(RestoreArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(Dropbox.Api.Files.RestoreArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginRestore
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5536
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the restore route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginRestore(RestoreArg restoreArg, AsyncCallback callback, object state = null)
    parameters:
    - id: restoreArg
      type: Dropbox.Api.Files.RestoreArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginRestore(restoreArg As RestoreArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(System.String,System.String)
  id: RestoreAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: RestoreAsync(String, String)
  nameWithType: FilesUserRoutes.RestoreAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: RestoreAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5552
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Restore a specific revision of a file to the given path.</p>\n"
  example: []
  syntax:
    content: public Task<FileMetadata> RestoreAsync(string path, string rev)
    parameters:
    - id: path
      type: System.String
      description: The path to save the restored file.
    - id: rev
      type: System.String
      description: The revision to restore.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function RestoreAsync(path As String, rev As String) As Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RestoreError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginRestore(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginRestore(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginRestore(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginRestore
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5571
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the restore route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginRestore(string path, string rev, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path to save the restored file.
    - id: rev
      type: System.String
      description: The revision to restore.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginRestore(path As String, rev As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore(System.IAsyncResult)
  id: EndRestore(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndRestore(IAsyncResult)
  nameWithType: FilesUserRoutes.EndRestore(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndRestore
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5591
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the restore route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public FileMetadata EndRestore(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FileMetadata
      description: The response to the send request
    content.vb: Public Function EndRestore(asyncResult As IAsyncResult) As FileMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RestoreError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  id: SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SaveUrlAsync(SaveUrlArg)
  nameWithType: FilesUserRoutes.SaveUrlAsync(SaveUrlArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SaveUrlAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5614
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Save the data from a specified URL into a file in user&apos;s Dropbox.</p>\n<p>Note that the transfer from the URL must complete within 5 minutes, or the\noperation will time out and the job will fail.</p>\n<p>If the given path already exists, the file will be renamed to avoid the\nconflict (e.g. myfile (1).txt).</p>\n"
  example: []
  syntax:
    content: public Task<SaveUrlResult> SaveUrlAsync(SaveUrlArg saveUrlArg)
    parameters:
    - id: saveUrlArg
      type: Dropbox.Api.Files.SaveUrlArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SaveUrlAsync(saveUrlArg As SaveUrlArg) As Task(Of SaveUrlResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveUrlError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg,System.AsyncCallback,System.Object)
  id: BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSaveUrl(SaveUrlArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSaveUrl(SaveUrlArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSaveUrl
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5628
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the save url route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginSaveUrl(SaveUrlArg saveUrlArg, AsyncCallback callback, object state = null)
    parameters:
    - id: saveUrlArg
      type: Dropbox.Api.Files.SaveUrlArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSaveUrl(saveUrlArg As SaveUrlArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(System.String,System.String)
  id: SaveUrlAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SaveUrlAsync(String, String)
  nameWithType: FilesUserRoutes.SaveUrlAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SaveUrlAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5648
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Save the data from a specified URL into a file in user&apos;s Dropbox.</p>\n<p>Note that the transfer from the URL must complete within 5 minutes, or the\noperation will time out and the job will fail.</p>\n<p>If the given path already exists, the file will be renamed to avoid the\nconflict (e.g. myfile (1).txt).</p>\n"
  example: []
  syntax:
    content: public Task<SaveUrlResult> SaveUrlAsync(string path, string url)
    parameters:
    - id: path
      type: System.String
      description: The path in Dropbox where the URL will be saved to.
    - id: url
      type: System.String
      description: The URL to be saved.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SaveUrlAsync(path As String, url As String) As Task(Of SaveUrlResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveUrlError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginSaveUrl(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSaveUrl(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSaveUrl(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSaveUrl
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5667
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the save url route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginSaveUrl(string path, string url, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path in Dropbox where the URL will be saved to.
    - id: url
      type: System.String
      description: The URL to be saved.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSaveUrl(path As String, url As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl(System.IAsyncResult)
  id: EndSaveUrl(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSaveUrl(IAsyncResult)
  nameWithType: FilesUserRoutes.EndSaveUrl(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndSaveUrl
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5687
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the save url route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public SaveUrlResult EndSaveUrl(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SaveUrlResult
      description: The response to the send request
    content.vb: Public Function EndSaveUrl(asyncResult As IAsyncResult) As SaveUrlResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveUrlError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  id: SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SaveUrlCheckJobStatusAsync(PollArg)
  nameWithType: FilesUserRoutes.SaveUrlCheckJobStatusAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SaveUrlCheckJobStatusAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5708
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Check the status of a <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)\" data-throw-if-not-resolved=\"false\"></xref> job.</p>\n"
  example: []
  syntax:
    content: public Task<SaveUrlJobStatus> SaveUrlCheckJobStatusAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SaveUrlCheckJobStatusAsync(pollArg As PollArg) As Task(Of SaveUrlJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSaveUrlCheckJobStatus(PollArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSaveUrlCheckJobStatus(PollArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSaveUrlCheckJobStatus
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5722
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the save url check job status route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginSaveUrlCheckJobStatus(PollArg pollArg, AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSaveUrlCheckJobStatus(pollArg As PollArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(System.String)
  id: SaveUrlCheckJobStatusAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SaveUrlCheckJobStatusAsync(String)
  nameWithType: FilesUserRoutes.SaveUrlCheckJobStatusAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SaveUrlCheckJobStatusAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5740
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Check the status of a <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)\" data-throw-if-not-resolved=\"false\"></xref> job.</p>\n"
  example: []
  syntax:
    content: public Task<SaveUrlJobStatus> SaveUrlCheckJobStatusAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SaveUrlCheckJobStatusAsync(asyncJobId As String) As Task(Of SaveUrlJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(System.String,System.AsyncCallback,System.Object)
  id: BeginSaveUrlCheckJobStatus(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSaveUrlCheckJobStatus(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSaveUrlCheckJobStatus(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSaveUrlCheckJobStatus
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5757
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the save url check job status route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginSaveUrlCheckJobStatus(string asyncJobId, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSaveUrlCheckJobStatus(asyncJobId As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus(System.IAsyncResult)
  id: EndSaveUrlCheckJobStatus(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSaveUrlCheckJobStatus(IAsyncResult)
  nameWithType: FilesUserRoutes.EndSaveUrlCheckJobStatus(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndSaveUrlCheckJobStatus
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5776
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the save url check job status\nroute to complete</p>\n"
  example: []
  syntax:
    content: public SaveUrlJobStatus EndSaveUrlCheckJobStatus(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SaveUrlJobStatus
      description: The response to the send request
    content.vb: Public Function EndSaveUrlCheckJobStatus(asyncResult As IAsyncResult) As SaveUrlJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(Dropbox.Api.Files.SearchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(Dropbox.Api.Files.SearchArg)
  id: SearchAsync(Dropbox.Api.Files.SearchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchAsync(SearchArg)
  nameWithType: FilesUserRoutes.SearchAsync(SearchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(Dropbox.Api.Files.SearchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SearchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5798
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Searches for files and folders.</p>\n<p>Note: Recent changes will be reflected in search results within a few seconds\nand older revisions of existing files may still match your query for up to a few\ndays.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use SearchV2Async instead.")]

      public Task<SearchResult> SearchAsync(SearchArg searchArg)
    parameters:
    - id: searchArg
      type: Dropbox.Api.Files.SearchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use SearchV2Async instead.")>

      Public Function SearchAsync(searchArg As SearchArg) As Task(Of SearchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use SearchV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(Dropbox.Api.Files.SearchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(Dropbox.Api.Files.SearchArg,System.AsyncCallback,System.Object)
  id: BeginSearch(Dropbox.Api.Files.SearchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearch(SearchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearch(SearchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(Dropbox.Api.Files.SearchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSearch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5813
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginSearchV2 instead.")]

      public IAsyncResult BeginSearch(SearchArg searchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: searchArg
      type: Dropbox.Api.Files.SearchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginSearchV2 instead.")>

      Public Function BeginSearch(searchArg As SearchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginSearchV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode)
  id: SearchAsync(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchAsync(String, String, UInt64, UInt64, SearchMode)
  nameWithType: FilesUserRoutes.SearchAsync(String, String, UInt64, UInt64, SearchMode)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(System.String, System.String, System.UInt64, System.UInt64, Dropbox.Api.Files.SearchMode)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SearchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5843
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Searches for files and folders.</p>\n<p>Note: Recent changes will be reflected in search results within a few seconds\nand older revisions of existing files may still match your query for up to a few\ndays.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use SearchV2Async instead.")]

      public Task<SearchResult> SearchAsync(string path, string query, ulong start = 0UL, ulong maxResults = 100UL, SearchMode mode = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        The path in the user&apos;s Dropbox to search. Should probably be a

        folder.
    - id: query
      type: System.String
      description: >-
        The string to search for. Query string may be rewritten to

        improve relevance of results. The string is split on spaces into multiple tokens.

        For file name searching, the last token is used for prefix matching (i.e. &quot;bat c&quot;

        matches &quot;bat cave&quot; but not &quot;batman car&quot;).
    - id: start
      type: System.UInt64
      description: >-
        The starting index within the search results (used for

        paging).
    - id: maxResults
      type: System.UInt64
      description: The maximum number of search results to return.
    - id: mode
      type: Dropbox.Api.Files.SearchMode
      description: >-
        The search mode (filename, filename_and_content, or

        deleted_filename). Note that searching file content is only available for Dropbox

        Business accounts.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use SearchV2Async instead.")>

      Public Function SearchAsync(path As String, query As String, start As ULong = 0UL, maxResults As ULong = 100UL, mode As SearchMode = Nothing) As Task(Of SearchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use SearchV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode,System.AsyncCallback,System.Object)
  id: BeginSearch(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearch(String, String, UInt64, UInt64, SearchMode, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearch(String, String, UInt64, UInt64, SearchMode, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(System.String, System.String, System.UInt64, System.UInt64, Dropbox.Api.Files.SearchMode, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSearch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5879
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginSearchV2 instead.")]

      public IAsyncResult BeginSearch(string path, string query, ulong start = 0UL, ulong maxResults = 100UL, SearchMode mode = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        The path in the user&apos;s Dropbox to search. Should probably be a

        folder.
    - id: query
      type: System.String
      description: >-
        The string to search for. Query string may be rewritten to

        improve relevance of results. The string is split on spaces into multiple tokens.

        For file name searching, the last token is used for prefix matching (i.e. &quot;bat c&quot;

        matches &quot;bat cave&quot; but not &quot;batman car&quot;).
    - id: start
      type: System.UInt64
      description: >-
        The starting index within the search results (used for

        paging).
    - id: maxResults
      type: System.UInt64
      description: The maximum number of search results to return.
    - id: mode
      type: Dropbox.Api.Files.SearchMode
      description: >-
        The search mode (filename, filename_and_content, or

        deleted_filename). Note that searching file content is only available for Dropbox

        Business accounts.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginSearchV2 instead.")>

      Public Function BeginSearch(path As String, query As String, start As ULong = 0UL, maxResults As ULong = 100UL, mode As SearchMode = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginSearchV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch(System.IAsyncResult)
  id: EndSearch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSearch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndSearch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndSearch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5906
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the search route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndSearchV2 instead.")]

      public SearchResult EndSearch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SearchResult
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndSearchV2 instead.")>

      Public Function EndSearch(asyncResult As IAsyncResult) As SearchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndSearchV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  id: SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchV2Async(SearchV2Arg)
  nameWithType: FilesUserRoutes.SearchV2Async(SearchV2Arg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SearchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5933
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Searches for files and folders.</p>\n<p>Note: <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>\nalong with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> can only\nbe used to retrieve a maximum of 10,000 matches.</p>\n<p>Recent changes may not immediately be reflected in search results due to a\nshort delay in indexing. Duplicate results may be returned across pages. Some\nresults may not be returned.</p>\n"
  example: []
  syntax:
    content: public Task<SearchV2Result> SearchV2Async(SearchV2Arg searchV2Arg)
    parameters:
    - id: searchV2Arg
      type: Dropbox.Api.Files.SearchV2Arg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchV2Async(searchV2Arg As SearchV2Arg) As Task(Of SearchV2Result)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(Dropbox.Api.Files.SearchV2Arg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(Dropbox.Api.Files.SearchV2Arg,System.AsyncCallback,System.Object)
  id: BeginSearchV2(Dropbox.Api.Files.SearchV2Arg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearchV2(SearchV2Arg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearchV2(SearchV2Arg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(Dropbox.Api.Files.SearchV2Arg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSearchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5947
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginSearchV2(SearchV2Arg searchV2Arg, AsyncCallback callback, object state = null)
    parameters:
    - id: searchV2Arg
      type: Dropbox.Api.Files.SearchV2Arg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearchV2(searchV2Arg As SearchV2Arg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean})
  id: SearchV2Async(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchV2Async(String, SearchOptions, SearchMatchFieldOptions, Nullable<Boolean>)
  nameWithType: FilesUserRoutes.SearchV2Async(String, SearchOptions, SearchMatchFieldOptions, Nullable<Boolean>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String, Dropbox.Api.Files.SearchOptions, Dropbox.Api.Files.SearchMatchFieldOptions, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SearchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5974
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Searches for files and folders.</p>\n<p>Note: <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>\nalong with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> can only\nbe used to retrieve a maximum of 10,000 matches.</p>\n<p>Recent changes may not immediately be reflected in search results due to a\nshort delay in indexing. Duplicate results may be returned across pages. Some\nresults may not be returned.</p>\n"
  example: []
  syntax:
    content: public Task<SearchV2Result> SearchV2Async(string query, SearchOptions options = null, SearchMatchFieldOptions matchFieldOptions = null, bool? includeHighlights = null)
    parameters:
    - id: query
      type: System.String
      description: >-
        The string to search for. May match across multiple fields

        based on the request arguments.
    - id: options
      type: Dropbox.Api.Files.SearchOptions
      description: Options for more targeted search results.
    - id: matchFieldOptions
      type: Dropbox.Api.Files.SearchMatchFieldOptions
      description: Options for search results match fields.
    - id: includeHighlights
      type: System.Nullable{System.Boolean}
      description: >-
        Deprecated and moved this option to

        SearchMatchFieldOptions.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchV2Async(query As String, options As SearchOptions = Nothing, matchFieldOptions As SearchMatchFieldOptions = Nothing, includeHighlights As Boolean? = Nothing) As Task(Of SearchV2Result)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.SearchV2Async(String, SearchOptions, SearchMatchFieldOptions, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String, Dropbox.Api.Files.SearchOptions, Dropbox.Api.Files.SearchMatchFieldOptions, System.Nullable(Of System.Boolean))
  name.vb: SearchV2Async(String, SearchOptions, SearchMatchFieldOptions, Nullable(Of Boolean))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  id: BeginSearchV2(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearchV2(String, SearchOptions, SearchMatchFieldOptions, Nullable<Boolean>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearchV2(String, SearchOptions, SearchMatchFieldOptions, Nullable<Boolean>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String, Dropbox.Api.Files.SearchOptions, Dropbox.Api.Files.SearchMatchFieldOptions, System.Nullable<System.Boolean>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSearchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6001
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginSearchV2(string query, SearchOptions options = null, SearchMatchFieldOptions matchFieldOptions = null, bool? includeHighlights = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: query
      type: System.String
      description: >-
        The string to search for. May match across multiple fields

        based on the request arguments.
    - id: options
      type: Dropbox.Api.Files.SearchOptions
      description: Options for more targeted search results.
    - id: matchFieldOptions
      type: Dropbox.Api.Files.SearchMatchFieldOptions
      description: Options for search results match fields.
    - id: includeHighlights
      type: System.Nullable{System.Boolean}
      description: >-
        Deprecated and moved this option to

        SearchMatchFieldOptions.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearchV2(query As String, options As SearchOptions = Nothing, matchFieldOptions As SearchMatchFieldOptions = Nothing, includeHighlights As Boolean? = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2*
  nameWithType.vb: FilesUserRoutes.BeginSearchV2(String, SearchOptions, SearchMatchFieldOptions, Nullable(Of Boolean), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String, Dropbox.Api.Files.SearchOptions, Dropbox.Api.Files.SearchMatchFieldOptions, System.Nullable(Of System.Boolean), System.AsyncCallback, System.Object)
  name.vb: BeginSearchV2(String, SearchOptions, SearchMatchFieldOptions, Nullable(Of Boolean), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2(System.IAsyncResult)
  id: EndSearchV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSearchV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndSearchV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndSearchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6025
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the search route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public SearchV2Result EndSearchV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SearchV2Result
      description: The response to the send request
    content.vb: Public Function EndSearchV2(asyncResult As IAsyncResult) As SearchV2Result
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  id: SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchContinueV2Async(SearchV2ContinueArg)
  nameWithType: FilesUserRoutes.SearchContinueV2Async(SearchV2ContinueArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SearchContinueV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6052
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Fetches the next page of search results returned from <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Note: <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>\nalong with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> can only\nbe used to retrieve a maximum of 10,000 matches.</p>\n<p>Recent changes may not immediately be reflected in search results due to a\nshort delay in indexing. Duplicate results may be returned across pages. Some\nresults may not be returned.</p>\n"
  example: []
  syntax:
    content: public Task<SearchV2Result> SearchContinueV2Async(SearchV2ContinueArg searchV2ContinueArg)
    parameters:
    - id: searchV2ContinueArg
      type: Dropbox.Api.Files.SearchV2ContinueArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchContinueV2Async(searchV2ContinueArg As SearchV2ContinueArg) As Task(Of SearchV2Result)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg,System.AsyncCallback,System.Object)
  id: BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearchContinueV2(SearchV2ContinueArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearchContinueV2(SearchV2ContinueArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSearchContinueV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6066
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search continue route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginSearchContinueV2(SearchV2ContinueArg searchV2ContinueArg, AsyncCallback callback, object state = null)
    parameters:
    - id: searchV2ContinueArg
      type: Dropbox.Api.Files.SearchV2ContinueArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearchContinueV2(searchV2ContinueArg As SearchV2ContinueArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(System.String)
  id: SearchContinueV2Async(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchContinueV2Async(String)
  nameWithType: FilesUserRoutes.SearchContinueV2Async(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: SearchContinueV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6091
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Fetches the next page of search results returned from <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Note: <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>\nalong with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> can only\nbe used to retrieve a maximum of 10,000 matches.</p>\n<p>Recent changes may not immediately be reflected in search results due to a\nshort delay in indexing. Duplicate results may be returned across pages. Some\nresults may not be returned.</p>\n"
  example: []
  syntax:
    content: public Task<SearchV2Result> SearchContinueV2Async(string cursor)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)" data-throw-if-not-resolved="false"></xref>. Used to fetch the

        next page of results.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchContinueV2Async(cursor As String) As Task(Of SearchV2Result)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(System.String,System.AsyncCallback,System.Object)
  id: BeginSearchContinueV2(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearchContinueV2(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearchContinueV2(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginSearchContinueV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6109
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search continue route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginSearchContinueV2(string cursor, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)" data-throw-if-not-resolved="false"></xref>. Used to fetch the

        next page of results.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearchContinueV2(cursor As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2(System.IAsyncResult)
  id: EndSearchContinueV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSearchContinueV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndSearchContinueV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndSearchContinueV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6127
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the search continue route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public SearchV2Result EndSearchContinueV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SearchV2Result
      description: The response to the send request
    content.vb: Public Function EndSearchContinueV2(asyncResult As IAsyncResult) As SearchV2Result
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync(Dropbox.Api.Files.AddTagArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync(Dropbox.Api.Files.AddTagArg)
  id: TagsAddAsync(Dropbox.Api.Files.AddTagArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: TagsAddAsync(AddTagArg)
  nameWithType: FilesUserRoutes.TagsAddAsync(AddTagArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync(Dropbox.Api.Files.AddTagArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: TagsAddAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6147
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Add a tag to an item. A tag is a string. The strings are automatically\nconverted to lowercase letters. No more than 20 tags can be added to a given\nitem.</p>\n"
  example: []
  syntax:
    content: public Task TagsAddAsync(AddTagArg addTagArg)
    parameters:
    - id: addTagArg
      type: Dropbox.Api.Files.AddTagArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function TagsAddAsync(addTagArg As AddTagArg) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.AddTagError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd(Dropbox.Api.Files.AddTagArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd(Dropbox.Api.Files.AddTagArg,System.AsyncCallback,System.Object)
  id: BeginTagsAdd(Dropbox.Api.Files.AddTagArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginTagsAdd(AddTagArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginTagsAdd(AddTagArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd(Dropbox.Api.Files.AddTagArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginTagsAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6161
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the tags add route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginTagsAdd(AddTagArg addTagArg, AsyncCallback callback, object state = null)
    parameters:
    - id: addTagArg
      type: Dropbox.Api.Files.AddTagArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginTagsAdd(addTagArg As AddTagArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync(System.String,System.String)
  id: TagsAddAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: TagsAddAsync(String, String)
  nameWithType: FilesUserRoutes.TagsAddAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: TagsAddAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6178
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Add a tag to an item. A tag is a string. The strings are automatically\nconverted to lowercase letters. No more than 20 tags can be added to a given\nitem.</p>\n"
  example: []
  syntax:
    content: public Task TagsAddAsync(string path, string tagText)
    parameters:
    - id: path
      type: System.String
      description: Path to the item to be tagged.
    - id: tagText
      type: System.String
      description: The value of the tag to add.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function TagsAddAsync(path As String, tagText As String) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.AddTagError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginTagsAdd(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginTagsAdd(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginTagsAdd(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginTagsAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6197
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the tags add route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginTagsAdd(string path, string tagText, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path to the item to be tagged.
    - id: tagText
      type: System.String
      description: The value of the tag to add.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginTagsAdd(path As String, tagText As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsAdd(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsAdd(System.IAsyncResult)
  id: EndTagsAdd(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndTagsAdd(IAsyncResult)
  nameWithType: FilesUserRoutes.EndTagsAdd(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsAdd(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndTagsAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6216
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the tags add route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndTagsAdd(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndTagsAdd(asyncResult As IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsAdd*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.AddTagError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync(Dropbox.Api.Files.GetTagsArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync(Dropbox.Api.Files.GetTagsArg)
  id: TagsGetAsync(Dropbox.Api.Files.GetTagsArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: TagsGetAsync(GetTagsArg)
  nameWithType: FilesUserRoutes.TagsGetAsync(GetTagsArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync(Dropbox.Api.Files.GetTagsArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: TagsGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6233
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get list of tags assigned to items.</p>\n"
  example: []
  syntax:
    content: public Task<GetTagsResult> TagsGetAsync(GetTagsArg getTagsArg)
    parameters:
    - id: getTagsArg
      type: Dropbox.Api.Files.GetTagsArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTagsResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function TagsGetAsync(getTagsArg As GetTagsArg) As Task(Of GetTagsResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.BaseTagError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet(Dropbox.Api.Files.GetTagsArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet(Dropbox.Api.Files.GetTagsArg,System.AsyncCallback,System.Object)
  id: BeginTagsGet(Dropbox.Api.Files.GetTagsArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginTagsGet(GetTagsArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginTagsGet(GetTagsArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet(Dropbox.Api.Files.GetTagsArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginTagsGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6247
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the tags get route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginTagsGet(GetTagsArg getTagsArg, AsyncCallback callback, object state = null)
    parameters:
    - id: getTagsArg
      type: Dropbox.Api.Files.GetTagsArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginTagsGet(getTagsArg As GetTagsArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync(System.Collections.Generic.IEnumerable{System.String})
  id: TagsGetAsync(System.Collections.Generic.IEnumerable{System.String})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: TagsGetAsync(IEnumerable<String>)
  nameWithType: FilesUserRoutes.TagsGetAsync(IEnumerable<String>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: TagsGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6262
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get list of tags assigned to items.</p>\n"
  example: []
  syntax:
    content: public Task<GetTagsResult> TagsGetAsync(IEnumerable<string> paths)
    parameters:
    - id: paths
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Path to the items.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTagsResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function TagsGetAsync(paths As IEnumerable(Of String)) As Task(Of GetTagsResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.BaseTagError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.TagsGetAsync(IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: TagsGetAsync(IEnumerable(Of String))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet(System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet(System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  id: BeginTagsGet(System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginTagsGet(IEnumerable<String>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginTagsGet(IEnumerable<String>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet(System.Collections.Generic.IEnumerable<System.String>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginTagsGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6278
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the tags get route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginTagsGet(IEnumerable<string> paths, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: paths
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Path to the items.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginTagsGet(paths As IEnumerable(Of String), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet*
  nameWithType.vb: FilesUserRoutes.BeginTagsGet(IEnumerable(Of String), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet(System.Collections.Generic.IEnumerable(Of System.String), System.AsyncCallback, System.Object)
  name.vb: BeginTagsGet(IEnumerable(Of String), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsGet(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsGet(System.IAsyncResult)
  id: EndTagsGet(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndTagsGet(IAsyncResult)
  nameWithType: FilesUserRoutes.EndTagsGet(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsGet(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndTagsGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6296
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the tags get route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public GetTagsResult EndTagsGet(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.GetTagsResult
      description: The response to the send request
    content.vb: Public Function EndTagsGet(asyncResult As IAsyncResult) As GetTagsResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsGet*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.BaseTagError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync(Dropbox.Api.Files.RemoveTagArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync(Dropbox.Api.Files.RemoveTagArg)
  id: TagsRemoveAsync(Dropbox.Api.Files.RemoveTagArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: TagsRemoveAsync(RemoveTagArg)
  nameWithType: FilesUserRoutes.TagsRemoveAsync(RemoveTagArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync(Dropbox.Api.Files.RemoveTagArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: TagsRemoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6315
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Remove a tag from an item.</p>\n"
  example: []
  syntax:
    content: public Task TagsRemoveAsync(RemoveTagArg removeTagArg)
    parameters:
    - id: removeTagArg
      type: Dropbox.Api.Files.RemoveTagArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function TagsRemoveAsync(removeTagArg As RemoveTagArg) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RemoveTagError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove(Dropbox.Api.Files.RemoveTagArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove(Dropbox.Api.Files.RemoveTagArg,System.AsyncCallback,System.Object)
  id: BeginTagsRemove(Dropbox.Api.Files.RemoveTagArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginTagsRemove(RemoveTagArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginTagsRemove(RemoveTagArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove(Dropbox.Api.Files.RemoveTagArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginTagsRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6329
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the tags remove route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginTagsRemove(RemoveTagArg removeTagArg, AsyncCallback callback, object state = null)
    parameters:
    - id: removeTagArg
      type: Dropbox.Api.Files.RemoveTagArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginTagsRemove(removeTagArg As RemoveTagArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync(System.String,System.String)
  id: TagsRemoveAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: TagsRemoveAsync(String, String)
  nameWithType: FilesUserRoutes.TagsRemoveAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: TagsRemoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6345
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Remove a tag from an item.</p>\n"
  example: []
  syntax:
    content: public Task TagsRemoveAsync(string path, string tagText)
    parameters:
    - id: path
      type: System.String
      description: Path to the item to tag.
    - id: tagText
      type: System.String
      description: The tag to remove.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function TagsRemoveAsync(path As String, tagText As String) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RemoveTagError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginTagsRemove(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginTagsRemove(String, String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginTagsRemove(String, String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginTagsRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6364
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the tags remove route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginTagsRemove(string path, string tagText, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path to the item to tag.
    - id: tagText
      type: System.String
      description: The tag to remove.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginTagsRemove(path As String, tagText As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsRemove(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsRemove(System.IAsyncResult)
  id: EndTagsRemove(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndTagsRemove(IAsyncResult)
  nameWithType: FilesUserRoutes.EndTagsRemove(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsRemove(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndTagsRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6384
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the tags remove route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndTagsRemove(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndTagsRemove(asyncResult As IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsRemove*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RemoveTagError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  id: UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UnlockFileBatchAsync(UnlockFileBatchArg)
  nameWithType: FilesUserRoutes.UnlockFileBatchAsync(UnlockFileBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UnlockFileBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6405
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Unlock the files at the given paths. A locked file can only be unlocked by\nthe lock holder or, if a business account, a team admin. A successful response\nindicates that the file has been unlocked. Returns a list of the unlocked file\npaths and their metadata after this operation.</p>\n"
  example: []
  syntax:
    content: public Task<LockFileBatchResult> UnlockFileBatchAsync(UnlockFileBatchArg unlockFileBatchArg)
    parameters:
    - id: unlockFileBatchArg
      type: Dropbox.Api.Files.UnlockFileBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UnlockFileBatchAsync(unlockFileBatchArg As UnlockFileBatchArg) As Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg,System.AsyncCallback,System.Object)
  id: BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUnlockFileBatch(UnlockFileBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUnlockFileBatch(UnlockFileBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUnlockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6419
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the unlock file batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUnlockFileBatch(UnlockFileBatchArg unlockFileBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: unlockFileBatchArg
      type: Dropbox.Api.Files.UnlockFileBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUnlockFileBatch(unlockFileBatchArg As UnlockFileBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg})
  id: UnlockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UnlockFileBatchAsync(IEnumerable<UnlockFileArg>)
  nameWithType: FilesUserRoutes.UnlockFileBatchAsync(IEnumerable<UnlockFileArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UnlockFileArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UnlockFileBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6440
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Unlock the files at the given paths. A locked file can only be unlocked by\nthe lock holder or, if a business account, a team admin. A successful response\nindicates that the file has been unlocked. Returns a list of the unlocked file\npaths and their metadata after this operation.</p>\n"
  example: []
  syntax:
    content: public Task<LockFileBatchResult> UnlockFileBatchAsync(IEnumerable<UnlockFileArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be unlocked. Duplicate path arguments in the batch are considered only

        once.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UnlockFileBatchAsync(entries As IEnumerable(Of UnlockFileArg)) As Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.UnlockFileBatchAsync(IEnumerable(Of UnlockFileArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UnlockFileArg))
  name.vb: UnlockFileBatchAsync(IEnumerable(Of UnlockFileArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg},System.AsyncCallback,System.Object)
  id: BeginUnlockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUnlockFileBatch(IEnumerable<UnlockFileArg>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUnlockFileBatch(IEnumerable<UnlockFileArg>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UnlockFileArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUnlockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6458
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the unlock file batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUnlockFileBatch(IEnumerable<UnlockFileArg> entries, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be unlocked. Duplicate path arguments in the batch are considered only

        once.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUnlockFileBatch(entries As IEnumerable(Of UnlockFileArg), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch*
  nameWithType.vb: FilesUserRoutes.BeginUnlockFileBatch(IEnumerable(Of UnlockFileArg), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UnlockFileArg), System.AsyncCallback, System.Object)
  name.vb: BeginUnlockFileBatch(IEnumerable(Of UnlockFileArg), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch(System.IAsyncResult)
  id: EndUnlockFileBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUnlockFileBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUnlockFileBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUnlockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6477
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the unlock file batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public LockFileBatchResult EndUnlockFileBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.LockFileBatchResult
      description: The response to the send request
    content.vb: Public Function EndUnlockFileBatch(asyncResult As IAsyncResult) As LockFileBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  id: UploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadAsync(UploadArg, Stream)
  nameWithType: FilesUserRoutes.UploadAsync(UploadArg, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6505
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a new file with the contents provided in the request.</p>\n<p>Do not use this to upload a file larger than 150 MB. Instead, create an\nupload session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public Task<FileMetadata> UploadAsync(UploadArg uploadArg, Stream body)
    parameters:
    - id: uploadArg
      type: Dropbox.Api.Files.UploadArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadAsync(uploadArg As UploadArg, body As Stream) As Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(Dropbox.Api.Files.UploadArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(Dropbox.Api.Files.UploadArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUpload(Dropbox.Api.Files.UploadArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUpload(UploadArg, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUpload(UploadArg, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(Dropbox.Api.Files.UploadArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6520
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUpload(UploadArg uploadArg, Stream body, AsyncCallback callback, object state = null)
    parameters:
    - id: uploadArg
      type: Dropbox.Api.Files.UploadArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUpload(uploadArg As UploadArg, body As Stream, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream)
  id: UploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadAsync(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean, String, Stream)
  nameWithType: FilesUserRoutes.UploadAsync(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean, String, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable<System.DateTime>, System.Boolean, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.Boolean, System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6569
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a new file with the contents provided in the request.</p>\n<p>Do not use this to upload a file larger than 150 MB. Instead, create an\nupload session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public Task<FileMetadata> UploadAsync(string path, WriteMode mode = null, bool autorename = false, DateTime? clientModified = null, bool mute = false, IEnumerable<PropertyGroup> propertyGroups = null, bool strictConflict = false, string contentHash = null, Stream body = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to save the file.
    - id: mode
      type: Dropbox.Api.Files.WriteMode
      description: Selects what to do if the file already exists.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, as determined by <code data-dev-comment-type="paramref" class="paramref">mode</code>, have the Dropbox server try to autorename the file to avoid

        conflict.
    - id: clientModified
      type: System.Nullable{System.DateTime}
      description: >-
        The value to store as the <code data-dev-comment-type="paramref" class="paramref">clientModified</code> timestamp. Dropbox automatically records the time at which

        the file was written to the Dropbox servers. It can also record an additional

        timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of

        when the file was actually created or modified.
    - id: mute
      type: System.Boolean
      description: >-
        Normally, users are made aware of any file modifications in

        their Dropbox account via notifications in the client software. If <code>true</code>,

        this tells the clients that this modification shouldn&apos;t result in a user

        notification.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: List of custom properties to add to file.
    - id: strictConflict
      type: System.Boolean
      description: >-
        Be more strict about how each <xref href="Dropbox.Api.Files.WriteMode" data-throw-if-not-resolved="false"></xref>

        detects conflict. For example, always return a conflict error when <code data-dev-comment-type="paramref" class="paramref">mode</code> = <xref href="Dropbox.Api.Files.WriteMode.Update" data-throw-if-not-resolved="false"></xref> and the given

        &quot;rev&quot; doesn&apos;t match the existing file&apos;s &quot;rev&quot;, even if the existing file has been

        deleted. This also forces a conflict even when the target path refers to a file

        with identical contents.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadAsync(path As String, mode As WriteMode = Nothing, autorename As Boolean = False, clientModified As Date? = Nothing, mute As Boolean = False, propertyGroups As IEnumerable(Of PropertyGroup) = Nothing, strictConflict As Boolean = False, contentHash As String = Nothing, body As Stream = Nothing) As Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.UploadAsync(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean, String, Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable(Of System.DateTime), System.Boolean, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.Boolean, System.String, System.IO.Stream)
  name.vb: UploadAsync(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean, String, Stream)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUpload(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean, String, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUpload(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean, String, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable<System.DateTime>, System.Boolean, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.Boolean, System.String, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6626
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUpload(string path, WriteMode mode = null, bool autorename = false, DateTime? clientModified = null, bool mute = false, IEnumerable<PropertyGroup> propertyGroups = null, bool strictConflict = false, string contentHash = null, Stream body = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to save the file.
    - id: mode
      type: Dropbox.Api.Files.WriteMode
      description: Selects what to do if the file already exists.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, as determined by <code data-dev-comment-type="paramref" class="paramref">mode</code>, have the Dropbox server try to autorename the file to avoid

        conflict.
    - id: clientModified
      type: System.Nullable{System.DateTime}
      description: >-
        The value to store as the <code data-dev-comment-type="paramref" class="paramref">clientModified</code> timestamp. Dropbox automatically records the time at which

        the file was written to the Dropbox servers. It can also record an additional

        timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of

        when the file was actually created or modified.
    - id: mute
      type: System.Boolean
      description: >-
        Normally, users are made aware of any file modifications in

        their Dropbox account via notifications in the client software. If <code>true</code>,

        this tells the clients that this modification shouldn&apos;t result in a user

        notification.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: List of custom properties to add to file.
    - id: strictConflict
      type: System.Boolean
      description: >-
        Be more strict about how each <xref href="Dropbox.Api.Files.WriteMode" data-throw-if-not-resolved="false"></xref>

        detects conflict. For example, always return a conflict error when <code data-dev-comment-type="paramref" class="paramref">mode</code> = <xref href="Dropbox.Api.Files.WriteMode.Update" data-throw-if-not-resolved="false"></xref> and the given

        &quot;rev&quot; doesn&apos;t match the existing file&apos;s &quot;rev&quot;, even if the existing file has been

        deleted. This also forces a conflict even when the target path refers to a file

        with identical contents.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUpload(path As String, mode As WriteMode = Nothing, autorename As Boolean = False, clientModified As Date? = Nothing, mute As Boolean = False, propertyGroups As IEnumerable(Of PropertyGroup) = Nothing, strictConflict As Boolean = False, contentHash As String = Nothing, body As Stream = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload*
  nameWithType.vb: FilesUserRoutes.BeginUpload(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean, String, Stream, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable(Of System.DateTime), System.Boolean, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.Boolean, System.String, System.IO.Stream, System.AsyncCallback, System.Object)
  name.vb: BeginUpload(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean, String, Stream, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload(System.IAsyncResult)
  id: EndUpload(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUpload(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUpload(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6659
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public FileMetadata EndUpload(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FileMetadata
      description: The response to the send request
    content.vb: Public Function EndUpload(asyncResult As IAsyncResult) As FileMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  id: UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionAppendV2Async(UploadSessionAppendArg, Stream)
  nameWithType: FilesUserRoutes.UploadSessionAppendV2Async(UploadSessionAppendArg, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionAppendV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6687
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Append more data to an upload session.</p>\n<p>When the parameter close is set, this call will close the session.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public Task UploadSessionAppendV2Async(UploadSessionAppendArg uploadSessionAppendArg, Stream body)
    parameters:
    - id: uploadSessionAppendArg
      type: Dropbox.Api.Files.UploadSessionAppendArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function UploadSessionAppendV2Async(uploadSessionAppendArg As UploadSessionAppendArg, body As Stream) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionAppendError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionAppendV2(UploadSessionAppendArg, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionAppendV2(UploadSessionAppendArg, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionAppendV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6702
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session append route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionAppendV2(UploadSessionAppendArg uploadSessionAppendArg, Stream body, AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionAppendArg
      type: Dropbox.Api.Files.UploadSessionAppendArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionAppendV2(uploadSessionAppendArg As UploadSessionAppendArg, body As Stream, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.String,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.String,System.IO.Stream)
  id: UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.String,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionAppendV2Async(UploadSessionCursor, Boolean, String, Stream)
  nameWithType: FilesUserRoutes.UploadSessionAppendV2Async(UploadSessionCursor, Boolean, String, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor, System.Boolean, System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionAppendV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6735
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Append more data to an upload session.</p>\n<p>When the parameter close is set, this call will close the session.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public Task UploadSessionAppendV2Async(UploadSessionCursor cursor, bool close = false, string contentHash = null, Stream body = null)
    parameters:
    - id: cursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: Contains the upload session ID and the offset.
    - id: close
      type: System.Boolean
      description: >-
        If true, the current session will be closed, at which point you

        won&apos;t be able to call <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>

        anymore with the current session.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function UploadSessionAppendV2Async(cursor As UploadSessionCursor, close As Boolean = False, contentHash As String = Nothing, body As Stream = Nothing) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionAppendError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionAppendV2(UploadSessionCursor, Boolean, String, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionAppendV2(UploadSessionCursor, Boolean, String, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor, System.Boolean, System.String, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionAppendV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6766
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session append route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionAppendV2(UploadSessionCursor cursor, bool close = false, string contentHash = null, Stream body = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: cursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: Contains the upload session ID and the offset.
    - id: close
      type: System.Boolean
      description: >-
        If true, the current session will be closed, at which point you

        won&apos;t be able to call <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>

        anymore with the current session.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionAppendV2(cursor As UploadSessionCursor, close As Boolean = False, contentHash As String = Nothing, body As Stream = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2(System.IAsyncResult)
  id: EndUploadSessionAppendV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionAppendV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionAppendV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUploadSessionAppendV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6789
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session append route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndUploadSessionAppendV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndUploadSessionAppendV2(asyncResult As IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionAppendError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream)
  id: UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionAppendAsync(UploadSessionCursor, Stream)
  nameWithType: FilesUserRoutes.UploadSessionAppendAsync(UploadSessionCursor, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionAppendAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6814
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Append more data to an upload session.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use UploadSessionAppendV2Async instead.")]

      public Task UploadSessionAppendAsync(UploadSessionCursor uploadSessionCursor, Stream body)
    parameters:
    - id: uploadSessionCursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated, please use UploadSessionAppendV2Async instead.")>

      Public Function UploadSessionAppendAsync(uploadSessionCursor As UploadSessionCursor, body As Stream) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionAppendError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use UploadSessionAppendV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionAppend(UploadSessionCursor, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionAppend(UploadSessionCursor, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionAppend
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6830
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session append route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginUploadSessionAppendV2 instead.")]

      public IAsyncResult BeginUploadSessionAppend(UploadSessionCursor uploadSessionCursor, Stream body, AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionCursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginUploadSessionAppendV2 instead.")>

      Public Function BeginUploadSessionAppend(uploadSessionCursor As UploadSessionCursor, body As Stream, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginUploadSessionAppendV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(System.String,System.UInt64,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(System.String,System.UInt64,System.IO.Stream)
  id: UploadSessionAppendAsync(System.String,System.UInt64,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionAppendAsync(String, UInt64, Stream)
  nameWithType: FilesUserRoutes.UploadSessionAppendAsync(String, UInt64, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(System.String, System.UInt64, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionAppendAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6859
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Append more data to an upload session.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use UploadSessionAppendV2Async instead.")]

      public Task UploadSessionAppendAsync(string sessionId, ulong offset, Stream body)
    parameters:
    - id: sessionId
      type: System.String
      description: The upload session ID (returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>).
    - id: offset
      type: System.UInt64
      description: >-
        Offset in bytes at which data should be appended. We use this

        to make sure upload data isn&apos;t lost or duplicated in the event of a network

        error.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: >-
      <Obsolete("This function is deprecated, please use UploadSessionAppendV2Async instead.")>

      Public Function UploadSessionAppendAsync(sessionId As String, offset As ULong, body As Stream) As Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionAppendError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use UploadSessionAppendV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(System.String,System.UInt64,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(System.String,System.UInt64,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionAppend(System.String,System.UInt64,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionAppend(String, UInt64, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionAppend(String, UInt64, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(System.String, System.UInt64, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionAppend
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6885
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session append route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginUploadSessionAppendV2 instead.")]

      public IAsyncResult BeginUploadSessionAppend(string sessionId, ulong offset, Stream body, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: sessionId
      type: System.String
      description: The upload session ID (returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>).
    - id: offset
      type: System.UInt64
      description: >-
        Offset in bytes at which data should be appended. We use this

        to make sure upload data isn&apos;t lost or duplicated in the event of a network

        error.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginUploadSessionAppendV2 instead.")>

      Public Function BeginUploadSessionAppend(sessionId As String, offset As ULong, body As Stream, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginUploadSessionAppendV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend(System.IAsyncResult)
  id: EndUploadSessionAppend(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionAppend(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionAppend(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUploadSessionAppend
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6907
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session append route to\ncomplete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndUploadSessionAppendV2 instead.")]

      public void EndUploadSessionAppend(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndUploadSessionAppendV2 instead.")>

      Public Sub EndUploadSessionAppend(asyncResult As IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionAppendError" data-throw-if-not-resolved="false"></xref>.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndUploadSessionAppendV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  id: UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishAsync(UploadSessionFinishArg, Stream)
  nameWithType: FilesUserRoutes.UploadSessionFinishAsync(UploadSessionFinishArg, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionFinishAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6935
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Finish an upload session and save the uploaded data to the given file\npath.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public Task<FileMetadata> UploadSessionFinishAsync(UploadSessionFinishArg uploadSessionFinishArg, Stream body)
    parameters:
    - id: uploadSessionFinishArg
      type: Dropbox.Api.Files.UploadSessionFinishArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishAsync(uploadSessionFinishArg As UploadSessionFinishArg, body As Stream) As Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionFinishError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinish(UploadSessionFinishArg, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinish(UploadSessionFinishArg, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionFinish
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6950
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionFinish(UploadSessionFinishArg uploadSessionFinishArg, Stream body, AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionFinishArg
      type: Dropbox.Api.Files.UploadSessionFinishArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinish(uploadSessionFinishArg As UploadSessionFinishArg, body As Stream, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.String,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.String,System.IO.Stream)
  id: UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.String,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishAsync(UploadSessionCursor, CommitInfo, String, Stream)
  nameWithType: FilesUserRoutes.UploadSessionFinishAsync(UploadSessionCursor, CommitInfo, String, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor, Dropbox.Api.Files.CommitInfo, System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionFinishAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6982
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Finish an upload session and save the uploaded data to the given file\npath.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public Task<FileMetadata> UploadSessionFinishAsync(UploadSessionCursor cursor, CommitInfo commit, string contentHash = null, Stream body = null)
    parameters:
    - id: cursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: Contains the upload session ID and the offset.
    - id: commit
      type: Dropbox.Api.Files.CommitInfo
      description: >-
        Contains the path and other optional modifiers for the

        commit.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishAsync(cursor As UploadSessionCursor, commit As CommitInfo, contentHash As String = Nothing, body As Stream = Nothing) As Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionFinishError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinish(UploadSessionCursor, CommitInfo, String, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinish(UploadSessionCursor, CommitInfo, String, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor, Dropbox.Api.Files.CommitInfo, System.String, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionFinish
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7011
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionFinish(UploadSessionCursor cursor, CommitInfo commit, string contentHash = null, Stream body = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: cursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: Contains the upload session ID and the offset.
    - id: commit
      type: Dropbox.Api.Files.CommitInfo
      description: >-
        Contains the path and other optional modifiers for the

        commit.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinish(cursor As UploadSessionCursor, commit As CommitInfo, contentHash As String = Nothing, body As Stream = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish(System.IAsyncResult)
  id: EndUploadSessionFinish(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionFinish(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionFinish(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUploadSessionFinish
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7035
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session finish route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public FileMetadata EndUploadSessionFinish(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FileMetadata
      description: The response to the send request
    content.vb: Public Function EndUploadSessionFinish(asyncResult As IAsyncResult) As FileMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionFinishError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  id: UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchAsync(UploadSessionFinishBatchArg)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchAsync(UploadSessionFinishBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionFinishBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7076
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>This route helps you commit many files at once into a user&apos;s Dropbox. Use\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nto upload file contents. We recommend uploading many files in parallel to increase\nthroughput. Once the file contents have been uploaded, rather than calling <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, use\nthis route to finish all your upload sessions in a single request.</p>\n<p><xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.UploadSessionAppendArg.Close\" data-throw-if-not-resolved=\"false\"></xref> needs to be true for the\nlast <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call.\nThe maximum size of a file one can upload to an upload session is 350 GB.</p>\n<p>This route will return a job_id immediately and do the async commit job in\nbackground. Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the job status.</p>\n<p>For the same account, this route should be executed serially. That means you\nshould not start the next job before current job finishes. We allow up to 1000\nentries in a single request.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use UploadSessionFinishBatchV2Async instead.")]

      public Task<UploadSessionFinishBatchLaunch> UploadSessionFinishBatchAsync(UploadSessionFinishBatchArg uploadSessionFinishBatchArg)
    parameters:
    - id: uploadSessionFinishBatchArg
      type: Dropbox.Api.Files.UploadSessionFinishBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use UploadSessionFinishBatchV2Async instead.")>

      Public Function UploadSessionFinishBatchAsync(uploadSessionFinishBatchArg As UploadSessionFinishBatchArg) As Task(Of UploadSessionFinishBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use UploadSessionFinishBatchV2Async instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatch(UploadSessionFinishBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatch(UploadSessionFinishBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionFinishBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7091
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginUploadSessionFinishBatchV2 instead.")]

      public IAsyncResult BeginUploadSessionFinishBatch(UploadSessionFinishBatchArg uploadSessionFinishBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionFinishBatchArg
      type: Dropbox.Api.Files.UploadSessionFinishBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginUploadSessionFinishBatchV2 instead.")>

      Public Function BeginUploadSessionFinishBatch(uploadSessionFinishBatchArg As UploadSessionFinishBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginUploadSessionFinishBatchV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  id: UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchAsync(IEnumerable<UploadSessionFinishArg>)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchAsync(IEnumerable<UploadSessionFinishArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UploadSessionFinishArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionFinishBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7129
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>This route helps you commit many files at once into a user&apos;s Dropbox. Use\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nto upload file contents. We recommend uploading many files in parallel to increase\nthroughput. Once the file contents have been uploaded, rather than calling <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, use\nthis route to finish all your upload sessions in a single request.</p>\n<p><xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.UploadSessionAppendArg.Close\" data-throw-if-not-resolved=\"false\"></xref> needs to be true for the\nlast <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call.\nThe maximum size of a file one can upload to an upload session is 350 GB.</p>\n<p>This route will return a job_id immediately and do the async commit job in\nbackground. Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the job status.</p>\n<p>For the same account, this route should be executed serially. That means you\nshould not start the next job before current job finishes. We allow up to 1000\nentries in a single request.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use UploadSessionFinishBatchV2Async instead.")]

      public Task<UploadSessionFinishBatchLaunch> UploadSessionFinishBatchAsync(IEnumerable<UploadSessionFinishArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}
      description: Commit information for each file in the batch.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: >-
      <Obsolete("This function is deprecated, please use UploadSessionFinishBatchV2Async instead.")>

      Public Function UploadSessionFinishBatchAsync(entries As IEnumerable(Of UploadSessionFinishArg)) As Task(Of UploadSessionFinishBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use UploadSessionFinishBatchV2Async instead.
  nameWithType.vb: FilesUserRoutes.UploadSessionFinishBatchAsync(IEnumerable(Of UploadSessionFinishArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UploadSessionFinishArg))
  name.vb: UploadSessionFinishBatchAsync(IEnumerable(Of UploadSessionFinishArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatch(IEnumerable<UploadSessionFinishArg>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatch(IEnumerable<UploadSessionFinishArg>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UploadSessionFinishArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionFinishBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7146
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch route.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use BeginUploadSessionFinishBatchV2 instead.")]

      public IAsyncResult BeginUploadSessionFinishBatch(IEnumerable<UploadSessionFinishArg> entries, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}
      description: Commit information for each file in the batch.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: >-
      <Obsolete("This function is deprecated, please use BeginUploadSessionFinishBatchV2 instead.")>

      Public Function BeginUploadSessionFinishBatch(entries As IEnumerable(Of UploadSessionFinishArg), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use BeginUploadSessionFinishBatchV2 instead.
  nameWithType.vb: FilesUserRoutes.BeginUploadSessionFinishBatch(IEnumerable(Of UploadSessionFinishArg), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UploadSessionFinishArg), System.AsyncCallback, System.Object)
  name.vb: BeginUploadSessionFinishBatch(IEnumerable(Of UploadSessionFinishArg), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch(System.IAsyncResult)
  id: EndUploadSessionFinishBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionFinishBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUploadSessionFinishBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7163
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session finish batch\nroute to complete</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This function is deprecated, please use EndUploadSessionFinishBatchV2 instead.")]

      public UploadSessionFinishBatchLaunch EndUploadSessionFinishBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
      description: The response to the send request
    content.vb: >-
      <Obsolete("This function is deprecated, please use EndUploadSessionFinishBatchV2 instead.")>

      Public Function EndUploadSessionFinishBatch(asyncResult As IAsyncResult) As UploadSessionFinishBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This function is deprecated, please use EndUploadSessionFinishBatchV2 instead.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  id: UploadSessionFinishBatchV2Async(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchV2Async(UploadSessionFinishBatchArg)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchV2Async(UploadSessionFinishBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionFinishBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7200
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>This route helps you commit many files at once into a user&apos;s Dropbox. Use\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nto upload file contents. We recommend uploading many files in parallel to increase\nthroughput. Once the file contents have been uploaded, rather than calling <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, use\nthis route to finish all your upload sessions in a single request.</p>\n<p><xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.UploadSessionAppendArg.Close\" data-throw-if-not-resolved=\"false\"></xref> needs to be true for the\nlast <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call\nof each upload session. The maximum size of a file one can upload to an upload\nsession is 350 GB.</p>\n<p>We allow up to 1000 entries in a single request.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public Task<UploadSessionFinishBatchResult> UploadSessionFinishBatchV2Async(UploadSessionFinishBatchArg uploadSessionFinishBatchArg)
    parameters:
    - id: uploadSessionFinishBatchArg
      type: Dropbox.Api.Files.UploadSessionFinishBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishBatchV2Async(uploadSessionFinishBatchArg As UploadSessionFinishBatchArg) As Task(Of UploadSessionFinishBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatchV2(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatchV2(UploadSessionFinishBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatchV2(UploadSessionFinishBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2(Dropbox.Api.Files.UploadSessionFinishBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionFinishBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7214
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionFinishBatchV2(UploadSessionFinishBatchArg uploadSessionFinishBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionFinishBatchArg
      type: Dropbox.Api.Files.UploadSessionFinishBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinishBatchV2(uploadSessionFinishBatchArg As UploadSessionFinishBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  id: UploadSessionFinishBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchV2Async(IEnumerable<UploadSessionFinishArg>)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchV2Async(IEnumerable<UploadSessionFinishArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UploadSessionFinishArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionFinishBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7246
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>This route helps you commit many files at once into a user&apos;s Dropbox. Use\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nto upload file contents. We recommend uploading many files in parallel to increase\nthroughput. Once the file contents have been uploaded, rather than calling <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, use\nthis route to finish all your upload sessions in a single request.</p>\n<p><xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.UploadSessionAppendArg.Close\" data-throw-if-not-resolved=\"false\"></xref> needs to be true for the\nlast <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call\nof each upload session. The maximum size of a file one can upload to an upload\nsession is 350 GB.</p>\n<p>We allow up to 1000 entries in a single request.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public Task<UploadSessionFinishBatchResult> UploadSessionFinishBatchV2Async(IEnumerable<UploadSessionFinishArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}
      description: Commit information for each file in the batch.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishBatchV2Async(entries As IEnumerable(Of UploadSessionFinishArg)) As Task(Of UploadSessionFinishBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async*
  nameWithType.vb: FilesUserRoutes.UploadSessionFinishBatchV2Async(IEnumerable(Of UploadSessionFinishArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UploadSessionFinishArg))
  name.vb: UploadSessionFinishBatchV2Async(IEnumerable(Of UploadSessionFinishArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatchV2(IEnumerable<UploadSessionFinishArg>, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatchV2(IEnumerable<UploadSessionFinishArg>, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UploadSessionFinishArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionFinishBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7262
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionFinishBatchV2(IEnumerable<UploadSessionFinishArg> entries, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}
      description: Commit information for each file in the batch.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinishBatchV2(entries As IEnumerable(Of UploadSessionFinishArg), callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2*
  nameWithType.vb: FilesUserRoutes.BeginUploadSessionFinishBatchV2(IEnumerable(Of UploadSessionFinishArg), AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UploadSessionFinishArg), System.AsyncCallback, System.Object)
  name.vb: BeginUploadSessionFinishBatchV2(IEnumerable(Of UploadSessionFinishArg), AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchV2(System.IAsyncResult)
  id: EndUploadSessionFinishBatchV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionFinishBatchV2(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatchV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUploadSessionFinishBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7278
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session finish batch\nroute to complete</p>\n"
  example: []
  syntax:
    content: public UploadSessionFinishBatchResult EndUploadSessionFinishBatchV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.UploadSessionFinishBatchResult
      description: The response to the send request
    content.vb: Public Function EndUploadSessionFinishBatchV2(asyncResult As IAsyncResult) As UploadSessionFinishBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionFinishBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7300
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf success, it returns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<UploadSessionFinishBatchJobStatus> UploadSessionFinishBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishBatchCheckAsync(pollArg As PollArg) As Task(Of UploadSessionFinishBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatchCheck(PollArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatchCheck(PollArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionFinishBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7315
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch check\nroute.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionFinishBatchCheck(PollArg pollArg, AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinishBatchCheck(pollArg As PollArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(System.String)
  id: UploadSessionFinishBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionFinishBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7334
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf success, it returns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public Task<UploadSessionFinishBatchJobStatus> UploadSessionFinishBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishBatchCheckAsync(asyncJobId As String) As Task(Of UploadSessionFinishBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatchCheck(String, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatchCheck(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionFinishBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7352
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch check\nroute.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionFinishBatchCheck(string asyncJobId, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinishBatchCheck(asyncJobId As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  id: EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionFinishBatchCheck(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatchCheck(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUploadSessionFinishBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7371
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session finish batch\ncheck route to complete</p>\n"
  example: []
  syntax:
    content: public UploadSessionFinishBatchJobStatus EndUploadSessionFinishBatchCheck(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
      description: The response to the send request
    content.vb: Public Function EndUploadSessionFinishBatchCheck(asyncResult As IAsyncResult) As UploadSessionFinishBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  id: UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionStartAsync(UploadSessionStartArg, Stream)
  nameWithType: FilesUserRoutes.UploadSessionStartAsync(UploadSessionStartArg, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionStartAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7437
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Upload sessions allow you to upload a single file in one or more requests,\nfor example where the size of the file is greater than 150 MB.  This call starts a\nnew upload session with the given data. You can then use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> to\nadd more data and <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> to save\nall the data to a file in Dropbox.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>An upload session can be used for a maximum of 7 days. Attempting to use an\n<xref href=\"Dropbox.Api.Files.UploadSessionStartResult.SessionId\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nmore than 7 days after its creation will return a <xref href=\"Dropbox.Api.Files.UploadSessionLookupError.NotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n<p>By default, upload sessions require you to send content of the file in\nsequential order via consecutive <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> calls.\nFor better performance, you can instead optionally use a <xref href=\"Dropbox.Api.Files.UploadSessionType.Concurrent\" data-throw-if-not-resolved=\"false\"></xref> upload session. To start a\nnew concurrent session, set <xref href=\"Dropbox.Api.Files.UploadSessionStartArg.SessionType\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"Dropbox.Api.Files.UploadSessionType.Concurrent\" data-throw-if-not-resolved=\"false\"></xref>. After that, you can send\nfile data in concurrent <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nrequests. Finally finish the session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>There are couple of constraints with concurrent sessions to make them work.\nYou can not send data with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call,\nonly with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call.\nAlso data uploaded in <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call\nmust be multiple of 4194304 bytes (except for last <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> with\n<xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> to <code>true</code>, that\nmay contain any remaining data).</p>\n"
  example: []
  syntax:
    content: public Task<UploadSessionStartResult> UploadSessionStartAsync(UploadSessionStartArg uploadSessionStartArg, Stream body)
    parameters:
    - id: uploadSessionStartArg
      type: Dropbox.Api.Files.UploadSessionStartArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionStartAsync(uploadSessionStartArg As UploadSessionStartArg, body As Stream) As Task(Of UploadSessionStartResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionStartError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionStart(UploadSessionStartArg, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionStart(UploadSessionStartArg, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionStart
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7452
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session start route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionStart(UploadSessionStartArg uploadSessionStartArg, Stream body, AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionStartArg
      type: Dropbox.Api.Files.UploadSessionStartArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionStart(uploadSessionStartArg As UploadSessionStartArg, body As Stream, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.String,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.String,System.IO.Stream)
  id: UploadSessionStartAsync(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.String,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionStartAsync(Boolean, UploadSessionType, String, Stream)
  nameWithType: FilesUserRoutes.UploadSessionStartAsync(Boolean, UploadSessionType, String, Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(System.Boolean, Dropbox.Api.Files.UploadSessionType, System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionStartAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7525
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Upload sessions allow you to upload a single file in one or more requests,\nfor example where the size of the file is greater than 150 MB.  This call starts a\nnew upload session with the given data. You can then use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> to\nadd more data and <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> to save\nall the data to a file in Dropbox.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>An upload session can be used for a maximum of 7 days. Attempting to use an\n<xref href=\"Dropbox.Api.Files.UploadSessionStartResult.SessionId\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nmore than 7 days after its creation will return a <xref href=\"Dropbox.Api.Files.UploadSessionLookupError.NotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n<p>By default, upload sessions require you to send content of the file in\nsequential order via consecutive <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> calls.\nFor better performance, you can instead optionally use a <xref href=\"Dropbox.Api.Files.UploadSessionType.Concurrent\" data-throw-if-not-resolved=\"false\"></xref> upload session. To start a\nnew concurrent session, set <xref href=\"Dropbox.Api.Files.UploadSessionStartArg.SessionType\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"Dropbox.Api.Files.UploadSessionType.Concurrent\" data-throw-if-not-resolved=\"false\"></xref>. After that, you can send\nfile data in concurrent <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nrequests. Finally finish the session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>There are couple of constraints with concurrent sessions to make them work.\nYou can not send data with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call,\nonly with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call.\nAlso data uploaded in <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call\nmust be multiple of 4194304 bytes (except for last <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> with\n<xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> to <code>true</code>, that\nmay contain any remaining data).</p>\n"
  example: []
  syntax:
    content: public Task<UploadSessionStartResult> UploadSessionStartAsync(bool close = false, UploadSessionType sessionType = null, string contentHash = null, Stream body = null)
    parameters:
    - id: close
      type: System.Boolean
      description: >-
        If true, the current session will be closed, at which point you

        won&apos;t be able to call <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>

        anymore with the current session.
    - id: sessionType
      type: Dropbox.Api.Files.UploadSessionType
      description: >-
        Type of upload session you want to start. If not

        specified, default is <xref href="Dropbox.Api.Files.UploadSessionType.Sequential" data-throw-if-not-resolved="false"></xref>.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionStartAsync(close As Boolean = False, sessionType As UploadSessionType = Nothing, contentHash As String = Nothing, body As Stream = Nothing) As Task(Of UploadSessionStartResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionStartError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionStart(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.String,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionStart(Boolean, UploadSessionType, String, Stream, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionStart(Boolean, UploadSessionType, String, Stream, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(System.Boolean, Dropbox.Api.Files.UploadSessionType, System.String, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionStart
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7558
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session start route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionStart(bool close = false, UploadSessionType sessionType = null, string contentHash = null, Stream body = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: close
      type: System.Boolean
      description: >-
        If true, the current session will be closed, at which point you

        won&apos;t be able to call <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>

        anymore with the current session.
    - id: sessionType
      type: Dropbox.Api.Files.UploadSessionType
      description: >-
        Type of upload session you want to start. If not

        specified, default is <xref href="Dropbox.Api.Files.UploadSessionType.Sequential" data-throw-if-not-resolved="false"></xref>.
    - id: contentHash
      type: System.String
      description: >-
        A hash of the file content uploaded in this call. If

        provided and the uploaded content does not match this hash, an error will be

        returned. For more information see our <a href="https://www.dropbox.com/developers/reference/content-hash">Content hash</a>

        page.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionStart(close As Boolean = False, sessionType As UploadSessionType = Nothing, contentHash As String = Nothing, body As Stream = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart(System.IAsyncResult)
  id: EndUploadSessionStart(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionStart(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionStart(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUploadSessionStart
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7582
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session start route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public UploadSessionStartResult EndUploadSessionStart(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.UploadSessionStartResult
      description: The response to the send request
    content.vb: Public Function EndUploadSessionStart(asyncResult As IAsyncResult) As UploadSessionStartResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionStartError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync(Dropbox.Api.Files.UploadSessionStartBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync(Dropbox.Api.Files.UploadSessionStartBatchArg)
  id: UploadSessionStartBatchAsync(Dropbox.Api.Files.UploadSessionStartBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionStartBatchAsync(UploadSessionStartBatchArg)
  nameWithType: FilesUserRoutes.UploadSessionStartBatchAsync(UploadSessionStartBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync(Dropbox.Api.Files.UploadSessionStartBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionStartBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7600
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>This route starts batch of upload_sessions. Please refer to\n`upload_session/start` usage.</p>\n"
  example: []
  syntax:
    content: public Task<UploadSessionStartBatchResult> UploadSessionStartBatchAsync(UploadSessionStartBatchArg uploadSessionStartBatchArg)
    parameters:
    - id: uploadSessionStartBatchArg
      type: Dropbox.Api.Files.UploadSessionStartBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionStartBatchAsync(uploadSessionStartBatchArg As UploadSessionStartBatchArg) As Task(Of UploadSessionStartBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch(Dropbox.Api.Files.UploadSessionStartBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch(Dropbox.Api.Files.UploadSessionStartBatchArg,System.AsyncCallback,System.Object)
  id: BeginUploadSessionStartBatch(Dropbox.Api.Files.UploadSessionStartBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionStartBatch(UploadSessionStartBatchArg, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionStartBatch(UploadSessionStartBatchArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch(Dropbox.Api.Files.UploadSessionStartBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionStartBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7614
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session start batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionStartBatch(UploadSessionStartBatchArg uploadSessionStartBatchArg, AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionStartBatchArg
      type: Dropbox.Api.Files.UploadSessionStartBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionStartBatch(uploadSessionStartBatchArg As UploadSessionStartBatchArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync(System.UInt64,Dropbox.Api.Files.UploadSessionType)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync(System.UInt64,Dropbox.Api.Files.UploadSessionType)
  id: UploadSessionStartBatchAsync(System.UInt64,Dropbox.Api.Files.UploadSessionType)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionStartBatchAsync(UInt64, UploadSessionType)
  nameWithType: FilesUserRoutes.UploadSessionStartBatchAsync(UInt64, UploadSessionType)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync(System.UInt64, Dropbox.Api.Files.UploadSessionType)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: UploadSessionStartBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7631
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>This route starts batch of upload_sessions. Please refer to\n`upload_session/start` usage.</p>\n"
  example: []
  syntax:
    content: public Task<UploadSessionStartBatchResult> UploadSessionStartBatchAsync(ulong numSessions, UploadSessionType sessionType = null)
    parameters:
    - id: numSessions
      type: System.UInt64
      description: The number of upload sessions to start.
    - id: sessionType
      type: Dropbox.Api.Files.UploadSessionType
      description: >-
        Type of upload session you want to start. If not

        specified, default is <xref href="Dropbox.Api.Files.UploadSessionType.Sequential" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionStartBatchAsync(numSessions As ULong, sessionType As UploadSessionType = Nothing) As Task(Of UploadSessionStartBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch(System.UInt64,Dropbox.Api.Files.UploadSessionType,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch(System.UInt64,Dropbox.Api.Files.UploadSessionType,System.AsyncCallback,System.Object)
  id: BeginUploadSessionStartBatch(System.UInt64,Dropbox.Api.Files.UploadSessionType,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionStartBatch(UInt64, UploadSessionType, AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionStartBatch(UInt64, UploadSessionType, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch(System.UInt64, Dropbox.Api.Files.UploadSessionType, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginUploadSessionStartBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7652
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session start batch route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginUploadSessionStartBatch(ulong numSessions, UploadSessionType sessionType = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: numSessions
      type: System.UInt64
      description: The number of upload sessions to start.
    - id: sessionType
      type: Dropbox.Api.Files.UploadSessionType
      description: >-
        Type of upload session you want to start. If not

        specified, default is <xref href="Dropbox.Api.Files.UploadSessionType.Sequential" data-throw-if-not-resolved="false"></xref>.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionStartBatch(numSessions As ULong, sessionType As UploadSessionType = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStartBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStartBatch(System.IAsyncResult)
  id: EndUploadSessionStartBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionStartBatch(IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionStartBatch(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStartBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndUploadSessionStartBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7670
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session start batch\nroute to complete</p>\n"
  example: []
  syntax:
    content: public UploadSessionStartBatchResult EndUploadSessionStartBatch(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.UploadSessionStartBatchResult
      description: The response to the send request
    content.vb: Public Function EndUploadSessionStartBatch(asyncResult As IAsyncResult) As UploadSessionStartBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStartBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Dropbox.Api.Files
  commentId: N:Dropbox.Api.Files
  name: Dropbox.Api.Files
  nameWithType: Dropbox.Api.Files
  fullName: Dropbox.Api.Files
- uid: Dropbox.Api.Files.Routes
  commentId: N:Dropbox.Api.Files.Routes
  name: Dropbox.Api.Files.Routes
  nameWithType: Dropbox.Api.Files.Routes
  fullName: Dropbox.Api.Files.Routes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dropbox.Api.Files.AlphaGetMetadataError
  commentId: T:Dropbox.Api.Files.AlphaGetMetadataError
  parent: Dropbox.Api.Files
  name: AlphaGetMetadataError
  nameWithType: AlphaGetMetadataError
  fullName: Dropbox.Api.Files.AlphaGetMetadataError
- uid: Dropbox.Api.ApiException`1
  commentId: T:Dropbox.Api.ApiException`1
  name: ApiException<TError>
  nameWithType: ApiException<TError>
  fullName: Dropbox.Api.ApiException<TError>
  nameWithType.vb: ApiException(Of TError)
  fullName.vb: Dropbox.Api.ApiException(Of TError)
  name.vb: ApiException(Of TError)
  spec.csharp:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: <
    nameWithType: <
    fullName: <
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync
  name: AlphaGetMetadataAsync
  nameWithType: FilesUserRoutes.AlphaGetMetadataAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync
- uid: Dropbox.Api.Files.AlphaGetMetadataArg
  commentId: T:Dropbox.Api.Files.AlphaGetMetadataArg
  parent: Dropbox.Api.Files
  name: AlphaGetMetadataArg
  nameWithType: AlphaGetMetadataArg
  fullName: Dropbox.Api.Files.AlphaGetMetadataArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Metadata>
  nameWithType: Task<Metadata>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.Metadata>
  nameWithType.vb: Task(Of Metadata)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.Metadata)
  name.vb: Task(Of Metadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.Metadata
    name: Metadata
    nameWithType: Metadata
    fullName: Dropbox.Api.Files.Metadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.Metadata
    name: Metadata
    nameWithType: Metadata
    fullName: Dropbox.Api.Files.Metadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata
  name: BeginAlphaGetMetadata
  nameWithType: FilesUserRoutes.BeginAlphaGetMetadata
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: Dropbox.Api.Files.FileMetadata.MediaInfo
  commentId: P:Dropbox.Api.Files.FileMetadata.MediaInfo
  isExternal: true
- uid: Dropbox.Api.Files.DeletedMetadata
  commentId: T:Dropbox.Api.Files.DeletedMetadata
  parent: Dropbox.Api.Files
  name: DeletedMetadata
  nameWithType: DeletedMetadata
  fullName: Dropbox.Api.Files.DeletedMetadata
- uid: Dropbox.Api.Files.LookupError.NotFound
  commentId: T:Dropbox.Api.Files.LookupError.NotFound
  parent: Dropbox.Api.Files
  name: LookupError.NotFound
  nameWithType: LookupError.NotFound
  fullName: Dropbox.Api.Files.LookupError.NotFound
- uid: Dropbox.Api.Files.FileMetadata.PropertyGroups
  commentId: P:Dropbox.Api.Files.FileMetadata.PropertyGroups
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Dropbox.Api.FileProperties.TemplateFilterBase
  commentId: T:Dropbox.Api.FileProperties.TemplateFilterBase
  parent: Dropbox.Api.FileProperties
  name: TemplateFilterBase
  nameWithType: TemplateFilterBase
  fullName: Dropbox.Api.FileProperties.TemplateFilterBase
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.FileProperties
  commentId: N:Dropbox.Api.FileProperties
  name: Dropbox.Api.FileProperties
  nameWithType: Dropbox.Api.FileProperties
  fullName: Dropbox.Api.FileProperties
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata
  name: EndAlphaGetMetadata
  nameWithType: FilesUserRoutes.EndAlphaGetMetadata
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata
- uid: Dropbox.Api.Files.Metadata
  commentId: T:Dropbox.Api.Files.Metadata
  parent: Dropbox.Api.Files
  name: Metadata
  nameWithType: Metadata
  fullName: Dropbox.Api.Files.Metadata
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  isExternal: true
- uid: Dropbox.Api.Files.UploadError
  commentId: T:Dropbox.Api.Files.UploadError
  parent: Dropbox.Api.Files
  name: UploadError
  nameWithType: UploadError
  fullName: Dropbox.Api.Files.UploadError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync
  name: AlphaUploadAsync
  nameWithType: FilesUserRoutes.AlphaUploadAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync
- uid: Dropbox.Api.Files.UploadArg
  commentId: T:Dropbox.Api.Files.UploadArg
  parent: Dropbox.Api.Files
  name: UploadArg
  nameWithType: UploadArg
  fullName: Dropbox.Api.Files.UploadArg
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<FileMetadata>
  nameWithType: Task<FileMetadata>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.FileMetadata>
  nameWithType.vb: Task(Of FileMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.FileMetadata)
  name.vb: Task(Of FileMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload
  name: BeginAlphaUpload
  nameWithType: FilesUserRoutes.BeginAlphaUpload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload
- uid: Dropbox.Api.Files.WriteMode
  commentId: T:Dropbox.Api.Files.WriteMode
  parent: Dropbox.Api.Files
  name: WriteMode
  nameWithType: WriteMode
  fullName: Dropbox.Api.Files.WriteMode
- uid: Dropbox.Api.Files.WriteMode.Update
  commentId: T:Dropbox.Api.Files.WriteMode.Update
  parent: Dropbox.Api.Files
  name: WriteMode.Update
  nameWithType: WriteMode.Update
  fullName: Dropbox.Api.Files.WriteMode.Update
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
  commentId: T:System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PropertyGroup>
  nameWithType: IEnumerable<PropertyGroup>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>
  nameWithType.vb: IEnumerable(Of PropertyGroup)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup)
  name.vb: IEnumerable(Of PropertyGroup)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.PropertyGroup
    name: PropertyGroup
    nameWithType: PropertyGroup
    fullName: Dropbox.Api.FileProperties.PropertyGroup
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.PropertyGroup
    name: PropertyGroup
    nameWithType: PropertyGroup
    fullName: Dropbox.Api.FileProperties.PropertyGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload
  name: EndAlphaUpload
  nameWithType: FilesUserRoutes.EndAlphaUpload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload
- uid: Dropbox.Api.Files.FileMetadata
  commentId: T:Dropbox.Api.Files.FileMetadata
  parent: Dropbox.Api.Files
  name: FileMetadata
  nameWithType: FileMetadata
  fullName: Dropbox.Api.Files.FileMetadata
- uid: Dropbox.Api.Files.RelocationError
  commentId: T:Dropbox.Api.Files.RelocationError
  parent: Dropbox.Api.Files
  name: RelocationError
  nameWithType: RelocationError
  fullName: Dropbox.Api.Files.RelocationError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async
  name: CopyV2Async
  nameWithType: FilesUserRoutes.CopyV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async
- uid: Dropbox.Api.Files.RelocationArg
  commentId: T:Dropbox.Api.Files.RelocationArg
  parent: Dropbox.Api.Files
  name: RelocationArg
  nameWithType: RelocationArg
  fullName: Dropbox.Api.Files.RelocationArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RelocationResult>
  nameWithType: Task<RelocationResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationResult>
  nameWithType.vb: Task(Of RelocationResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationResult)
  name.vb: Task(Of RelocationResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationResult
    name: RelocationResult
    nameWithType: RelocationResult
    fullName: Dropbox.Api.Files.RelocationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationResult
    name: RelocationResult
    nameWithType: RelocationResult
    fullName: Dropbox.Api.Files.RelocationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2
  name: BeginCopyV2
  nameWithType: FilesUserRoutes.BeginCopyV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2
  name: EndCopyV2
  nameWithType: FilesUserRoutes.EndCopyV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2
- uid: Dropbox.Api.Files.RelocationResult
  commentId: T:Dropbox.Api.Files.RelocationResult
  parent: Dropbox.Api.Files
  name: RelocationResult
  nameWithType: RelocationResult
  fullName: Dropbox.Api.Files.RelocationResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync
  name: CopyAsync
  nameWithType: FilesUserRoutes.CopyAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy
  name: BeginCopy
  nameWithType: FilesUserRoutes.BeginCopy
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy
  name: EndCopy
  nameWithType: FilesUserRoutes.EndCopy
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async
  name: CopyBatchV2Async
  nameWithType: FilesUserRoutes.CopyBatchV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async
- uid: Dropbox.Api.Files.RelocationBatchArgBase
  commentId: T:Dropbox.Api.Files.RelocationBatchArgBase
  parent: Dropbox.Api.Files
  name: RelocationBatchArgBase
  nameWithType: RelocationBatchArgBase
  fullName: Dropbox.Api.Files.RelocationBatchArgBase
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RelocationBatchV2Launch>
  nameWithType: Task<RelocationBatchV2Launch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationBatchV2Launch>
  nameWithType.vb: Task(Of RelocationBatchV2Launch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationBatchV2Launch)
  name.vb: Task(Of RelocationBatchV2Launch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationBatchV2Launch
    name: RelocationBatchV2Launch
    nameWithType: RelocationBatchV2Launch
    fullName: Dropbox.Api.Files.RelocationBatchV2Launch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationBatchV2Launch
    name: RelocationBatchV2Launch
    nameWithType: RelocationBatchV2Launch
    fullName: Dropbox.Api.Files.RelocationBatchV2Launch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2
  name: BeginCopyBatchV2
  nameWithType: FilesUserRoutes.BeginCopyBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2
- uid: Dropbox.Api.Files.RelocationPath
  commentId: T:Dropbox.Api.Files.RelocationPath
  parent: Dropbox.Api.Files
  name: RelocationPath
  nameWithType: RelocationPath
  fullName: Dropbox.Api.Files.RelocationPath
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
  commentId: T:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RelocationPath>
  nameWithType: IEnumerable<RelocationPath>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>
  nameWithType.vb: IEnumerable(Of RelocationPath)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath)
  name.vb: IEnumerable(Of RelocationPath)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationPath
    name: RelocationPath
    nameWithType: RelocationPath
    fullName: Dropbox.Api.Files.RelocationPath
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationPath
    name: RelocationPath
    nameWithType: RelocationPath
    fullName: Dropbox.Api.Files.RelocationPath
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2
  name: EndCopyBatchV2
  nameWithType: FilesUserRoutes.EndCopyBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2
- uid: Dropbox.Api.Files.RelocationBatchV2Launch
  commentId: T:Dropbox.Api.Files.RelocationBatchV2Launch
  parent: Dropbox.Api.Files
  name: RelocationBatchV2Launch
  nameWithType: RelocationBatchV2Launch
  fullName: Dropbox.Api.Files.RelocationBatchV2Launch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync
  name: CopyBatchAsync
  nameWithType: FilesUserRoutes.CopyBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync
- uid: Dropbox.Api.Files.RelocationBatchArg
  commentId: T:Dropbox.Api.Files.RelocationBatchArg
  parent: Dropbox.Api.Files
  name: RelocationBatchArg
  nameWithType: RelocationBatchArg
  fullName: Dropbox.Api.Files.RelocationBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RelocationBatchLaunch>
  nameWithType: Task<RelocationBatchLaunch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationBatchLaunch>
  nameWithType.vb: Task(Of RelocationBatchLaunch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationBatchLaunch)
  name.vb: Task(Of RelocationBatchLaunch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationBatchLaunch
    name: RelocationBatchLaunch
    nameWithType: RelocationBatchLaunch
    fullName: Dropbox.Api.Files.RelocationBatchLaunch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationBatchLaunch
    name: RelocationBatchLaunch
    nameWithType: RelocationBatchLaunch
    fullName: Dropbox.Api.Files.RelocationBatchLaunch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch
  name: BeginCopyBatch
  nameWithType: FilesUserRoutes.BeginCopyBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch
  name: EndCopyBatch
  nameWithType: FilesUserRoutes.EndCopyBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch
- uid: Dropbox.Api.Files.RelocationBatchLaunch
  commentId: T:Dropbox.Api.Files.RelocationBatchLaunch
  parent: Dropbox.Api.Files
  name: RelocationBatchLaunch
  nameWithType: RelocationBatchLaunch
  fullName: Dropbox.Api.Files.RelocationBatchLaunch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  isExternal: true
- uid: Dropbox.Api.Async.PollError
  commentId: T:Dropbox.Api.Async.PollError
  parent: Dropbox.Api.Async
  name: PollError
  nameWithType: PollError
  fullName: Dropbox.Api.Async.PollError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async
  name: CopyBatchCheckV2Async
  nameWithType: FilesUserRoutes.CopyBatchCheckV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async
- uid: Dropbox.Api.Async.PollArg
  commentId: T:Dropbox.Api.Async.PollArg
  parent: Dropbox.Api.Async
  name: PollArg
  nameWithType: PollArg
  fullName: Dropbox.Api.Async.PollArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RelocationBatchV2JobStatus>
  nameWithType: Task<RelocationBatchV2JobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationBatchV2JobStatus>
  nameWithType.vb: Task(Of RelocationBatchV2JobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationBatchV2JobStatus)
  name.vb: Task(Of RelocationBatchV2JobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationBatchV2JobStatus
    name: RelocationBatchV2JobStatus
    nameWithType: RelocationBatchV2JobStatus
    fullName: Dropbox.Api.Files.RelocationBatchV2JobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationBatchV2JobStatus
    name: RelocationBatchV2JobStatus
    nameWithType: RelocationBatchV2JobStatus
    fullName: Dropbox.Api.Files.RelocationBatchV2JobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Async
  commentId: N:Dropbox.Api.Async
  name: Dropbox.Api.Async
  nameWithType: Dropbox.Api.Async
  fullName: Dropbox.Api.Async
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2
  name: BeginCopyBatchCheckV2
  nameWithType: FilesUserRoutes.BeginCopyBatchCheckV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2
  name: EndCopyBatchCheckV2
  nameWithType: FilesUserRoutes.EndCopyBatchCheckV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2
- uid: Dropbox.Api.Files.RelocationBatchV2JobStatus
  commentId: T:Dropbox.Api.Files.RelocationBatchV2JobStatus
  parent: Dropbox.Api.Files
  name: RelocationBatchV2JobStatus
  nameWithType: RelocationBatchV2JobStatus
  fullName: Dropbox.Api.Files.RelocationBatchV2JobStatus
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync
  name: CopyBatchCheckAsync
  nameWithType: FilesUserRoutes.CopyBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RelocationBatchJobStatus>
  nameWithType: Task<RelocationBatchJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationBatchJobStatus>
  nameWithType.vb: Task(Of RelocationBatchJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationBatchJobStatus)
  name.vb: Task(Of RelocationBatchJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationBatchJobStatus
    name: RelocationBatchJobStatus
    nameWithType: RelocationBatchJobStatus
    fullName: Dropbox.Api.Files.RelocationBatchJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationBatchJobStatus
    name: RelocationBatchJobStatus
    nameWithType: RelocationBatchJobStatus
    fullName: Dropbox.Api.Files.RelocationBatchJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck
  name: BeginCopyBatchCheck
  nameWithType: FilesUserRoutes.BeginCopyBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck
  name: EndCopyBatchCheck
  nameWithType: FilesUserRoutes.EndCopyBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck
- uid: Dropbox.Api.Files.RelocationBatchJobStatus
  commentId: T:Dropbox.Api.Files.RelocationBatchJobStatus
  parent: Dropbox.Api.Files
  name: RelocationBatchJobStatus
  nameWithType: RelocationBatchJobStatus
  fullName: Dropbox.Api.Files.RelocationBatchJobStatus
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  isExternal: true
- uid: Dropbox.Api.Files.GetCopyReferenceError
  commentId: T:Dropbox.Api.Files.GetCopyReferenceError
  parent: Dropbox.Api.Files
  name: GetCopyReferenceError
  nameWithType: GetCopyReferenceError
  fullName: Dropbox.Api.Files.GetCopyReferenceError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync
  name: CopyReferenceGetAsync
  nameWithType: FilesUserRoutes.CopyReferenceGetAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync
- uid: Dropbox.Api.Files.GetCopyReferenceArg
  commentId: T:Dropbox.Api.Files.GetCopyReferenceArg
  parent: Dropbox.Api.Files
  name: GetCopyReferenceArg
  nameWithType: GetCopyReferenceArg
  fullName: Dropbox.Api.Files.GetCopyReferenceArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.GetCopyReferenceResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.GetCopyReferenceResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetCopyReferenceResult>
  nameWithType: Task<GetCopyReferenceResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.GetCopyReferenceResult>
  nameWithType.vb: Task(Of GetCopyReferenceResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.GetCopyReferenceResult)
  name.vb: Task(Of GetCopyReferenceResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.GetCopyReferenceResult
    name: GetCopyReferenceResult
    nameWithType: GetCopyReferenceResult
    fullName: Dropbox.Api.Files.GetCopyReferenceResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.GetCopyReferenceResult
    name: GetCopyReferenceResult
    nameWithType: GetCopyReferenceResult
    fullName: Dropbox.Api.Files.GetCopyReferenceResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet
  name: BeginCopyReferenceGet
  nameWithType: FilesUserRoutes.BeginCopyReferenceGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet
  name: EndCopyReferenceGet
  nameWithType: FilesUserRoutes.EndCopyReferenceGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet
- uid: Dropbox.Api.Files.GetCopyReferenceResult
  commentId: T:Dropbox.Api.Files.GetCopyReferenceResult
  parent: Dropbox.Api.Files
  name: GetCopyReferenceResult
  nameWithType: GetCopyReferenceResult
  fullName: Dropbox.Api.Files.GetCopyReferenceResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  isExternal: true
- uid: Dropbox.Api.Files.SaveCopyReferenceError
  commentId: T:Dropbox.Api.Files.SaveCopyReferenceError
  parent: Dropbox.Api.Files
  name: SaveCopyReferenceError
  nameWithType: SaveCopyReferenceError
  fullName: Dropbox.Api.Files.SaveCopyReferenceError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync
  name: CopyReferenceSaveAsync
  nameWithType: FilesUserRoutes.CopyReferenceSaveAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync
- uid: Dropbox.Api.Files.SaveCopyReferenceArg
  commentId: T:Dropbox.Api.Files.SaveCopyReferenceArg
  parent: Dropbox.Api.Files
  name: SaveCopyReferenceArg
  nameWithType: SaveCopyReferenceArg
  fullName: Dropbox.Api.Files.SaveCopyReferenceArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveCopyReferenceResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.SaveCopyReferenceResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SaveCopyReferenceResult>
  nameWithType: Task<SaveCopyReferenceResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SaveCopyReferenceResult>
  nameWithType.vb: Task(Of SaveCopyReferenceResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SaveCopyReferenceResult)
  name.vb: Task(Of SaveCopyReferenceResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SaveCopyReferenceResult
    name: SaveCopyReferenceResult
    nameWithType: SaveCopyReferenceResult
    fullName: Dropbox.Api.Files.SaveCopyReferenceResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SaveCopyReferenceResult
    name: SaveCopyReferenceResult
    nameWithType: SaveCopyReferenceResult
    fullName: Dropbox.Api.Files.SaveCopyReferenceResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave
  name: BeginCopyReferenceSave
  nameWithType: FilesUserRoutes.BeginCopyReferenceSave
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave
  name: EndCopyReferenceSave
  nameWithType: FilesUserRoutes.EndCopyReferenceSave
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave
- uid: Dropbox.Api.Files.SaveCopyReferenceResult
  commentId: T:Dropbox.Api.Files.SaveCopyReferenceResult
  parent: Dropbox.Api.Files
  name: SaveCopyReferenceResult
  nameWithType: SaveCopyReferenceResult
  fullName: Dropbox.Api.Files.SaveCopyReferenceResult
- uid: Dropbox.Api.Files.CreateFolderError
  commentId: T:Dropbox.Api.Files.CreateFolderError
  parent: Dropbox.Api.Files
  name: CreateFolderError
  nameWithType: CreateFolderError
  fullName: Dropbox.Api.Files.CreateFolderError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async
  name: CreateFolderV2Async
  nameWithType: FilesUserRoutes.CreateFolderV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async
- uid: Dropbox.Api.Files.CreateFolderArg
  commentId: T:Dropbox.Api.Files.CreateFolderArg
  parent: Dropbox.Api.Files
  name: CreateFolderArg
  nameWithType: CreateFolderArg
  fullName: Dropbox.Api.Files.CreateFolderArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CreateFolderResult>
  nameWithType: Task<CreateFolderResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.CreateFolderResult>
  nameWithType.vb: Task(Of CreateFolderResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.CreateFolderResult)
  name.vb: Task(Of CreateFolderResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.CreateFolderResult
    name: CreateFolderResult
    nameWithType: CreateFolderResult
    fullName: Dropbox.Api.Files.CreateFolderResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.CreateFolderResult
    name: CreateFolderResult
    nameWithType: CreateFolderResult
    fullName: Dropbox.Api.Files.CreateFolderResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2
  name: BeginCreateFolderV2
  nameWithType: FilesUserRoutes.BeginCreateFolderV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2
  name: EndCreateFolderV2
  nameWithType: FilesUserRoutes.EndCreateFolderV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2
- uid: Dropbox.Api.Files.CreateFolderResult
  commentId: T:Dropbox.Api.Files.CreateFolderResult
  parent: Dropbox.Api.Files
  name: CreateFolderResult
  nameWithType: CreateFolderResult
  fullName: Dropbox.Api.Files.CreateFolderResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync
  name: CreateFolderAsync
  nameWithType: FilesUserRoutes.CreateFolderAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.FolderMetadata}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.FolderMetadata}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<FolderMetadata>
  nameWithType: Task<FolderMetadata>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.FolderMetadata>
  nameWithType.vb: Task(Of FolderMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.FolderMetadata)
  name.vb: Task(Of FolderMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.FolderMetadata
    name: FolderMetadata
    nameWithType: FolderMetadata
    fullName: Dropbox.Api.Files.FolderMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.FolderMetadata
    name: FolderMetadata
    nameWithType: FolderMetadata
    fullName: Dropbox.Api.Files.FolderMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder
  name: BeginCreateFolder
  nameWithType: FilesUserRoutes.BeginCreateFolder
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder
  name: EndCreateFolder
  nameWithType: FilesUserRoutes.EndCreateFolder
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder
- uid: Dropbox.Api.Files.FolderMetadata
  commentId: T:Dropbox.Api.Files.FolderMetadata
  parent: Dropbox.Api.Files
  name: FolderMetadata
  nameWithType: FolderMetadata
  fullName: Dropbox.Api.Files.FolderMetadata
- uid: Dropbox.Api.Files.CreateFolderBatchArg.ForceAsync
  commentId: P:Dropbox.Api.Files.CreateFolderBatchArg.ForceAsync
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync
  name: CreateFolderBatchAsync
  nameWithType: FilesUserRoutes.CreateFolderBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync
- uid: Dropbox.Api.Files.CreateFolderBatchArg
  commentId: T:Dropbox.Api.Files.CreateFolderBatchArg
  parent: Dropbox.Api.Files
  name: CreateFolderBatchArg
  nameWithType: CreateFolderBatchArg
  fullName: Dropbox.Api.Files.CreateFolderBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchLaunch}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchLaunch}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CreateFolderBatchLaunch>
  nameWithType: Task<CreateFolderBatchLaunch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.CreateFolderBatchLaunch>
  nameWithType.vb: Task(Of CreateFolderBatchLaunch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.CreateFolderBatchLaunch)
  name.vb: Task(Of CreateFolderBatchLaunch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.CreateFolderBatchLaunch
    name: CreateFolderBatchLaunch
    nameWithType: CreateFolderBatchLaunch
    fullName: Dropbox.Api.Files.CreateFolderBatchLaunch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.CreateFolderBatchLaunch
    name: CreateFolderBatchLaunch
    nameWithType: CreateFolderBatchLaunch
    fullName: Dropbox.Api.Files.CreateFolderBatchLaunch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch
  name: BeginCreateFolderBatch
  nameWithType: FilesUserRoutes.BeginCreateFolderBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch
  name: EndCreateFolderBatch
  nameWithType: FilesUserRoutes.EndCreateFolderBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch
- uid: Dropbox.Api.Files.CreateFolderBatchLaunch
  commentId: T:Dropbox.Api.Files.CreateFolderBatchLaunch
  parent: Dropbox.Api.Files
  name: CreateFolderBatchLaunch
  nameWithType: CreateFolderBatchLaunch
  fullName: Dropbox.Api.Files.CreateFolderBatchLaunch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync
  name: CreateFolderBatchCheckAsync
  nameWithType: FilesUserRoutes.CreateFolderBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchJobStatus}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchJobStatus}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CreateFolderBatchJobStatus>
  nameWithType: Task<CreateFolderBatchJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.CreateFolderBatchJobStatus>
  nameWithType.vb: Task(Of CreateFolderBatchJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.CreateFolderBatchJobStatus)
  name.vb: Task(Of CreateFolderBatchJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.CreateFolderBatchJobStatus
    name: CreateFolderBatchJobStatus
    nameWithType: CreateFolderBatchJobStatus
    fullName: Dropbox.Api.Files.CreateFolderBatchJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.CreateFolderBatchJobStatus
    name: CreateFolderBatchJobStatus
    nameWithType: CreateFolderBatchJobStatus
    fullName: Dropbox.Api.Files.CreateFolderBatchJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck
  name: BeginCreateFolderBatchCheck
  nameWithType: FilesUserRoutes.BeginCreateFolderBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck
  name: EndCreateFolderBatchCheck
  nameWithType: FilesUserRoutes.EndCreateFolderBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck
- uid: Dropbox.Api.Files.CreateFolderBatchJobStatus
  commentId: T:Dropbox.Api.Files.CreateFolderBatchJobStatus
  parent: Dropbox.Api.Files
  name: CreateFolderBatchJobStatus
  nameWithType: CreateFolderBatchJobStatus
  fullName: Dropbox.Api.Files.CreateFolderBatchJobStatus
- uid: Dropbox.Api.Files.DeleteError
  commentId: T:Dropbox.Api.Files.DeleteError
  parent: Dropbox.Api.Files
  name: DeleteError
  nameWithType: DeleteError
  fullName: Dropbox.Api.Files.DeleteError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async
  name: DeleteV2Async
  nameWithType: FilesUserRoutes.DeleteV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async
- uid: Dropbox.Api.Files.DeleteArg
  commentId: T:Dropbox.Api.Files.DeleteArg
  parent: Dropbox.Api.Files
  name: DeleteArg
  nameWithType: DeleteArg
  fullName: Dropbox.Api.Files.DeleteArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DeleteResult>
  nameWithType: Task<DeleteResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.DeleteResult>
  nameWithType.vb: Task(Of DeleteResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.DeleteResult)
  name.vb: Task(Of DeleteResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: Dropbox.Api.Files.DeleteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: Dropbox.Api.Files.DeleteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2
  name: BeginDeleteV2
  nameWithType: FilesUserRoutes.BeginDeleteV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2
  name: EndDeleteV2
  nameWithType: FilesUserRoutes.EndDeleteV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2
- uid: Dropbox.Api.Files.DeleteResult
  commentId: T:Dropbox.Api.Files.DeleteResult
  parent: Dropbox.Api.Files
  name: DeleteResult
  nameWithType: DeleteResult
  fullName: Dropbox.Api.Files.DeleteResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync
  name: DeleteAsync
  nameWithType: FilesUserRoutes.DeleteAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete
  name: BeginDelete
  nameWithType: FilesUserRoutes.BeginDelete
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete
  name: EndDelete
  nameWithType: FilesUserRoutes.EndDelete
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync
  name: DeleteBatchAsync
  nameWithType: FilesUserRoutes.DeleteBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync
- uid: Dropbox.Api.Files.DeleteBatchArg
  commentId: T:Dropbox.Api.Files.DeleteBatchArg
  parent: Dropbox.Api.Files
  name: DeleteBatchArg
  nameWithType: DeleteBatchArg
  fullName: Dropbox.Api.Files.DeleteBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchLaunch}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchLaunch}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DeleteBatchLaunch>
  nameWithType: Task<DeleteBatchLaunch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.DeleteBatchLaunch>
  nameWithType.vb: Task(Of DeleteBatchLaunch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.DeleteBatchLaunch)
  name.vb: Task(Of DeleteBatchLaunch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DeleteBatchLaunch
    name: DeleteBatchLaunch
    nameWithType: DeleteBatchLaunch
    fullName: Dropbox.Api.Files.DeleteBatchLaunch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DeleteBatchLaunch
    name: DeleteBatchLaunch
    nameWithType: DeleteBatchLaunch
    fullName: Dropbox.Api.Files.DeleteBatchLaunch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch
  name: BeginDeleteBatch
  nameWithType: FilesUserRoutes.BeginDeleteBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg}
  commentId: T:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<DeleteArg>
  nameWithType: IEnumerable<DeleteArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.DeleteArg>
  nameWithType.vb: IEnumerable(Of DeleteArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.DeleteArg)
  name.vb: IEnumerable(Of DeleteArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DeleteArg
    name: DeleteArg
    nameWithType: DeleteArg
    fullName: Dropbox.Api.Files.DeleteArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DeleteArg
    name: DeleteArg
    nameWithType: DeleteArg
    fullName: Dropbox.Api.Files.DeleteArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch
  name: EndDeleteBatch
  nameWithType: FilesUserRoutes.EndDeleteBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch
- uid: Dropbox.Api.Files.DeleteBatchLaunch
  commentId: T:Dropbox.Api.Files.DeleteBatchLaunch
  parent: Dropbox.Api.Files
  name: DeleteBatchLaunch
  nameWithType: DeleteBatchLaunch
  fullName: Dropbox.Api.Files.DeleteBatchLaunch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync
  name: DeleteBatchCheckAsync
  nameWithType: FilesUserRoutes.DeleteBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchJobStatus}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchJobStatus}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DeleteBatchJobStatus>
  nameWithType: Task<DeleteBatchJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.DeleteBatchJobStatus>
  nameWithType.vb: Task(Of DeleteBatchJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.DeleteBatchJobStatus)
  name.vb: Task(Of DeleteBatchJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DeleteBatchJobStatus
    name: DeleteBatchJobStatus
    nameWithType: DeleteBatchJobStatus
    fullName: Dropbox.Api.Files.DeleteBatchJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DeleteBatchJobStatus
    name: DeleteBatchJobStatus
    nameWithType: DeleteBatchJobStatus
    fullName: Dropbox.Api.Files.DeleteBatchJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck
  name: BeginDeleteBatchCheck
  nameWithType: FilesUserRoutes.BeginDeleteBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck
  name: EndDeleteBatchCheck
  nameWithType: FilesUserRoutes.EndDeleteBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck
- uid: Dropbox.Api.Files.DeleteBatchJobStatus
  commentId: T:Dropbox.Api.Files.DeleteBatchJobStatus
  parent: Dropbox.Api.Files
  name: DeleteBatchJobStatus
  nameWithType: DeleteBatchJobStatus
  fullName: Dropbox.Api.Files.DeleteBatchJobStatus
- uid: Dropbox.Api.Files.DownloadError
  commentId: T:Dropbox.Api.Files.DownloadError
  parent: Dropbox.Api.Files
  name: DownloadError
  nameWithType: DownloadError
  fullName: Dropbox.Api.Files.DownloadError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync
  name: DownloadAsync
  nameWithType: FilesUserRoutes.DownloadAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync
- uid: Dropbox.Api.Files.DownloadArg
  commentId: T:Dropbox.Api.Files.DownloadArg
  parent: Dropbox.Api.Files
  name: DownloadArg
  nameWithType: DownloadArg
  fullName: Dropbox.Api.Files.DownloadArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDownloadResponse<FileMetadata>>
  nameWithType: Task<IDownloadResponse<FileMetadata>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.FileMetadata>>
  nameWithType.vb: Task(Of IDownloadResponse(Of FileMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.FileMetadata))
  name.vb: Task(Of IDownloadResponse(Of FileMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload
  name: BeginDownload
  nameWithType: FilesUserRoutes.BeginDownload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload
  name: EndDownload
  nameWithType: FilesUserRoutes.EndDownload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<FileMetadata>
  nameWithType: IDownloadResponse<FileMetadata>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.FileMetadata>
  nameWithType.vb: IDownloadResponse(Of FileMetadata)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.FileMetadata)
  name.vb: IDownloadResponse(Of FileMetadata)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Stone.IDownloadResponse`1
  commentId: T:Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<TResponse>
  nameWithType: IDownloadResponse<TResponse>
  fullName: Dropbox.Api.Stone.IDownloadResponse<TResponse>
  nameWithType.vb: IDownloadResponse(Of TResponse)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of TResponse)
  name.vb: IDownloadResponse(Of TResponse)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Stone
  commentId: N:Dropbox.Api.Stone
  name: Dropbox.Api.Stone
  nameWithType: Dropbox.Api.Stone
  fullName: Dropbox.Api.Stone
- uid: Dropbox.Api.Files.DownloadZipError
  commentId: T:Dropbox.Api.Files.DownloadZipError
  parent: Dropbox.Api.Files
  name: DownloadZipError
  nameWithType: DownloadZipError
  fullName: Dropbox.Api.Files.DownloadZipError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync
  name: DownloadZipAsync
  nameWithType: FilesUserRoutes.DownloadZipAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync
- uid: Dropbox.Api.Files.DownloadZipArg
  commentId: T:Dropbox.Api.Files.DownloadZipArg
  parent: Dropbox.Api.Files
  name: DownloadZipArg
  nameWithType: DownloadZipArg
  fullName: Dropbox.Api.Files.DownloadZipArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDownloadResponse<DownloadZipResult>>
  nameWithType: Task<IDownloadResponse<DownloadZipResult>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.DownloadZipResult>>
  nameWithType.vb: Task(Of IDownloadResponse(Of DownloadZipResult))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.DownloadZipResult))
  name.vb: Task(Of IDownloadResponse(Of DownloadZipResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DownloadZipResult
    name: DownloadZipResult
    nameWithType: DownloadZipResult
    fullName: Dropbox.Api.Files.DownloadZipResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DownloadZipResult
    name: DownloadZipResult
    nameWithType: DownloadZipResult
    fullName: Dropbox.Api.Files.DownloadZipResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip
  name: BeginDownloadZip
  nameWithType: FilesUserRoutes.BeginDownloadZip
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip
  name: EndDownloadZip
  nameWithType: FilesUserRoutes.EndDownloadZip
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<DownloadZipResult>
  nameWithType: IDownloadResponse<DownloadZipResult>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.DownloadZipResult>
  nameWithType.vb: IDownloadResponse(Of DownloadZipResult)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.DownloadZipResult)
  name.vb: IDownloadResponse(Of DownloadZipResult)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DownloadZipResult
    name: DownloadZipResult
    nameWithType: DownloadZipResult
    fullName: Dropbox.Api.Files.DownloadZipResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DownloadZipResult
    name: DownloadZipResult
    nameWithType: DownloadZipResult
    fullName: Dropbox.Api.Files.DownloadZipResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.ExportResult.FileMetadata
  commentId: P:Dropbox.Api.Files.ExportResult.FileMetadata
  isExternal: true
- uid: Dropbox.Api.Files.ExportInfo.ExportAs
  commentId: P:Dropbox.Api.Files.ExportInfo.ExportAs
  isExternal: true
- uid: Dropbox.Api.Files.ExportError
  commentId: T:Dropbox.Api.Files.ExportError
  parent: Dropbox.Api.Files
  name: ExportError
  nameWithType: ExportError
  fullName: Dropbox.Api.Files.ExportError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync
  name: ExportAsync
  nameWithType: FilesUserRoutes.ExportAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync
- uid: Dropbox.Api.Files.ExportArg
  commentId: T:Dropbox.Api.Files.ExportArg
  parent: Dropbox.Api.Files
  name: ExportArg
  nameWithType: ExportArg
  fullName: Dropbox.Api.Files.ExportArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDownloadResponse<ExportResult>>
  nameWithType: Task<IDownloadResponse<ExportResult>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.ExportResult>>
  nameWithType.vb: Task(Of IDownloadResponse(Of ExportResult))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.ExportResult))
  name.vb: Task(Of IDownloadResponse(Of ExportResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: Dropbox.Api.Files.ExportResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: Dropbox.Api.Files.ExportResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport
  name: BeginExport
  nameWithType: FilesUserRoutes.BeginExport
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport
  name: EndExport
  nameWithType: FilesUserRoutes.EndExport
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<ExportResult>
  nameWithType: IDownloadResponse<ExportResult>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.ExportResult>
  nameWithType.vb: IDownloadResponse(Of ExportResult)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.ExportResult)
  name.vb: IDownloadResponse(Of ExportResult)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: Dropbox.Api.Files.ExportResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: Dropbox.Api.Files.ExportResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.LockFileError
  commentId: T:Dropbox.Api.Files.LockFileError
  parent: Dropbox.Api.Files
  name: LockFileError
  nameWithType: LockFileError
  fullName: Dropbox.Api.Files.LockFileError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync
  name: GetFileLockBatchAsync
  nameWithType: FilesUserRoutes.GetFileLockBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync
- uid: Dropbox.Api.Files.LockFileBatchArg
  commentId: T:Dropbox.Api.Files.LockFileBatchArg
  parent: Dropbox.Api.Files
  name: LockFileBatchArg
  nameWithType: LockFileBatchArg
  fullName: Dropbox.Api.Files.LockFileBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<LockFileBatchResult>
  nameWithType: Task<LockFileBatchResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.LockFileBatchResult>
  nameWithType.vb: Task(Of LockFileBatchResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.LockFileBatchResult)
  name.vb: Task(Of LockFileBatchResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.LockFileBatchResult
    name: LockFileBatchResult
    nameWithType: LockFileBatchResult
    fullName: Dropbox.Api.Files.LockFileBatchResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.LockFileBatchResult
    name: LockFileBatchResult
    nameWithType: LockFileBatchResult
    fullName: Dropbox.Api.Files.LockFileBatchResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch
  name: BeginGetFileLockBatch
  nameWithType: FilesUserRoutes.BeginGetFileLockBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
  commentId: T:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<LockFileArg>
  nameWithType: IEnumerable<LockFileArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>
  nameWithType.vb: IEnumerable(Of LockFileArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg)
  name.vb: IEnumerable(Of LockFileArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.LockFileArg
    name: LockFileArg
    nameWithType: LockFileArg
    fullName: Dropbox.Api.Files.LockFileArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.LockFileArg
    name: LockFileArg
    nameWithType: LockFileArg
    fullName: Dropbox.Api.Files.LockFileArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch
  name: EndGetFileLockBatch
  nameWithType: FilesUserRoutes.EndGetFileLockBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch
- uid: Dropbox.Api.Files.LockFileBatchResult
  commentId: T:Dropbox.Api.Files.LockFileBatchResult
  parent: Dropbox.Api.Files
  name: LockFileBatchResult
  nameWithType: LockFileBatchResult
  fullName: Dropbox.Api.Files.LockFileBatchResult
- uid: Dropbox.Api.Files.GetMetadataError
  commentId: T:Dropbox.Api.Files.GetMetadataError
  parent: Dropbox.Api.Files
  name: GetMetadataError
  nameWithType: GetMetadataError
  fullName: Dropbox.Api.Files.GetMetadataError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync
  name: GetMetadataAsync
  nameWithType: FilesUserRoutes.GetMetadataAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync
- uid: Dropbox.Api.Files.GetMetadataArg
  commentId: T:Dropbox.Api.Files.GetMetadataArg
  parent: Dropbox.Api.Files
  name: GetMetadataArg
  nameWithType: GetMetadataArg
  fullName: Dropbox.Api.Files.GetMetadataArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata
  name: BeginGetMetadata
  nameWithType: FilesUserRoutes.BeginGetMetadata
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata
  name: EndGetMetadata
  nameWithType: FilesUserRoutes.EndGetMetadata
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata
- uid: Dropbox.Api.Files.PreviewError
  commentId: T:Dropbox.Api.Files.PreviewError
  parent: Dropbox.Api.Files
  name: PreviewError
  nameWithType: PreviewError
  fullName: Dropbox.Api.Files.PreviewError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync
  name: GetPreviewAsync
  nameWithType: FilesUserRoutes.GetPreviewAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync
- uid: Dropbox.Api.Files.PreviewArg
  commentId: T:Dropbox.Api.Files.PreviewArg
  parent: Dropbox.Api.Files
  name: PreviewArg
  nameWithType: PreviewArg
  fullName: Dropbox.Api.Files.PreviewArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview
  name: BeginGetPreview
  nameWithType: FilesUserRoutes.BeginGetPreview
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview
  name: EndGetPreview
  nameWithType: FilesUserRoutes.EndGetPreview
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview
- uid: Dropbox.Api.Files.GetTemporaryLinkError
  commentId: T:Dropbox.Api.Files.GetTemporaryLinkError
  parent: Dropbox.Api.Files
  name: GetTemporaryLinkError
  nameWithType: GetTemporaryLinkError
  fullName: Dropbox.Api.Files.GetTemporaryLinkError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync
  name: GetTemporaryLinkAsync
  nameWithType: FilesUserRoutes.GetTemporaryLinkAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync
- uid: Dropbox.Api.Files.GetTemporaryLinkArg
  commentId: T:Dropbox.Api.Files.GetTemporaryLinkArg
  parent: Dropbox.Api.Files
  name: GetTemporaryLinkArg
  nameWithType: GetTemporaryLinkArg
  fullName: Dropbox.Api.Files.GetTemporaryLinkArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryLinkResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryLinkResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetTemporaryLinkResult>
  nameWithType: Task<GetTemporaryLinkResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.GetTemporaryLinkResult>
  nameWithType.vb: Task(Of GetTemporaryLinkResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.GetTemporaryLinkResult)
  name.vb: Task(Of GetTemporaryLinkResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.GetTemporaryLinkResult
    name: GetTemporaryLinkResult
    nameWithType: GetTemporaryLinkResult
    fullName: Dropbox.Api.Files.GetTemporaryLinkResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.GetTemporaryLinkResult
    name: GetTemporaryLinkResult
    nameWithType: GetTemporaryLinkResult
    fullName: Dropbox.Api.Files.GetTemporaryLinkResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink
  name: BeginGetTemporaryLink
  nameWithType: FilesUserRoutes.BeginGetTemporaryLink
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink
  name: EndGetTemporaryLink
  nameWithType: FilesUserRoutes.EndGetTemporaryLink
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink
- uid: Dropbox.Api.Files.GetTemporaryLinkResult
  commentId: T:Dropbox.Api.Files.GetTemporaryLinkResult
  parent: Dropbox.Api.Files
  name: GetTemporaryLinkResult
  nameWithType: GetTemporaryLinkResult
  fullName: Dropbox.Api.Files.GetTemporaryLinkResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.UploadArg,System.IO.Stream)
  isExternal: true
- uid: Dropbox.Api.Files.CommitInfo
  commentId: T:Dropbox.Api.Files.CommitInfo
  parent: Dropbox.Api.Files
  name: CommitInfo
  nameWithType: CommitInfo
  fullName: Dropbox.Api.Files.CommitInfo
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync
  name: GetTemporaryUploadLinkAsync
  nameWithType: FilesUserRoutes.GetTemporaryUploadLinkAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync
- uid: Dropbox.Api.Files.GetTemporaryUploadLinkArg
  commentId: T:Dropbox.Api.Files.GetTemporaryUploadLinkArg
  parent: Dropbox.Api.Files
  name: GetTemporaryUploadLinkArg
  nameWithType: GetTemporaryUploadLinkArg
  fullName: Dropbox.Api.Files.GetTemporaryUploadLinkArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryUploadLinkResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryUploadLinkResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetTemporaryUploadLinkResult>
  nameWithType: Task<GetTemporaryUploadLinkResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.GetTemporaryUploadLinkResult>
  nameWithType.vb: Task(Of GetTemporaryUploadLinkResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.GetTemporaryUploadLinkResult)
  name.vb: Task(Of GetTemporaryUploadLinkResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.GetTemporaryUploadLinkResult
    name: GetTemporaryUploadLinkResult
    nameWithType: GetTemporaryUploadLinkResult
    fullName: Dropbox.Api.Files.GetTemporaryUploadLinkResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.GetTemporaryUploadLinkResult
    name: GetTemporaryUploadLinkResult
    nameWithType: GetTemporaryUploadLinkResult
    fullName: Dropbox.Api.Files.GetTemporaryUploadLinkResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink
  name: BeginGetTemporaryUploadLink
  nameWithType: FilesUserRoutes.BeginGetTemporaryUploadLink
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink
  name: EndGetTemporaryUploadLink
  nameWithType: FilesUserRoutes.EndGetTemporaryUploadLink
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink
- uid: Dropbox.Api.Files.GetTemporaryUploadLinkResult
  commentId: T:Dropbox.Api.Files.GetTemporaryUploadLinkResult
  parent: Dropbox.Api.Files
  name: GetTemporaryUploadLinkResult
  nameWithType: GetTemporaryUploadLinkResult
  fullName: Dropbox.Api.Files.GetTemporaryUploadLinkResult
- uid: Dropbox.Api.Files.ThumbnailError
  commentId: T:Dropbox.Api.Files.ThumbnailError
  parent: Dropbox.Api.Files
  name: ThumbnailError
  nameWithType: ThumbnailError
  fullName: Dropbox.Api.Files.ThumbnailError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync
  name: GetThumbnailAsync
  nameWithType: FilesUserRoutes.GetThumbnailAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync
- uid: Dropbox.Api.Files.ThumbnailArg
  commentId: T:Dropbox.Api.Files.ThumbnailArg
  parent: Dropbox.Api.Files
  name: ThumbnailArg
  nameWithType: ThumbnailArg
  fullName: Dropbox.Api.Files.ThumbnailArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail
  name: BeginGetThumbnail
  nameWithType: FilesUserRoutes.BeginGetThumbnail
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail
- uid: Dropbox.Api.Files.ThumbnailFormat
  commentId: T:Dropbox.Api.Files.ThumbnailFormat
  parent: Dropbox.Api.Files
  name: ThumbnailFormat
  nameWithType: ThumbnailFormat
  fullName: Dropbox.Api.Files.ThumbnailFormat
- uid: Dropbox.Api.Files.ThumbnailSize
  commentId: T:Dropbox.Api.Files.ThumbnailSize
  parent: Dropbox.Api.Files
  name: ThumbnailSize
  nameWithType: ThumbnailSize
  fullName: Dropbox.Api.Files.ThumbnailSize
- uid: Dropbox.Api.Files.ThumbnailMode
  commentId: T:Dropbox.Api.Files.ThumbnailMode
  parent: Dropbox.Api.Files
  name: ThumbnailMode
  nameWithType: ThumbnailMode
  fullName: Dropbox.Api.Files.ThumbnailMode
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail
  name: EndGetThumbnail
  nameWithType: FilesUserRoutes.EndGetThumbnail
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail
- uid: Dropbox.Api.Files.ThumbnailV2Error
  commentId: T:Dropbox.Api.Files.ThumbnailV2Error
  parent: Dropbox.Api.Files
  name: ThumbnailV2Error
  nameWithType: ThumbnailV2Error
  fullName: Dropbox.Api.Files.ThumbnailV2Error
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async
  name: GetThumbnailV2Async
  nameWithType: FilesUserRoutes.GetThumbnailV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async
- uid: Dropbox.Api.Files.ThumbnailV2Arg
  commentId: T:Dropbox.Api.Files.ThumbnailV2Arg
  parent: Dropbox.Api.Files
  name: ThumbnailV2Arg
  nameWithType: ThumbnailV2Arg
  fullName: Dropbox.Api.Files.ThumbnailV2Arg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDownloadResponse<PreviewResult>>
  nameWithType: Task<IDownloadResponse<PreviewResult>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.PreviewResult>>
  nameWithType.vb: Task(Of IDownloadResponse(Of PreviewResult))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.PreviewResult))
  name.vb: Task(Of IDownloadResponse(Of PreviewResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2
  name: BeginGetThumbnailV2
  nameWithType: FilesUserRoutes.BeginGetThumbnailV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2
- uid: Dropbox.Api.Files.PathOrLink
  commentId: T:Dropbox.Api.Files.PathOrLink
  parent: Dropbox.Api.Files
  name: PathOrLink
  nameWithType: PathOrLink
  fullName: Dropbox.Api.Files.PathOrLink
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2
  name: EndGetThumbnailV2
  nameWithType: FilesUserRoutes.EndGetThumbnailV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<PreviewResult>
  nameWithType: IDownloadResponse<PreviewResult>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.PreviewResult>
  nameWithType.vb: IDownloadResponse(Of PreviewResult)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.PreviewResult)
  name.vb: IDownloadResponse(Of PreviewResult)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.GetThumbnailBatchError
  commentId: T:Dropbox.Api.Files.GetThumbnailBatchError
  parent: Dropbox.Api.Files
  name: GetThumbnailBatchError
  nameWithType: GetThumbnailBatchError
  fullName: Dropbox.Api.Files.GetThumbnailBatchError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync
  name: GetThumbnailBatchAsync
  nameWithType: FilesUserRoutes.GetThumbnailBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync
- uid: Dropbox.Api.Files.GetThumbnailBatchArg
  commentId: T:Dropbox.Api.Files.GetThumbnailBatchArg
  parent: Dropbox.Api.Files
  name: GetThumbnailBatchArg
  nameWithType: GetThumbnailBatchArg
  fullName: Dropbox.Api.Files.GetThumbnailBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.GetThumbnailBatchResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.GetThumbnailBatchResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetThumbnailBatchResult>
  nameWithType: Task<GetThumbnailBatchResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.GetThumbnailBatchResult>
  nameWithType.vb: Task(Of GetThumbnailBatchResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.GetThumbnailBatchResult)
  name.vb: Task(Of GetThumbnailBatchResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.GetThumbnailBatchResult
    name: GetThumbnailBatchResult
    nameWithType: GetThumbnailBatchResult
    fullName: Dropbox.Api.Files.GetThumbnailBatchResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.GetThumbnailBatchResult
    name: GetThumbnailBatchResult
    nameWithType: GetThumbnailBatchResult
    fullName: Dropbox.Api.Files.GetThumbnailBatchResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch
  name: BeginGetThumbnailBatch
  nameWithType: FilesUserRoutes.BeginGetThumbnailBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg}
  commentId: T:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ThumbnailArg>
  nameWithType: IEnumerable<ThumbnailArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.ThumbnailArg>
  nameWithType.vb: IEnumerable(Of ThumbnailArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.ThumbnailArg)
  name.vb: IEnumerable(Of ThumbnailArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ThumbnailArg
    name: ThumbnailArg
    nameWithType: ThumbnailArg
    fullName: Dropbox.Api.Files.ThumbnailArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ThumbnailArg
    name: ThumbnailArg
    nameWithType: ThumbnailArg
    fullName: Dropbox.Api.Files.ThumbnailArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch
  name: EndGetThumbnailBatch
  nameWithType: FilesUserRoutes.EndGetThumbnailBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch
- uid: Dropbox.Api.Files.GetThumbnailBatchResult
  commentId: T:Dropbox.Api.Files.GetThumbnailBatchResult
  parent: Dropbox.Api.Files
  name: GetThumbnailBatchResult
  nameWithType: GetThumbnailBatchResult
  fullName: Dropbox.Api.Files.GetThumbnailBatchResult
- uid: Dropbox.Api.Files.ListFolderResult.HasMore
  commentId: P:Dropbox.Api.Files.ListFolderResult.HasMore
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderResult.Cursor
  commentId: P:Dropbox.Api.Files.ListFolderResult.Cursor
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderArg.Recursive
  commentId: P:Dropbox.Api.Files.ListFolderArg.Recursive
  isExternal: true
- uid: Dropbox.Api.Auth.RateLimitError
  commentId: T:Dropbox.Api.Auth.RateLimitError
  name: RateLimitError
  nameWithType: RateLimitError
  fullName: Dropbox.Api.Auth.RateLimitError
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderError
  commentId: T:Dropbox.Api.Files.ListFolderError
  parent: Dropbox.Api.Files
  name: ListFolderError
  nameWithType: ListFolderError
  fullName: Dropbox.Api.Files.ListFolderError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync
  name: ListFolderAsync
  nameWithType: FilesUserRoutes.ListFolderAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync
- uid: Dropbox.Api.Files.ListFolderArg
  commentId: T:Dropbox.Api.Files.ListFolderArg
  parent: Dropbox.Api.Files
  name: ListFolderArg
  nameWithType: ListFolderArg
  fullName: Dropbox.Api.Files.ListFolderArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ListFolderResult>
  nameWithType: Task<ListFolderResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.ListFolderResult>
  nameWithType.vb: Task(Of ListFolderResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.ListFolderResult)
  name.vb: Task(Of ListFolderResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ListFolderResult
    name: ListFolderResult
    nameWithType: ListFolderResult
    fullName: Dropbox.Api.Files.ListFolderResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ListFolderResult
    name: ListFolderResult
    nameWithType: ListFolderResult
    fullName: Dropbox.Api.Files.ListFolderResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder
  name: BeginListFolder
  nameWithType: FilesUserRoutes.BeginListFolder
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder
- uid: Dropbox.Api.Files.ListFolderArg.Path
  commentId: P:Dropbox.Api.Files.ListFolderArg.Path
  isExternal: true
- uid: System.Nullable{System.UInt32}
  commentId: T:System.Nullable{System.UInt32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt32>
  nameWithType: Nullable<UInt32>
  fullName: System.Nullable<System.UInt32>
  nameWithType.vb: Nullable(Of UInt32)
  fullName.vb: System.Nullable(Of System.UInt32)
  name.vb: Nullable(Of UInt32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.SharedLink
  commentId: T:Dropbox.Api.Files.SharedLink
  parent: Dropbox.Api.Files
  name: SharedLink
  nameWithType: SharedLink
  fullName: Dropbox.Api.Files.SharedLink
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder
  name: EndListFolder
  nameWithType: FilesUserRoutes.EndListFolder
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder
- uid: Dropbox.Api.Files.ListFolderResult
  commentId: T:Dropbox.Api.Files.ListFolderResult
  parent: Dropbox.Api.Files
  name: ListFolderResult
  nameWithType: ListFolderResult
  fullName: Dropbox.Api.Files.ListFolderResult
- uid: Dropbox.Api.Files.ListFolderContinueError
  commentId: T:Dropbox.Api.Files.ListFolderContinueError
  parent: Dropbox.Api.Files
  name: ListFolderContinueError
  nameWithType: ListFolderContinueError
  fullName: Dropbox.Api.Files.ListFolderContinueError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync
  name: ListFolderContinueAsync
  nameWithType: FilesUserRoutes.ListFolderContinueAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync
- uid: Dropbox.Api.Files.ListFolderContinueArg
  commentId: T:Dropbox.Api.Files.ListFolderContinueArg
  parent: Dropbox.Api.Files
  name: ListFolderContinueArg
  nameWithType: ListFolderContinueArg
  fullName: Dropbox.Api.Files.ListFolderContinueArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue
  name: BeginListFolderContinue
  nameWithType: FilesUserRoutes.BeginListFolderContinue
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue
  name: EndListFolderContinue
  nameWithType: FilesUserRoutes.EndListFolderContinue
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync
  name: ListFolderGetLatestCursorAsync
  nameWithType: FilesUserRoutes.ListFolderGetLatestCursorAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderGetLatestCursorResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderGetLatestCursorResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ListFolderGetLatestCursorResult>
  nameWithType: Task<ListFolderGetLatestCursorResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.ListFolderGetLatestCursorResult>
  nameWithType.vb: Task(Of ListFolderGetLatestCursorResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.ListFolderGetLatestCursorResult)
  name.vb: Task(Of ListFolderGetLatestCursorResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ListFolderGetLatestCursorResult
    name: ListFolderGetLatestCursorResult
    nameWithType: ListFolderGetLatestCursorResult
    fullName: Dropbox.Api.Files.ListFolderGetLatestCursorResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ListFolderGetLatestCursorResult
    name: ListFolderGetLatestCursorResult
    nameWithType: ListFolderGetLatestCursorResult
    fullName: Dropbox.Api.Files.ListFolderGetLatestCursorResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor
  name: BeginListFolderGetLatestCursor
  nameWithType: FilesUserRoutes.BeginListFolderGetLatestCursor
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor
  name: EndListFolderGetLatestCursor
  nameWithType: FilesUserRoutes.EndListFolderGetLatestCursor
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor
- uid: Dropbox.Api.Files.ListFolderGetLatestCursorResult
  commentId: T:Dropbox.Api.Files.ListFolderGetLatestCursorResult
  parent: Dropbox.Api.Files
  name: ListFolderGetLatestCursorResult
  nameWithType: ListFolderGetLatestCursorResult
  fullName: Dropbox.Api.Files.ListFolderGetLatestCursorResult
- uid: Dropbox.Api.Files.ListFolderLongpollError
  commentId: T:Dropbox.Api.Files.ListFolderLongpollError
  parent: Dropbox.Api.Files
  name: ListFolderLongpollError
  nameWithType: ListFolderLongpollError
  fullName: Dropbox.Api.Files.ListFolderLongpollError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync
  name: ListFolderLongpollAsync
  nameWithType: FilesUserRoutes.ListFolderLongpollAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync
- uid: Dropbox.Api.Files.ListFolderLongpollArg
  commentId: T:Dropbox.Api.Files.ListFolderLongpollArg
  parent: Dropbox.Api.Files
  name: ListFolderLongpollArg
  nameWithType: ListFolderLongpollArg
  fullName: Dropbox.Api.Files.ListFolderLongpollArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderLongpollResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderLongpollResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ListFolderLongpollResult>
  nameWithType: Task<ListFolderLongpollResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.ListFolderLongpollResult>
  nameWithType.vb: Task(Of ListFolderLongpollResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.ListFolderLongpollResult)
  name.vb: Task(Of ListFolderLongpollResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ListFolderLongpollResult
    name: ListFolderLongpollResult
    nameWithType: ListFolderLongpollResult
    fullName: Dropbox.Api.Files.ListFolderLongpollResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ListFolderLongpollResult
    name: ListFolderLongpollResult
    nameWithType: ListFolderLongpollResult
    fullName: Dropbox.Api.Files.ListFolderLongpollResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll
  name: BeginListFolderLongpoll
  nameWithType: FilesUserRoutes.BeginListFolderLongpoll
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll
- uid: Dropbox.Api.Files.ListFolderArg.IncludeMediaInfo
  commentId: P:Dropbox.Api.Files.ListFolderArg.IncludeMediaInfo
  isExternal: true
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll
  name: EndListFolderLongpoll
  nameWithType: FilesUserRoutes.EndListFolderLongpoll
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll
- uid: Dropbox.Api.Files.ListFolderLongpollResult
  commentId: T:Dropbox.Api.Files.ListFolderLongpollResult
  parent: Dropbox.Api.Files
  name: ListFolderLongpollResult
  nameWithType: ListFolderLongpollResult
  fullName: Dropbox.Api.Files.ListFolderLongpollResult
- uid: Dropbox.Api.Files.ListRevisionsMode.Path
  commentId: T:Dropbox.Api.Files.ListRevisionsMode.Path
  parent: Dropbox.Api.Files
  name: ListRevisionsMode.Path
  nameWithType: ListRevisionsMode.Path
  fullName: Dropbox.Api.Files.ListRevisionsMode.Path
- uid: Dropbox.Api.Files.ListRevisionsMode.Id
  commentId: T:Dropbox.Api.Files.ListRevisionsMode.Id
  parent: Dropbox.Api.Files
  name: ListRevisionsMode.Id
  nameWithType: ListRevisionsMode.Id
  fullName: Dropbox.Api.Files.ListRevisionsMode.Id
- uid: Dropbox.Api.Files.ListRevisionsError
  commentId: T:Dropbox.Api.Files.ListRevisionsError
  parent: Dropbox.Api.Files
  name: ListRevisionsError
  nameWithType: ListRevisionsError
  fullName: Dropbox.Api.Files.ListRevisionsError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync
  name: ListRevisionsAsync
  nameWithType: FilesUserRoutes.ListRevisionsAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync
- uid: Dropbox.Api.Files.ListRevisionsArg
  commentId: T:Dropbox.Api.Files.ListRevisionsArg
  parent: Dropbox.Api.Files
  name: ListRevisionsArg
  nameWithType: ListRevisionsArg
  fullName: Dropbox.Api.Files.ListRevisionsArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.ListRevisionsResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.ListRevisionsResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ListRevisionsResult>
  nameWithType: Task<ListRevisionsResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.ListRevisionsResult>
  nameWithType.vb: Task(Of ListRevisionsResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.ListRevisionsResult)
  name.vb: Task(Of ListRevisionsResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ListRevisionsResult
    name: ListRevisionsResult
    nameWithType: ListRevisionsResult
    fullName: Dropbox.Api.Files.ListRevisionsResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ListRevisionsResult
    name: ListRevisionsResult
    nameWithType: ListRevisionsResult
    fullName: Dropbox.Api.Files.ListRevisionsResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions
  name: BeginListRevisions
  nameWithType: FilesUserRoutes.BeginListRevisions
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions
- uid: Dropbox.Api.Files.ListRevisionsMode
  commentId: T:Dropbox.Api.Files.ListRevisionsMode
  parent: Dropbox.Api.Files
  name: ListRevisionsMode
  nameWithType: ListRevisionsMode
  fullName: Dropbox.Api.Files.ListRevisionsMode
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions
  name: EndListRevisions
  nameWithType: FilesUserRoutes.EndListRevisions
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions
- uid: Dropbox.Api.Files.ListRevisionsResult
  commentId: T:Dropbox.Api.Files.ListRevisionsResult
  parent: Dropbox.Api.Files
  name: ListRevisionsResult
  nameWithType: ListRevisionsResult
  fullName: Dropbox.Api.Files.ListRevisionsResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync
  name: LockFileBatchAsync
  nameWithType: FilesUserRoutes.LockFileBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch
  name: BeginLockFileBatch
  nameWithType: FilesUserRoutes.BeginLockFileBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch
  name: EndLockFileBatch
  nameWithType: FilesUserRoutes.EndLockFileBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async
  name: MoveV2Async
  nameWithType: FilesUserRoutes.MoveV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2
  name: BeginMoveV2
  nameWithType: FilesUserRoutes.BeginMoveV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2
  name: EndMoveV2
  nameWithType: FilesUserRoutes.EndMoveV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync
  name: MoveAsync
  nameWithType: FilesUserRoutes.MoveAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove
  name: BeginMove
  nameWithType: FilesUserRoutes.BeginMove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove
  name: EndMove
  nameWithType: FilesUserRoutes.EndMove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async
  name: MoveBatchV2Async
  nameWithType: FilesUserRoutes.MoveBatchV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async
- uid: Dropbox.Api.Files.MoveBatchArg
  commentId: T:Dropbox.Api.Files.MoveBatchArg
  parent: Dropbox.Api.Files
  name: MoveBatchArg
  nameWithType: MoveBatchArg
  fullName: Dropbox.Api.Files.MoveBatchArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2
  name: BeginMoveBatchV2
  nameWithType: FilesUserRoutes.BeginMoveBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2
  name: EndMoveBatchV2
  nameWithType: FilesUserRoutes.EndMoveBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync
  name: MoveBatchAsync
  nameWithType: FilesUserRoutes.MoveBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch
  name: BeginMoveBatch
  nameWithType: FilesUserRoutes.BeginMoveBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch
  name: EndMoveBatch
  nameWithType: FilesUserRoutes.EndMoveBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async
  name: MoveBatchCheckV2Async
  nameWithType: FilesUserRoutes.MoveBatchCheckV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2
  name: BeginMoveBatchCheckV2
  nameWithType: FilesUserRoutes.BeginMoveBatchCheckV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2
  name: EndMoveBatchCheckV2
  nameWithType: FilesUserRoutes.EndMoveBatchCheckV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync
  name: MoveBatchCheckAsync
  nameWithType: FilesUserRoutes.MoveBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck
  name: BeginMoveBatchCheck
  nameWithType: FilesUserRoutes.BeginMoveBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck
  name: EndMoveBatchCheck
  nameWithType: FilesUserRoutes.EndMoveBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck
- uid: Dropbox.Api.Files.PaperCreateError
  commentId: T:Dropbox.Api.Files.PaperCreateError
  parent: Dropbox.Api.Files
  name: PaperCreateError
  nameWithType: PaperCreateError
  fullName: Dropbox.Api.Files.PaperCreateError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync
  name: PaperCreateAsync
  nameWithType: FilesUserRoutes.PaperCreateAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync
- uid: Dropbox.Api.Files.PaperCreateArg
  commentId: T:Dropbox.Api.Files.PaperCreateArg
  parent: Dropbox.Api.Files
  name: PaperCreateArg
  nameWithType: PaperCreateArg
  fullName: Dropbox.Api.Files.PaperCreateArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperCreateResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.PaperCreateResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PaperCreateResult>
  nameWithType: Task<PaperCreateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.PaperCreateResult>
  nameWithType.vb: Task(Of PaperCreateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.PaperCreateResult)
  name.vb: Task(Of PaperCreateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PaperCreateResult
    name: PaperCreateResult
    nameWithType: PaperCreateResult
    fullName: Dropbox.Api.Files.PaperCreateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PaperCreateResult
    name: PaperCreateResult
    nameWithType: PaperCreateResult
    fullName: Dropbox.Api.Files.PaperCreateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate
  name: BeginPaperCreate
  nameWithType: FilesUserRoutes.BeginPaperCreate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate
- uid: Dropbox.Api.Files.ImportFormat
  commentId: T:Dropbox.Api.Files.ImportFormat
  parent: Dropbox.Api.Files
  name: ImportFormat
  nameWithType: ImportFormat
  fullName: Dropbox.Api.Files.ImportFormat
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate
  name: EndPaperCreate
  nameWithType: FilesUserRoutes.EndPaperCreate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate
- uid: Dropbox.Api.Files.PaperCreateResult
  commentId: T:Dropbox.Api.Files.PaperCreateResult
  parent: Dropbox.Api.Files
  name: PaperCreateResult
  nameWithType: PaperCreateResult
  fullName: Dropbox.Api.Files.PaperCreateResult
- uid: Dropbox.Api.Files.PaperUpdateError
  commentId: T:Dropbox.Api.Files.PaperUpdateError
  parent: Dropbox.Api.Files
  name: PaperUpdateError
  nameWithType: PaperUpdateError
  fullName: Dropbox.Api.Files.PaperUpdateError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync
  name: PaperUpdateAsync
  nameWithType: FilesUserRoutes.PaperUpdateAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync
- uid: Dropbox.Api.Files.PaperUpdateArg
  commentId: T:Dropbox.Api.Files.PaperUpdateArg
  parent: Dropbox.Api.Files
  name: PaperUpdateArg
  nameWithType: PaperUpdateArg
  fullName: Dropbox.Api.Files.PaperUpdateArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperUpdateResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.PaperUpdateResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PaperUpdateResult>
  nameWithType: Task<PaperUpdateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.PaperUpdateResult>
  nameWithType.vb: Task(Of PaperUpdateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.PaperUpdateResult)
  name.vb: Task(Of PaperUpdateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PaperUpdateResult
    name: PaperUpdateResult
    nameWithType: PaperUpdateResult
    fullName: Dropbox.Api.Files.PaperUpdateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PaperUpdateResult
    name: PaperUpdateResult
    nameWithType: PaperUpdateResult
    fullName: Dropbox.Api.Files.PaperUpdateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate
  name: BeginPaperUpdate
  nameWithType: FilesUserRoutes.BeginPaperUpdate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate
- uid: Dropbox.Api.Files.PaperDocUpdatePolicy
  commentId: T:Dropbox.Api.Files.PaperDocUpdatePolicy
  parent: Dropbox.Api.Files
  name: PaperDocUpdatePolicy
  nameWithType: PaperDocUpdatePolicy
  fullName: Dropbox.Api.Files.PaperDocUpdatePolicy
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate
  name: EndPaperUpdate
  nameWithType: FilesUserRoutes.EndPaperUpdate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate
- uid: Dropbox.Api.Files.PaperUpdateResult
  commentId: T:Dropbox.Api.Files.PaperUpdateResult
  parent: Dropbox.Api.Files
  name: PaperUpdateResult
  nameWithType: PaperUpdateResult
  fullName: Dropbox.Api.Files.PaperUpdateResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync
  name: PermanentlyDeleteAsync
  nameWithType: FilesUserRoutes.PermanentlyDeleteAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete
  name: BeginPermanentlyDelete
  nameWithType: FilesUserRoutes.BeginPermanentlyDelete
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete
  name: EndPermanentlyDelete
  nameWithType: FilesUserRoutes.EndPermanentlyDelete
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete
- uid: Dropbox.Api.FileProperties.AddPropertiesError
  commentId: T:Dropbox.Api.FileProperties.AddPropertiesError
  parent: Dropbox.Api.FileProperties
  name: AddPropertiesError
  nameWithType: AddPropertiesError
  fullName: Dropbox.Api.FileProperties.AddPropertiesError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync
  name: PropertiesAddAsync
  nameWithType: FilesUserRoutes.PropertiesAddAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync
- uid: Dropbox.Api.FileProperties.AddPropertiesArg
  commentId: T:Dropbox.Api.FileProperties.AddPropertiesArg
  parent: Dropbox.Api.FileProperties
  name: AddPropertiesArg
  nameWithType: AddPropertiesArg
  fullName: Dropbox.Api.FileProperties.AddPropertiesArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd
  name: BeginPropertiesAdd
  nameWithType: FilesUserRoutes.BeginPropertiesAdd
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd
  name: EndPropertiesAdd
  nameWithType: FilesUserRoutes.EndPropertiesAdd
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd
- uid: Dropbox.Api.FileProperties.InvalidPropertyGroupError
  commentId: T:Dropbox.Api.FileProperties.InvalidPropertyGroupError
  parent: Dropbox.Api.FileProperties
  name: InvalidPropertyGroupError
  nameWithType: InvalidPropertyGroupError
  fullName: Dropbox.Api.FileProperties.InvalidPropertyGroupError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync
  name: PropertiesOverwriteAsync
  nameWithType: FilesUserRoutes.PropertiesOverwriteAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync
- uid: Dropbox.Api.FileProperties.OverwritePropertyGroupArg
  commentId: T:Dropbox.Api.FileProperties.OverwritePropertyGroupArg
  parent: Dropbox.Api.FileProperties
  name: OverwritePropertyGroupArg
  nameWithType: OverwritePropertyGroupArg
  fullName: Dropbox.Api.FileProperties.OverwritePropertyGroupArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite
  name: BeginPropertiesOverwrite
  nameWithType: FilesUserRoutes.BeginPropertiesOverwrite
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite
  name: EndPropertiesOverwrite
  nameWithType: FilesUserRoutes.EndPropertiesOverwrite
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite
- uid: Dropbox.Api.FileProperties.RemovePropertiesError
  commentId: T:Dropbox.Api.FileProperties.RemovePropertiesError
  parent: Dropbox.Api.FileProperties
  name: RemovePropertiesError
  nameWithType: RemovePropertiesError
  fullName: Dropbox.Api.FileProperties.RemovePropertiesError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync
  name: PropertiesRemoveAsync
  nameWithType: FilesUserRoutes.PropertiesRemoveAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync
- uid: Dropbox.Api.FileProperties.RemovePropertiesArg
  commentId: T:Dropbox.Api.FileProperties.RemovePropertiesArg
  parent: Dropbox.Api.FileProperties
  name: RemovePropertiesArg
  nameWithType: RemovePropertiesArg
  fullName: Dropbox.Api.FileProperties.RemovePropertiesArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove
  name: BeginPropertiesRemove
  nameWithType: FilesUserRoutes.BeginPropertiesRemove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove
- uid: Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)
  commentId: M:Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)
  isExternal: true
- uid: Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)
  commentId: M:Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove
  name: EndPropertiesRemove
  nameWithType: FilesUserRoutes.EndPropertiesRemove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove
- uid: Dropbox.Api.FileProperties.TemplateError
  commentId: T:Dropbox.Api.FileProperties.TemplateError
  parent: Dropbox.Api.FileProperties
  name: TemplateError
  nameWithType: TemplateError
  fullName: Dropbox.Api.FileProperties.TemplateError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync
  name: PropertiesTemplateGetAsync
  nameWithType: FilesUserRoutes.PropertiesTemplateGetAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync
- uid: Dropbox.Api.FileProperties.GetTemplateArg
  commentId: T:Dropbox.Api.FileProperties.GetTemplateArg
  parent: Dropbox.Api.FileProperties
  name: GetTemplateArg
  nameWithType: GetTemplateArg
  fullName: Dropbox.Api.FileProperties.GetTemplateArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.GetTemplateResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.FileProperties.GetTemplateResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetTemplateResult>
  nameWithType: Task<GetTemplateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.FileProperties.GetTemplateResult>
  nameWithType.vb: Task(Of GetTemplateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.FileProperties.GetTemplateResult)
  name.vb: Task(Of GetTemplateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.GetTemplateResult
    name: GetTemplateResult
    nameWithType: GetTemplateResult
    fullName: Dropbox.Api.FileProperties.GetTemplateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.GetTemplateResult
    name: GetTemplateResult
    nameWithType: GetTemplateResult
    fullName: Dropbox.Api.FileProperties.GetTemplateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet
  name: BeginPropertiesTemplateGet
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet
  name: EndPropertiesTemplateGet
  nameWithType: FilesUserRoutes.EndPropertiesTemplateGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet
- uid: Dropbox.Api.FileProperties.GetTemplateResult
  commentId: T:Dropbox.Api.FileProperties.GetTemplateResult
  parent: Dropbox.Api.FileProperties
  name: GetTemplateResult
  nameWithType: GetTemplateResult
  fullName: Dropbox.Api.FileProperties.GetTemplateResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
  name: PropertiesTemplateListAsync
  nameWithType: FilesUserRoutes.PropertiesTemplateListAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.ListTemplateResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.FileProperties.ListTemplateResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ListTemplateResult>
  nameWithType: Task<ListTemplateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.FileProperties.ListTemplateResult>
  nameWithType.vb: Task(Of ListTemplateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.FileProperties.ListTemplateResult)
  name.vb: Task(Of ListTemplateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.ListTemplateResult
    name: ListTemplateResult
    nameWithType: ListTemplateResult
    fullName: Dropbox.Api.FileProperties.ListTemplateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.ListTemplateResult
    name: ListTemplateResult
    nameWithType: ListTemplateResult
    fullName: Dropbox.Api.FileProperties.ListTemplateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList
  name: BeginPropertiesTemplateList
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateList
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList
  name: EndPropertiesTemplateList
  nameWithType: FilesUserRoutes.EndPropertiesTemplateList
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList
- uid: Dropbox.Api.FileProperties.ListTemplateResult
  commentId: T:Dropbox.Api.FileProperties.ListTemplateResult
  parent: Dropbox.Api.FileProperties
  name: ListTemplateResult
  nameWithType: ListTemplateResult
  fullName: Dropbox.Api.FileProperties.ListTemplateResult
- uid: Dropbox.Api.FileProperties.UpdatePropertiesError
  commentId: T:Dropbox.Api.FileProperties.UpdatePropertiesError
  parent: Dropbox.Api.FileProperties
  name: UpdatePropertiesError
  nameWithType: UpdatePropertiesError
  fullName: Dropbox.Api.FileProperties.UpdatePropertiesError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync
  name: PropertiesUpdateAsync
  nameWithType: FilesUserRoutes.PropertiesUpdateAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync
- uid: Dropbox.Api.FileProperties.UpdatePropertiesArg
  commentId: T:Dropbox.Api.FileProperties.UpdatePropertiesArg
  parent: Dropbox.Api.FileProperties
  name: UpdatePropertiesArg
  nameWithType: UpdatePropertiesArg
  fullName: Dropbox.Api.FileProperties.UpdatePropertiesArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate
  name: BeginPropertiesUpdate
  nameWithType: FilesUserRoutes.BeginPropertiesUpdate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate}
  commentId: T:System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PropertyGroupUpdate>
  nameWithType: IEnumerable<PropertyGroupUpdate>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroupUpdate>
  nameWithType.vb: IEnumerable(Of PropertyGroupUpdate)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroupUpdate)
  name.vb: IEnumerable(Of PropertyGroupUpdate)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.PropertyGroupUpdate
    name: PropertyGroupUpdate
    nameWithType: PropertyGroupUpdate
    fullName: Dropbox.Api.FileProperties.PropertyGroupUpdate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.PropertyGroupUpdate
    name: PropertyGroupUpdate
    nameWithType: PropertyGroupUpdate
    fullName: Dropbox.Api.FileProperties.PropertyGroupUpdate
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate
  name: EndPropertiesUpdate
  nameWithType: FilesUserRoutes.EndPropertiesUpdate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate
- uid: Dropbox.Api.Files.RestoreError
  commentId: T:Dropbox.Api.Files.RestoreError
  parent: Dropbox.Api.Files
  name: RestoreError
  nameWithType: RestoreError
  fullName: Dropbox.Api.Files.RestoreError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync
  name: RestoreAsync
  nameWithType: FilesUserRoutes.RestoreAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync
- uid: Dropbox.Api.Files.RestoreArg
  commentId: T:Dropbox.Api.Files.RestoreArg
  parent: Dropbox.Api.Files
  name: RestoreArg
  nameWithType: RestoreArg
  fullName: Dropbox.Api.Files.RestoreArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore
  name: BeginRestore
  nameWithType: FilesUserRoutes.BeginRestore
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore
  name: EndRestore
  nameWithType: FilesUserRoutes.EndRestore
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore
- uid: Dropbox.Api.Files.SaveUrlError
  commentId: T:Dropbox.Api.Files.SaveUrlError
  parent: Dropbox.Api.Files
  name: SaveUrlError
  nameWithType: SaveUrlError
  fullName: Dropbox.Api.Files.SaveUrlError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync
  name: SaveUrlAsync
  nameWithType: FilesUserRoutes.SaveUrlAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync
- uid: Dropbox.Api.Files.SaveUrlArg
  commentId: T:Dropbox.Api.Files.SaveUrlArg
  parent: Dropbox.Api.Files
  name: SaveUrlArg
  nameWithType: SaveUrlArg
  fullName: Dropbox.Api.Files.SaveUrlArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SaveUrlResult>
  nameWithType: Task<SaveUrlResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SaveUrlResult>
  nameWithType.vb: Task(Of SaveUrlResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SaveUrlResult)
  name.vb: Task(Of SaveUrlResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SaveUrlResult
    name: SaveUrlResult
    nameWithType: SaveUrlResult
    fullName: Dropbox.Api.Files.SaveUrlResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SaveUrlResult
    name: SaveUrlResult
    nameWithType: SaveUrlResult
    fullName: Dropbox.Api.Files.SaveUrlResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl
  name: BeginSaveUrl
  nameWithType: FilesUserRoutes.BeginSaveUrl
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl
  name: EndSaveUrl
  nameWithType: FilesUserRoutes.EndSaveUrl
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl
- uid: Dropbox.Api.Files.SaveUrlResult
  commentId: T:Dropbox.Api.Files.SaveUrlResult
  parent: Dropbox.Api.Files
  name: SaveUrlResult
  nameWithType: SaveUrlResult
  fullName: Dropbox.Api.Files.SaveUrlResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync
  name: SaveUrlCheckJobStatusAsync
  nameWithType: FilesUserRoutes.SaveUrlCheckJobStatusAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlJobStatus}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlJobStatus}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SaveUrlJobStatus>
  nameWithType: Task<SaveUrlJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SaveUrlJobStatus>
  nameWithType.vb: Task(Of SaveUrlJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SaveUrlJobStatus)
  name.vb: Task(Of SaveUrlJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SaveUrlJobStatus
    name: SaveUrlJobStatus
    nameWithType: SaveUrlJobStatus
    fullName: Dropbox.Api.Files.SaveUrlJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SaveUrlJobStatus
    name: SaveUrlJobStatus
    nameWithType: SaveUrlJobStatus
    fullName: Dropbox.Api.Files.SaveUrlJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus
  name: BeginSaveUrlCheckJobStatus
  nameWithType: FilesUserRoutes.BeginSaveUrlCheckJobStatus
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus
  name: EndSaveUrlCheckJobStatus
  nameWithType: FilesUserRoutes.EndSaveUrlCheckJobStatus
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus
- uid: Dropbox.Api.Files.SaveUrlJobStatus
  commentId: T:Dropbox.Api.Files.SaveUrlJobStatus
  parent: Dropbox.Api.Files
  name: SaveUrlJobStatus
  nameWithType: SaveUrlJobStatus
  fullName: Dropbox.Api.Files.SaveUrlJobStatus
- uid: Dropbox.Api.Files.SearchError
  commentId: T:Dropbox.Api.Files.SearchError
  parent: Dropbox.Api.Files
  name: SearchError
  nameWithType: SearchError
  fullName: Dropbox.Api.Files.SearchError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync
  name: SearchAsync
  nameWithType: FilesUserRoutes.SearchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync
- uid: Dropbox.Api.Files.SearchArg
  commentId: T:Dropbox.Api.Files.SearchArg
  parent: Dropbox.Api.Files
  name: SearchArg
  nameWithType: SearchArg
  fullName: Dropbox.Api.Files.SearchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.SearchResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SearchResult>
  nameWithType: Task<SearchResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SearchResult>
  nameWithType.vb: Task(Of SearchResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SearchResult)
  name.vb: Task(Of SearchResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Dropbox.Api.Files.SearchResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Dropbox.Api.Files.SearchResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch
  name: BeginSearch
  nameWithType: FilesUserRoutes.BeginSearch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch
- uid: Dropbox.Api.Files.SearchMode
  commentId: T:Dropbox.Api.Files.SearchMode
  parent: Dropbox.Api.Files
  name: SearchMode
  nameWithType: SearchMode
  fullName: Dropbox.Api.Files.SearchMode
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch
  name: EndSearch
  nameWithType: FilesUserRoutes.EndSearch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch
- uid: Dropbox.Api.Files.SearchResult
  commentId: T:Dropbox.Api.Files.SearchResult
  parent: Dropbox.Api.Files
  name: SearchResult
  nameWithType: SearchResult
  fullName: Dropbox.Api.Files.SearchResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async
  name: SearchV2Async
  nameWithType: FilesUserRoutes.SearchV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async
- uid: Dropbox.Api.Files.SearchV2Arg
  commentId: T:Dropbox.Api.Files.SearchV2Arg
  parent: Dropbox.Api.Files
  name: SearchV2Arg
  nameWithType: SearchV2Arg
  fullName: Dropbox.Api.Files.SearchV2Arg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<SearchV2Result>
  nameWithType: Task<SearchV2Result>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SearchV2Result>
  nameWithType.vb: Task(Of SearchV2Result)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SearchV2Result)
  name.vb: Task(Of SearchV2Result)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SearchV2Result
    name: SearchV2Result
    nameWithType: SearchV2Result
    fullName: Dropbox.Api.Files.SearchV2Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SearchV2Result
    name: SearchV2Result
    nameWithType: SearchV2Result
    fullName: Dropbox.Api.Files.SearchV2Result
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2
  name: BeginSearchV2
  nameWithType: FilesUserRoutes.BeginSearchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2
- uid: Dropbox.Api.Files.SearchOptions
  commentId: T:Dropbox.Api.Files.SearchOptions
  parent: Dropbox.Api.Files
  name: SearchOptions
  nameWithType: SearchOptions
  fullName: Dropbox.Api.Files.SearchOptions
- uid: Dropbox.Api.Files.SearchMatchFieldOptions
  commentId: T:Dropbox.Api.Files.SearchMatchFieldOptions
  parent: Dropbox.Api.Files
  name: SearchMatchFieldOptions
  nameWithType: SearchMatchFieldOptions
  fullName: Dropbox.Api.Files.SearchMatchFieldOptions
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2
  name: EndSearchV2
  nameWithType: FilesUserRoutes.EndSearchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2
- uid: Dropbox.Api.Files.SearchV2Result
  commentId: T:Dropbox.Api.Files.SearchV2Result
  parent: Dropbox.Api.Files
  name: SearchV2Result
  nameWithType: SearchV2Result
  fullName: Dropbox.Api.Files.SearchV2Result
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async
  name: SearchContinueV2Async
  nameWithType: FilesUserRoutes.SearchContinueV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async
- uid: Dropbox.Api.Files.SearchV2ContinueArg
  commentId: T:Dropbox.Api.Files.SearchV2ContinueArg
  parent: Dropbox.Api.Files
  name: SearchV2ContinueArg
  nameWithType: SearchV2ContinueArg
  fullName: Dropbox.Api.Files.SearchV2ContinueArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2
  name: BeginSearchContinueV2
  nameWithType: FilesUserRoutes.BeginSearchContinueV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2
  name: EndSearchContinueV2
  nameWithType: FilesUserRoutes.EndSearchContinueV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2
- uid: Dropbox.Api.Files.AddTagError
  commentId: T:Dropbox.Api.Files.AddTagError
  parent: Dropbox.Api.Files
  name: AddTagError
  nameWithType: AddTagError
  fullName: Dropbox.Api.Files.AddTagError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync
  name: TagsAddAsync
  nameWithType: FilesUserRoutes.TagsAddAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsAddAsync
- uid: Dropbox.Api.Files.AddTagArg
  commentId: T:Dropbox.Api.Files.AddTagArg
  parent: Dropbox.Api.Files
  name: AddTagArg
  nameWithType: AddTagArg
  fullName: Dropbox.Api.Files.AddTagArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd
  name: BeginTagsAdd
  nameWithType: FilesUserRoutes.BeginTagsAdd
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsAdd
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsAdd*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsAdd
  name: EndTagsAdd
  nameWithType: FilesUserRoutes.EndTagsAdd
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsAdd
- uid: Dropbox.Api.Files.BaseTagError
  commentId: T:Dropbox.Api.Files.BaseTagError
  parent: Dropbox.Api.Files
  name: BaseTagError
  nameWithType: BaseTagError
  fullName: Dropbox.Api.Files.BaseTagError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync
  name: TagsGetAsync
  nameWithType: FilesUserRoutes.TagsGetAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsGetAsync
- uid: Dropbox.Api.Files.GetTagsArg
  commentId: T:Dropbox.Api.Files.GetTagsArg
  parent: Dropbox.Api.Files
  name: GetTagsArg
  nameWithType: GetTagsArg
  fullName: Dropbox.Api.Files.GetTagsArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTagsResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.GetTagsResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<GetTagsResult>
  nameWithType: Task<GetTagsResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.GetTagsResult>
  nameWithType.vb: Task(Of GetTagsResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.GetTagsResult)
  name.vb: Task(Of GetTagsResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.GetTagsResult
    name: GetTagsResult
    nameWithType: GetTagsResult
    fullName: Dropbox.Api.Files.GetTagsResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.GetTagsResult
    name: GetTagsResult
    nameWithType: GetTagsResult
    fullName: Dropbox.Api.Files.GetTagsResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet
  name: BeginTagsGet
  nameWithType: FilesUserRoutes.BeginTagsGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsGet
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsGet
  name: EndTagsGet
  nameWithType: FilesUserRoutes.EndTagsGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsGet
- uid: Dropbox.Api.Files.GetTagsResult
  commentId: T:Dropbox.Api.Files.GetTagsResult
  parent: Dropbox.Api.Files
  name: GetTagsResult
  nameWithType: GetTagsResult
  fullName: Dropbox.Api.Files.GetTagsResult
- uid: Dropbox.Api.Files.RemoveTagError
  commentId: T:Dropbox.Api.Files.RemoveTagError
  parent: Dropbox.Api.Files
  name: RemoveTagError
  nameWithType: RemoveTagError
  fullName: Dropbox.Api.Files.RemoveTagError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync
  name: TagsRemoveAsync
  nameWithType: FilesUserRoutes.TagsRemoveAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.TagsRemoveAsync
- uid: Dropbox.Api.Files.RemoveTagArg
  commentId: T:Dropbox.Api.Files.RemoveTagArg
  parent: Dropbox.Api.Files
  name: RemoveTagArg
  nameWithType: RemoveTagArg
  fullName: Dropbox.Api.Files.RemoveTagArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove
  name: BeginTagsRemove
  nameWithType: FilesUserRoutes.BeginTagsRemove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginTagsRemove
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsRemove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsRemove
  name: EndTagsRemove
  nameWithType: FilesUserRoutes.EndTagsRemove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndTagsRemove
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync
  name: UnlockFileBatchAsync
  nameWithType: FilesUserRoutes.UnlockFileBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync
- uid: Dropbox.Api.Files.UnlockFileBatchArg
  commentId: T:Dropbox.Api.Files.UnlockFileBatchArg
  parent: Dropbox.Api.Files
  name: UnlockFileBatchArg
  nameWithType: UnlockFileBatchArg
  fullName: Dropbox.Api.Files.UnlockFileBatchArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch
  name: BeginUnlockFileBatch
  nameWithType: FilesUserRoutes.BeginUnlockFileBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg}
  commentId: T:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<UnlockFileArg>
  nameWithType: IEnumerable<UnlockFileArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UnlockFileArg>
  nameWithType.vb: IEnumerable(Of UnlockFileArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UnlockFileArg)
  name.vb: IEnumerable(Of UnlockFileArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UnlockFileArg
    name: UnlockFileArg
    nameWithType: UnlockFileArg
    fullName: Dropbox.Api.Files.UnlockFileArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UnlockFileArg
    name: UnlockFileArg
    nameWithType: UnlockFileArg
    fullName: Dropbox.Api.Files.UnlockFileArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch
  name: EndUnlockFileBatch
  nameWithType: FilesUserRoutes.EndUnlockFileBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync
  name: UploadAsync
  nameWithType: FilesUserRoutes.UploadAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload
  name: BeginUpload
  nameWithType: FilesUserRoutes.BeginUpload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload
  name: EndUpload
  nameWithType: FilesUserRoutes.EndUpload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload
- uid: Dropbox.Api.Files.UploadSessionAppendError
  commentId: T:Dropbox.Api.Files.UploadSessionAppendError
  parent: Dropbox.Api.Files
  name: UploadSessionAppendError
  nameWithType: UploadSessionAppendError
  fullName: Dropbox.Api.Files.UploadSessionAppendError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async
  name: UploadSessionAppendV2Async
  nameWithType: FilesUserRoutes.UploadSessionAppendV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async
- uid: Dropbox.Api.Files.UploadSessionAppendArg
  commentId: T:Dropbox.Api.Files.UploadSessionAppendArg
  parent: Dropbox.Api.Files
  name: UploadSessionAppendArg
  nameWithType: UploadSessionAppendArg
  fullName: Dropbox.Api.Files.UploadSessionAppendArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2
  name: BeginUploadSessionAppendV2
  nameWithType: FilesUserRoutes.BeginUploadSessionAppendV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionCursor
  commentId: T:Dropbox.Api.Files.UploadSessionCursor
  parent: Dropbox.Api.Files
  name: UploadSessionCursor
  nameWithType: UploadSessionCursor
  fullName: Dropbox.Api.Files.UploadSessionCursor
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2
  name: EndUploadSessionAppendV2
  nameWithType: FilesUserRoutes.EndUploadSessionAppendV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync
  name: UploadSessionAppendAsync
  nameWithType: FilesUserRoutes.UploadSessionAppendAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend
  name: BeginUploadSessionAppend
  nameWithType: FilesUserRoutes.BeginUploadSessionAppend
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend
  name: EndUploadSessionAppend
  nameWithType: FilesUserRoutes.EndUploadSessionAppend
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend
- uid: Dropbox.Api.Files.UploadSessionFinishError
  commentId: T:Dropbox.Api.Files.UploadSessionFinishError
  parent: Dropbox.Api.Files
  name: UploadSessionFinishError
  nameWithType: UploadSessionFinishError
  fullName: Dropbox.Api.Files.UploadSessionFinishError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync
  name: UploadSessionFinishAsync
  nameWithType: FilesUserRoutes.UploadSessionFinishAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync
- uid: Dropbox.Api.Files.UploadSessionFinishArg
  commentId: T:Dropbox.Api.Files.UploadSessionFinishArg
  parent: Dropbox.Api.Files
  name: UploadSessionFinishArg
  nameWithType: UploadSessionFinishArg
  fullName: Dropbox.Api.Files.UploadSessionFinishArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish
  name: BeginUploadSessionFinish
  nameWithType: FilesUserRoutes.BeginUploadSessionFinish
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish
  name: EndUploadSessionFinish
  nameWithType: FilesUserRoutes.EndUploadSessionFinish
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionStartArg.Close
  commentId: P:Dropbox.Api.Files.UploadSessionStartArg.Close
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionAppendArg.Close
  commentId: P:Dropbox.Api.Files.UploadSessionAppendArg.Close
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync
  name: UploadSessionFinishBatchAsync
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync
- uid: Dropbox.Api.Files.UploadSessionFinishBatchArg
  commentId: T:Dropbox.Api.Files.UploadSessionFinishBatchArg
  parent: Dropbox.Api.Files
  name: UploadSessionFinishBatchArg
  nameWithType: UploadSessionFinishBatchArg
  fullName: Dropbox.Api.Files.UploadSessionFinishBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchLaunch}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchLaunch}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UploadSessionFinishBatchLaunch>
  nameWithType: Task<UploadSessionFinishBatchLaunch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.UploadSessionFinishBatchLaunch>
  nameWithType.vb: Task(Of UploadSessionFinishBatchLaunch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.UploadSessionFinishBatchLaunch)
  name.vb: Task(Of UploadSessionFinishBatchLaunch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
    name: UploadSessionFinishBatchLaunch
    nameWithType: UploadSessionFinishBatchLaunch
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
    name: UploadSessionFinishBatchLaunch
    nameWithType: UploadSessionFinishBatchLaunch
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch
  name: BeginUploadSessionFinishBatch
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}
  commentId: T:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<UploadSessionFinishArg>
  nameWithType: IEnumerable<UploadSessionFinishArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UploadSessionFinishArg>
  nameWithType.vb: IEnumerable(Of UploadSessionFinishArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UploadSessionFinishArg)
  name.vb: IEnumerable(Of UploadSessionFinishArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionFinishArg
    name: UploadSessionFinishArg
    nameWithType: UploadSessionFinishArg
    fullName: Dropbox.Api.Files.UploadSessionFinishArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionFinishArg
    name: UploadSessionFinishArg
    nameWithType: UploadSessionFinishArg
    fullName: Dropbox.Api.Files.UploadSessionFinishArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch
  name: EndUploadSessionFinishBatch
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch
- uid: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
  commentId: T:Dropbox.Api.Files.UploadSessionFinishBatchLaunch
  parent: Dropbox.Api.Files
  name: UploadSessionFinishBatchLaunch
  nameWithType: UploadSessionFinishBatchLaunch
  fullName: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async
  name: UploadSessionFinishBatchV2Async
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchV2Async
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UploadSessionFinishBatchResult>
  nameWithType: Task<UploadSessionFinishBatchResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.UploadSessionFinishBatchResult>
  nameWithType.vb: Task(Of UploadSessionFinishBatchResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.UploadSessionFinishBatchResult)
  name.vb: Task(Of UploadSessionFinishBatchResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchResult
    name: UploadSessionFinishBatchResult
    nameWithType: UploadSessionFinishBatchResult
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchResult
    name: UploadSessionFinishBatchResult
    nameWithType: UploadSessionFinishBatchResult
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2
  name: BeginUploadSessionFinishBatchV2
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchV2
  name: EndUploadSessionFinishBatchV2
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchV2
- uid: Dropbox.Api.Files.UploadSessionFinishBatchResult
  commentId: T:Dropbox.Api.Files.UploadSessionFinishBatchResult
  parent: Dropbox.Api.Files
  name: UploadSessionFinishBatchResult
  nameWithType: UploadSessionFinishBatchResult
  fullName: Dropbox.Api.Files.UploadSessionFinishBatchResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync
  name: UploadSessionFinishBatchCheckAsync
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchJobStatus}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchJobStatus}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UploadSessionFinishBatchJobStatus>
  nameWithType: Task<UploadSessionFinishBatchJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.UploadSessionFinishBatchJobStatus>
  nameWithType.vb: Task(Of UploadSessionFinishBatchJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.UploadSessionFinishBatchJobStatus)
  name.vb: Task(Of UploadSessionFinishBatchJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
    name: UploadSessionFinishBatchJobStatus
    nameWithType: UploadSessionFinishBatchJobStatus
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
    name: UploadSessionFinishBatchJobStatus
    nameWithType: UploadSessionFinishBatchJobStatus
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck
  name: BeginUploadSessionFinishBatchCheck
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck
  name: EndUploadSessionFinishBatchCheck
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck
- uid: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
  commentId: T:Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
  parent: Dropbox.Api.Files
  name: UploadSessionFinishBatchJobStatus
  nameWithType: UploadSessionFinishBatchJobStatus
  fullName: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
- uid: Dropbox.Api.Files.UploadSessionStartResult.SessionId
  commentId: P:Dropbox.Api.Files.UploadSessionStartResult.SessionId
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionLookupError.NotFound
  commentId: T:Dropbox.Api.Files.UploadSessionLookupError.NotFound
  parent: Dropbox.Api.Files
  name: UploadSessionLookupError.NotFound
  nameWithType: UploadSessionLookupError.NotFound
  fullName: Dropbox.Api.Files.UploadSessionLookupError.NotFound
- uid: Dropbox.Api.Files.UploadSessionType.Concurrent
  commentId: T:Dropbox.Api.Files.UploadSessionType.Concurrent
  parent: Dropbox.Api.Files
  name: UploadSessionType.Concurrent
  nameWithType: UploadSessionType.Concurrent
  fullName: Dropbox.Api.Files.UploadSessionType.Concurrent
- uid: Dropbox.Api.Files.UploadSessionStartArg.SessionType
  commentId: P:Dropbox.Api.Files.UploadSessionStartArg.SessionType
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionStartError
  commentId: T:Dropbox.Api.Files.UploadSessionStartError
  parent: Dropbox.Api.Files
  name: UploadSessionStartError
  nameWithType: UploadSessionStartError
  fullName: Dropbox.Api.Files.UploadSessionStartError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync
  name: UploadSessionStartAsync
  nameWithType: FilesUserRoutes.UploadSessionStartAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync
- uid: Dropbox.Api.Files.UploadSessionStartArg
  commentId: T:Dropbox.Api.Files.UploadSessionStartArg
  parent: Dropbox.Api.Files
  name: UploadSessionStartArg
  nameWithType: UploadSessionStartArg
  fullName: Dropbox.Api.Files.UploadSessionStartArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UploadSessionStartResult>
  nameWithType: Task<UploadSessionStartResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.UploadSessionStartResult>
  nameWithType.vb: Task(Of UploadSessionStartResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.UploadSessionStartResult)
  name.vb: Task(Of UploadSessionStartResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionStartResult
    name: UploadSessionStartResult
    nameWithType: UploadSessionStartResult
    fullName: Dropbox.Api.Files.UploadSessionStartResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionStartResult
    name: UploadSessionStartResult
    nameWithType: UploadSessionStartResult
    fullName: Dropbox.Api.Files.UploadSessionStartResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart
  name: BeginUploadSessionStart
  nameWithType: FilesUserRoutes.BeginUploadSessionStart
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart
- uid: Dropbox.Api.Files.UploadSessionType.Sequential
  commentId: T:Dropbox.Api.Files.UploadSessionType.Sequential
  parent: Dropbox.Api.Files
  name: UploadSessionType.Sequential
  nameWithType: UploadSessionType.Sequential
  fullName: Dropbox.Api.Files.UploadSessionType.Sequential
- uid: Dropbox.Api.Files.UploadSessionType
  commentId: T:Dropbox.Api.Files.UploadSessionType
  parent: Dropbox.Api.Files
  name: UploadSessionType
  nameWithType: UploadSessionType
  fullName: Dropbox.Api.Files.UploadSessionType
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart
  name: EndUploadSessionStart
  nameWithType: FilesUserRoutes.EndUploadSessionStart
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart
- uid: Dropbox.Api.Files.UploadSessionStartResult
  commentId: T:Dropbox.Api.Files.UploadSessionStartResult
  parent: Dropbox.Api.Files
  name: UploadSessionStartResult
  nameWithType: UploadSessionStartResult
  fullName: Dropbox.Api.Files.UploadSessionStartResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync
  name: UploadSessionStartBatchAsync
  nameWithType: FilesUserRoutes.UploadSessionStartBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartBatchAsync
- uid: Dropbox.Api.Files.UploadSessionStartBatchArg
  commentId: T:Dropbox.Api.Files.UploadSessionStartBatchArg
  parent: Dropbox.Api.Files
  name: UploadSessionStartBatchArg
  nameWithType: UploadSessionStartBatchArg
  fullName: Dropbox.Api.Files.UploadSessionStartBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartBatchResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartBatchResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UploadSessionStartBatchResult>
  nameWithType: Task<UploadSessionStartBatchResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.UploadSessionStartBatchResult>
  nameWithType.vb: Task(Of UploadSessionStartBatchResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.UploadSessionStartBatchResult)
  name.vb: Task(Of UploadSessionStartBatchResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionStartBatchResult
    name: UploadSessionStartBatchResult
    nameWithType: UploadSessionStartBatchResult
    fullName: Dropbox.Api.Files.UploadSessionStartBatchResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionStartBatchResult
    name: UploadSessionStartBatchResult
    nameWithType: UploadSessionStartBatchResult
    fullName: Dropbox.Api.Files.UploadSessionStartBatchResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch
  name: BeginUploadSessionStartBatch
  nameWithType: FilesUserRoutes.BeginUploadSessionStartBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStartBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStartBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStartBatch
  name: EndUploadSessionStartBatch
  nameWithType: FilesUserRoutes.EndUploadSessionStartBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStartBatch
- uid: Dropbox.Api.Files.UploadSessionStartBatchResult
  commentId: T:Dropbox.Api.Files.UploadSessionStartBatchResult
  parent: Dropbox.Api.Files
  name: UploadSessionStartBatchResult
  nameWithType: UploadSessionStartBatchResult
  fullName: Dropbox.Api.Files.UploadSessionStartBatchResult
