### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.TeamLog.RewindPolicy
  commentId: T:Dropbox.Api.TeamLog.RewindPolicy
  id: RewindPolicy
  parent: Dropbox.Api.TeamLog
  children:
  - Dropbox.Api.TeamLog.RewindPolicy.#ctor
  - Dropbox.Api.TeamLog.RewindPolicy.AsAdminsOnly
  - Dropbox.Api.TeamLog.RewindPolicy.AsEveryone
  - Dropbox.Api.TeamLog.RewindPolicy.AsOther
  - Dropbox.Api.TeamLog.RewindPolicy.IsAdminsOnly
  - Dropbox.Api.TeamLog.RewindPolicy.IsEveryone
  - Dropbox.Api.TeamLog.RewindPolicy.IsOther
  langs:
  - csharp
  - vb
  name: RewindPolicy
  nameWithType: RewindPolicy
  fullName: Dropbox.Api.TeamLog.RewindPolicy
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: RewindPolicy
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
    startLine: 15
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog
  summary: "\n<p>Policy for controlling whether team members can rewind</p>\n"
  example: []
  syntax:
    content: public class RewindPolicy
    content.vb: Public Class RewindPolicy
  inheritance:
  - System.Object
  derivedClasses:
  - Dropbox.Api.TeamLog.RewindPolicy.AdminsOnly
  - Dropbox.Api.TeamLog.RewindPolicy.Everyone
  - Dropbox.Api.TeamLog.RewindPolicy.Other
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.TeamLog.RewindPolicy.#ctor
  commentId: M:Dropbox.Api.TeamLog.RewindPolicy.#ctor
  id: '#ctor'
  parent: Dropbox.Api.TeamLog.RewindPolicy
  langs:
  - csharp
  - vb
  name: RewindPolicy()
  nameWithType: RewindPolicy.RewindPolicy()
  fullName: Dropbox.Api.TeamLog.RewindPolicy.RewindPolicy()
  type: Constructor
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: .ctor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
    startLine: 32
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog
  summary: "\n<p>Initializes a new instance of the <xref href=\"Dropbox.Api.TeamLog.RewindPolicy\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example: []
  syntax:
    content: public RewindPolicy()
    content.vb: Public Sub New
  overload: Dropbox.Api.TeamLog.RewindPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.TeamLog.RewindPolicy.IsAdminsOnly
  commentId: P:Dropbox.Api.TeamLog.RewindPolicy.IsAdminsOnly
  id: IsAdminsOnly
  parent: Dropbox.Api.TeamLog.RewindPolicy
  langs:
  - csharp
  - vb
  name: IsAdminsOnly
  nameWithType: RewindPolicy.IsAdminsOnly
  fullName: Dropbox.Api.TeamLog.RewindPolicy.IsAdminsOnly
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: IsAdminsOnly
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
    startLine: 39
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog
  summary: "\n<p>Gets a value indicating whether this instance is AdminsOnly</p>\n"
  example: []
  syntax:
    content: public bool IsAdminsOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsAdminsOnly As Boolean
  overload: Dropbox.Api.TeamLog.RewindPolicy.IsAdminsOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.TeamLog.RewindPolicy.AsAdminsOnly
  commentId: P:Dropbox.Api.TeamLog.RewindPolicy.AsAdminsOnly
  id: AsAdminsOnly
  parent: Dropbox.Api.TeamLog.RewindPolicy
  langs:
  - csharp
  - vb
  name: AsAdminsOnly
  nameWithType: RewindPolicy.AsAdminsOnly
  fullName: Dropbox.Api.TeamLog.RewindPolicy.AsAdminsOnly
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AsAdminsOnly
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
    startLine: 50
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog
  summary: "\n<p>Gets this instance as a AdminsOnly, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public RewindPolicy.AdminsOnly AsAdminsOnly { get; }
    parameters: []
    return:
      type: Dropbox.Api.TeamLog.RewindPolicy.AdminsOnly
    content.vb: Public ReadOnly Property AsAdminsOnly As RewindPolicy.AdminsOnly
  overload: Dropbox.Api.TeamLog.RewindPolicy.AsAdminsOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.TeamLog.RewindPolicy.IsEveryone
  commentId: P:Dropbox.Api.TeamLog.RewindPolicy.IsEveryone
  id: IsEveryone
  parent: Dropbox.Api.TeamLog.RewindPolicy
  langs:
  - csharp
  - vb
  name: IsEveryone
  nameWithType: RewindPolicy.IsEveryone
  fullName: Dropbox.Api.TeamLog.RewindPolicy.IsEveryone
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: IsEveryone
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
    startLine: 61
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog
  summary: "\n<p>Gets a value indicating whether this instance is Everyone</p>\n"
  example: []
  syntax:
    content: public bool IsEveryone { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEveryone As Boolean
  overload: Dropbox.Api.TeamLog.RewindPolicy.IsEveryone*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.TeamLog.RewindPolicy.AsEveryone
  commentId: P:Dropbox.Api.TeamLog.RewindPolicy.AsEveryone
  id: AsEveryone
  parent: Dropbox.Api.TeamLog.RewindPolicy
  langs:
  - csharp
  - vb
  name: AsEveryone
  nameWithType: RewindPolicy.AsEveryone
  fullName: Dropbox.Api.TeamLog.RewindPolicy.AsEveryone
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AsEveryone
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
    startLine: 72
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog
  summary: "\n<p>Gets this instance as a Everyone, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public RewindPolicy.Everyone AsEveryone { get; }
    parameters: []
    return:
      type: Dropbox.Api.TeamLog.RewindPolicy.Everyone
    content.vb: Public ReadOnly Property AsEveryone As RewindPolicy.Everyone
  overload: Dropbox.Api.TeamLog.RewindPolicy.AsEveryone*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.TeamLog.RewindPolicy.IsOther
  commentId: P:Dropbox.Api.TeamLog.RewindPolicy.IsOther
  id: IsOther
  parent: Dropbox.Api.TeamLog.RewindPolicy
  langs:
  - csharp
  - vb
  name: IsOther
  nameWithType: RewindPolicy.IsOther
  fullName: Dropbox.Api.TeamLog.RewindPolicy.IsOther
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: IsOther
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
    startLine: 83
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog
  summary: "\n<p>Gets a value indicating whether this instance is Other</p>\n"
  example: []
  syntax:
    content: public bool IsOther { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsOther As Boolean
  overload: Dropbox.Api.TeamLog.RewindPolicy.IsOther*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Dropbox.Api.TeamLog.RewindPolicy.AsOther
  commentId: P:Dropbox.Api.TeamLog.RewindPolicy.AsOther
  id: AsOther
  parent: Dropbox.Api.TeamLog.RewindPolicy
  langs:
  - csharp
  - vb
  name: AsOther
  nameWithType: RewindPolicy.AsOther
  fullName: Dropbox.Api.TeamLog.RewindPolicy.AsOther
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: AsOther
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/TeamLog/RewindPolicy.cs
    startLine: 94
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.TeamLog
  summary: "\n<p>Gets this instance as a Other, or <code>null</code>.</p>\n"
  example: []
  syntax:
    content: public RewindPolicy.Other AsOther { get; }
    parameters: []
    return:
      type: Dropbox.Api.TeamLog.RewindPolicy.Other
    content.vb: Public ReadOnly Property AsOther As RewindPolicy.Other
  overload: Dropbox.Api.TeamLog.RewindPolicy.AsOther*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Dropbox.Api.TeamLog
  commentId: N:Dropbox.Api.TeamLog
  name: Dropbox.Api.TeamLog
  nameWithType: Dropbox.Api.TeamLog
  fullName: Dropbox.Api.TeamLog
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dropbox.Api.TeamLog.RewindPolicy
  commentId: T:Dropbox.Api.TeamLog.RewindPolicy
  parent: Dropbox.Api.TeamLog
  name: RewindPolicy
  nameWithType: RewindPolicy
  fullName: Dropbox.Api.TeamLog.RewindPolicy
- uid: Dropbox.Api.TeamLog.RewindPolicy.#ctor*
  commentId: Overload:Dropbox.Api.TeamLog.RewindPolicy.#ctor
  name: RewindPolicy
  nameWithType: RewindPolicy.RewindPolicy
  fullName: Dropbox.Api.TeamLog.RewindPolicy.RewindPolicy
- uid: Dropbox.Api.TeamLog.RewindPolicy.IsAdminsOnly*
  commentId: Overload:Dropbox.Api.TeamLog.RewindPolicy.IsAdminsOnly
  name: IsAdminsOnly
  nameWithType: RewindPolicy.IsAdminsOnly
  fullName: Dropbox.Api.TeamLog.RewindPolicy.IsAdminsOnly
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Dropbox.Api.TeamLog.RewindPolicy.AsAdminsOnly*
  commentId: Overload:Dropbox.Api.TeamLog.RewindPolicy.AsAdminsOnly
  name: AsAdminsOnly
  nameWithType: RewindPolicy.AsAdminsOnly
  fullName: Dropbox.Api.TeamLog.RewindPolicy.AsAdminsOnly
- uid: Dropbox.Api.TeamLog.RewindPolicy.AdminsOnly
  commentId: T:Dropbox.Api.TeamLog.RewindPolicy.AdminsOnly
  parent: Dropbox.Api.TeamLog
  name: RewindPolicy.AdminsOnly
  nameWithType: RewindPolicy.AdminsOnly
  fullName: Dropbox.Api.TeamLog.RewindPolicy.AdminsOnly
- uid: Dropbox.Api.TeamLog.RewindPolicy.IsEveryone*
  commentId: Overload:Dropbox.Api.TeamLog.RewindPolicy.IsEveryone
  name: IsEveryone
  nameWithType: RewindPolicy.IsEveryone
  fullName: Dropbox.Api.TeamLog.RewindPolicy.IsEveryone
- uid: Dropbox.Api.TeamLog.RewindPolicy.AsEveryone*
  commentId: Overload:Dropbox.Api.TeamLog.RewindPolicy.AsEveryone
  name: AsEveryone
  nameWithType: RewindPolicy.AsEveryone
  fullName: Dropbox.Api.TeamLog.RewindPolicy.AsEveryone
- uid: Dropbox.Api.TeamLog.RewindPolicy.Everyone
  commentId: T:Dropbox.Api.TeamLog.RewindPolicy.Everyone
  parent: Dropbox.Api.TeamLog
  name: RewindPolicy.Everyone
  nameWithType: RewindPolicy.Everyone
  fullName: Dropbox.Api.TeamLog.RewindPolicy.Everyone
- uid: Dropbox.Api.TeamLog.RewindPolicy.IsOther*
  commentId: Overload:Dropbox.Api.TeamLog.RewindPolicy.IsOther
  name: IsOther
  nameWithType: RewindPolicy.IsOther
  fullName: Dropbox.Api.TeamLog.RewindPolicy.IsOther
- uid: Dropbox.Api.TeamLog.RewindPolicy.AsOther*
  commentId: Overload:Dropbox.Api.TeamLog.RewindPolicy.AsOther
  name: AsOther
  nameWithType: RewindPolicy.AsOther
  fullName: Dropbox.Api.TeamLog.RewindPolicy.AsOther
- uid: Dropbox.Api.TeamLog.RewindPolicy.Other
  commentId: T:Dropbox.Api.TeamLog.RewindPolicy.Other
  parent: Dropbox.Api.TeamLog
  name: RewindPolicy.Other
  nameWithType: RewindPolicy.Other
  fullName: Dropbox.Api.TeamLog.RewindPolicy.Other
