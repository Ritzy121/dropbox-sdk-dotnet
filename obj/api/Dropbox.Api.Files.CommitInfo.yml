### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.Files.CommitInfo
  commentId: T:Dropbox.Api.Files.CommitInfo
  id: CommitInfo
  parent: Dropbox.Api.Files
  children:
  - Dropbox.Api.Files.CommitInfo.#ctor(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean)
  - Dropbox.Api.Files.CommitInfo.Autorename
  - Dropbox.Api.Files.CommitInfo.ClientModified
  - Dropbox.Api.Files.CommitInfo.Mode
  - Dropbox.Api.Files.CommitInfo.Mute
  - Dropbox.Api.Files.CommitInfo.Path
  - Dropbox.Api.Files.CommitInfo.PropertyGroups
  - Dropbox.Api.Files.CommitInfo.StrictConflict
  langs:
  - csharp
  - vb
  name: CommitInfo
  nameWithType: CommitInfo
  fullName: Dropbox.Api.Files.CommitInfo
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: CommitInfo
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
    startLine: 18
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>The commit info object</p>\n"
  example: []
  syntax:
    content: public class CommitInfo
    content.vb: Public Class CommitInfo
  seealso:
  - linkId: Dropbox.Api.Files.GetTemporaryUploadLinkArg
    commentId: T:Dropbox.Api.Files.GetTemporaryUploadLinkArg
  - linkId: Dropbox.Api.Files.UploadArg
    commentId: T:Dropbox.Api.Files.UploadArg
  - linkId: Dropbox.Api.Files.UploadSessionFinishArg
    commentId: T:Dropbox.Api.Files.UploadSessionFinishArg
  inheritance:
  - System.Object
  derivedClasses:
  - Dropbox.Api.Files.UploadArg
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.Files.CommitInfo.#ctor(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean)
  commentId: M:Dropbox.Api.Files.CommitInfo.#ctor(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean)
  id: '#ctor(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean)'
  parent: Dropbox.Api.Files.CommitInfo
  langs:
  - csharp
  - vb
  name: CommitInfo(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean)
  nameWithType: CommitInfo.CommitInfo(String, WriteMode, Boolean, Nullable<DateTime>, Boolean, IEnumerable<PropertyGroup>, Boolean)
  fullName: Dropbox.Api.Files.CommitInfo.CommitInfo(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable<System.DateTime>, System.Boolean, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: .ctor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
    startLine: 56
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Initializes a new instance of the <xref href=\"Dropbox.Api.Files.CommitInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example: []
  syntax:
    content: public CommitInfo(string path, WriteMode mode = null, bool autorename = false, DateTime? clientModified = null, bool mute = false, IEnumerable<PropertyGroup> propertyGroups = null, bool strictConflict = false)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to save the file.
    - id: mode
      type: Dropbox.Api.Files.WriteMode
      description: Selects what to do if the file already exists.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, as determined by <code data-dev-comment-type="paramref" class="paramref">mode</code>, have the Dropbox server try to autorename the file to avoid

        conflict.
    - id: clientModified
      type: System.Nullable{System.DateTime}
      description: >-
        The value to store as the <code data-dev-comment-type="paramref" class="paramref">clientModified</code> timestamp. Dropbox automatically records the time at which

        the file was written to the Dropbox servers. It can also record an additional

        timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of

        when the file was actually created or modified.
    - id: mute
      type: System.Boolean
      description: >-
        Normally, users are made aware of any file modifications in

        their Dropbox account via notifications in the client software. If <code>true</code>,

        this tells the clients that this modification shouldn&apos;t result in a user

        notification.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: List of custom properties to add to file.
    - id: strictConflict
      type: System.Boolean
      description: >-
        Be more strict about how each <xref href="Dropbox.Api.Files.WriteMode" data-throw-if-not-resolved="false"></xref>

        detects conflict. For example, always return a conflict error when <code data-dev-comment-type="paramref" class="paramref">mode</code> = <xref href="Dropbox.Api.Files.WriteMode.Update" data-throw-if-not-resolved="false"></xref> and the given

        &quot;rev&quot; doesn&apos;t match the existing file&apos;s &quot;rev&quot;, even if the existing file has been

        deleted. This also forces a conflict even when the target path refers to a file

        with identical contents.
    content.vb: Public Sub New(path As String, mode As WriteMode = Nothing, autorename As Boolean = False, clientModified As Date? = Nothing, mute As Boolean = False, propertyGroups As IEnumerable(Of PropertyGroup) = Nothing, strictConflict As Boolean = False)
  overload: Dropbox.Api.Files.CommitInfo.#ctor*
  nameWithType.vb: CommitInfo.CommitInfo(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.CommitInfo.CommitInfo(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable(Of System.DateTime), System.Boolean, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.Boolean)
  name.vb: CommitInfo(String, WriteMode, Boolean, Nullable(Of DateTime), Boolean, IEnumerable(Of PropertyGroup), Boolean)
- uid: Dropbox.Api.Files.CommitInfo.Path
  commentId: P:Dropbox.Api.Files.CommitInfo.Path
  id: Path
  parent: Dropbox.Api.Files.CommitInfo
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: CommitInfo.Path
  fullName: Dropbox.Api.Files.CommitInfo.Path
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: Path
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
    startLine: 105
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Path in the user&apos;s Dropbox to save the file.</p>\n"
  example: []
  syntax:
    content: public string Path { get; protected set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Path As String
  overload: Dropbox.Api.Files.CommitInfo.Path*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Dropbox.Api.Files.CommitInfo.Mode
  commentId: P:Dropbox.Api.Files.CommitInfo.Mode
  id: Mode
  parent: Dropbox.Api.Files.CommitInfo
  langs:
  - csharp
  - vb
  name: Mode
  nameWithType: CommitInfo.Mode
  fullName: Dropbox.Api.Files.CommitInfo.Mode
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: Mode
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
    startLine: 110
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Selects what to do if the file already exists.</p>\n"
  example: []
  syntax:
    content: public WriteMode Mode { get; protected set; }
    parameters: []
    return:
      type: Dropbox.Api.Files.WriteMode
    content.vb: Public Property Mode As WriteMode
  overload: Dropbox.Api.Files.CommitInfo.Mode*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Dropbox.Api.Files.CommitInfo.Autorename
  commentId: P:Dropbox.Api.Files.CommitInfo.Autorename
  id: Autorename
  parent: Dropbox.Api.Files.CommitInfo
  langs:
  - csharp
  - vb
  name: Autorename
  nameWithType: CommitInfo.Autorename
  fullName: Dropbox.Api.Files.CommitInfo.Autorename
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: Autorename
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
    startLine: 116
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>If there&apos;s a conflict, as determined by <xref href=\"Dropbox.Api.Files.CommitInfo.Mode\" data-throw-if-not-resolved=\"false\"></xref>, have the Dropbox\nserver try to autorename the file to avoid conflict.</p>\n"
  example: []
  syntax:
    content: public bool Autorename { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Autorename As Boolean
  overload: Dropbox.Api.Files.CommitInfo.Autorename*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Dropbox.Api.Files.CommitInfo.ClientModified
  commentId: P:Dropbox.Api.Files.CommitInfo.ClientModified
  id: ClientModified
  parent: Dropbox.Api.Files.CommitInfo
  langs:
  - csharp
  - vb
  name: ClientModified
  nameWithType: CommitInfo.ClientModified
  fullName: Dropbox.Api.Files.CommitInfo.ClientModified
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ClientModified
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
    startLine: 125
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>The value to store as the <xref href=\"Dropbox.Api.Files.CommitInfo.ClientModified\" data-throw-if-not-resolved=\"false\"></xref> timestamp. Dropbox\nautomatically records the time at which the file was written to the Dropbox\nservers. It can also record an additional timestamp, provided by Dropbox desktop\nclients, mobile clients, and API apps of when the file was actually created or\nmodified.</p>\n"
  example: []
  syntax:
    content: public DateTime? ClientModified { get; protected set; }
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
    content.vb: Public Property ClientModified As Date?
  overload: Dropbox.Api.Files.CommitInfo.ClientModified*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Dropbox.Api.Files.CommitInfo.Mute
  commentId: P:Dropbox.Api.Files.CommitInfo.Mute
  id: Mute
  parent: Dropbox.Api.Files.CommitInfo
  langs:
  - csharp
  - vb
  name: Mute
  nameWithType: CommitInfo.Mute
  fullName: Dropbox.Api.Files.CommitInfo.Mute
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: Mute
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
    startLine: 132
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Normally, users are made aware of any file modifications in their Dropbox\naccount via notifications in the client software. If <code>true</code>, this tells the\nclients that this modification shouldn&apos;t result in a user notification.</p>\n"
  example: []
  syntax:
    content: public bool Mute { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Mute As Boolean
  overload: Dropbox.Api.Files.CommitInfo.Mute*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Dropbox.Api.Files.CommitInfo.PropertyGroups
  commentId: P:Dropbox.Api.Files.CommitInfo.PropertyGroups
  id: PropertyGroups
  parent: Dropbox.Api.Files.CommitInfo
  langs:
  - csharp
  - vb
  name: PropertyGroups
  nameWithType: CommitInfo.PropertyGroups
  fullName: Dropbox.Api.Files.CommitInfo.PropertyGroups
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PropertyGroups
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
    startLine: 137
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>List of custom properties to add to file.</p>\n"
  example: []
  syntax:
    content: public IList<PropertyGroup> PropertyGroups { get; protected set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Dropbox.Api.FileProperties.PropertyGroup}
    content.vb: Public Property PropertyGroups As IList(Of PropertyGroup)
  overload: Dropbox.Api.Files.CommitInfo.PropertyGroups*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Dropbox.Api.Files.CommitInfo.StrictConflict
  commentId: P:Dropbox.Api.Files.CommitInfo.StrictConflict
  id: StrictConflict
  parent: Dropbox.Api.Files.CommitInfo
  langs:
  - csharp
  - vb
  name: StrictConflict
  nameWithType: CommitInfo.StrictConflict
  fullName: Dropbox.Api.Files.CommitInfo.StrictConflict
  type: Property
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: StrictConflict
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/CommitInfo.cs
    startLine: 147
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files
  summary: "\n<p>Be more strict about how each <xref href=\"Dropbox.Api.Files.WriteMode\" data-throw-if-not-resolved=\"false\"></xref> detects conflict. For\nexample, always return a conflict error when <xref href=\"Dropbox.Api.Files.CommitInfo.Mode\" data-throw-if-not-resolved=\"false\"></xref> = <xref href=\"Dropbox.Api.Files.WriteMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and the given &quot;rev&quot; doesn&apos;t match the\nexisting file&apos;s &quot;rev&quot;, even if the existing file has been deleted. This also forces\na conflict even when the target path refers to a file with identical\ncontents.</p>\n"
  example: []
  syntax:
    content: public bool StrictConflict { get; protected set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property StrictConflict As Boolean
  overload: Dropbox.Api.Files.CommitInfo.StrictConflict*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
references:
- uid: Dropbox.Api.Files.GetTemporaryUploadLinkArg
  commentId: T:Dropbox.Api.Files.GetTemporaryUploadLinkArg
  parent: Dropbox.Api.Files
  name: GetTemporaryUploadLinkArg
  nameWithType: GetTemporaryUploadLinkArg
  fullName: Dropbox.Api.Files.GetTemporaryUploadLinkArg
- uid: Dropbox.Api.Files.UploadArg
  commentId: T:Dropbox.Api.Files.UploadArg
  parent: Dropbox.Api.Files
  name: UploadArg
  nameWithType: UploadArg
  fullName: Dropbox.Api.Files.UploadArg
- uid: Dropbox.Api.Files.UploadSessionFinishArg
  commentId: T:Dropbox.Api.Files.UploadSessionFinishArg
  parent: Dropbox.Api.Files
  name: UploadSessionFinishArg
  nameWithType: UploadSessionFinishArg
  fullName: Dropbox.Api.Files.UploadSessionFinishArg
- uid: Dropbox.Api.Files
  commentId: N:Dropbox.Api.Files
  name: Dropbox.Api.Files
  nameWithType: Dropbox.Api.Files
  fullName: Dropbox.Api.Files
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dropbox.Api.Files.CommitInfo
  commentId: T:Dropbox.Api.Files.CommitInfo
  parent: Dropbox.Api.Files
  name: CommitInfo
  nameWithType: CommitInfo
  fullName: Dropbox.Api.Files.CommitInfo
- uid: Dropbox.Api.Files.WriteMode
  commentId: T:Dropbox.Api.Files.WriteMode
  parent: Dropbox.Api.Files
  name: WriteMode
  nameWithType: WriteMode
  fullName: Dropbox.Api.Files.WriteMode
- uid: Dropbox.Api.Files.WriteMode.Update
  commentId: T:Dropbox.Api.Files.WriteMode.Update
  parent: Dropbox.Api.Files
  name: WriteMode.Update
  nameWithType: WriteMode.Update
  fullName: Dropbox.Api.Files.WriteMode.Update
- uid: Dropbox.Api.Files.CommitInfo.#ctor*
  commentId: Overload:Dropbox.Api.Files.CommitInfo.#ctor
  name: CommitInfo
  nameWithType: CommitInfo.CommitInfo
  fullName: Dropbox.Api.Files.CommitInfo.CommitInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
  commentId: T:System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PropertyGroup>
  nameWithType: IEnumerable<PropertyGroup>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>
  nameWithType.vb: IEnumerable(Of PropertyGroup)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup)
  name.vb: IEnumerable(Of PropertyGroup)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.PropertyGroup
    name: PropertyGroup
    nameWithType: PropertyGroup
    fullName: Dropbox.Api.FileProperties.PropertyGroup
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.PropertyGroup
    name: PropertyGroup
    nameWithType: PropertyGroup
    fullName: Dropbox.Api.FileProperties.PropertyGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Dropbox.Api.Files.CommitInfo.Path*
  commentId: Overload:Dropbox.Api.Files.CommitInfo.Path
  name: Path
  nameWithType: CommitInfo.Path
  fullName: Dropbox.Api.Files.CommitInfo.Path
- uid: Dropbox.Api.Files.CommitInfo.Mode*
  commentId: Overload:Dropbox.Api.Files.CommitInfo.Mode
  name: Mode
  nameWithType: CommitInfo.Mode
  fullName: Dropbox.Api.Files.CommitInfo.Mode
- uid: Dropbox.Api.Files.CommitInfo.Mode
  commentId: P:Dropbox.Api.Files.CommitInfo.Mode
  parent: Dropbox.Api.Files.CommitInfo
  name: Mode
  nameWithType: CommitInfo.Mode
  fullName: Dropbox.Api.Files.CommitInfo.Mode
- uid: Dropbox.Api.Files.CommitInfo.Autorename*
  commentId: Overload:Dropbox.Api.Files.CommitInfo.Autorename
  name: Autorename
  nameWithType: CommitInfo.Autorename
  fullName: Dropbox.Api.Files.CommitInfo.Autorename
- uid: Dropbox.Api.Files.CommitInfo.ClientModified
  commentId: P:Dropbox.Api.Files.CommitInfo.ClientModified
  parent: Dropbox.Api.Files.CommitInfo
  name: ClientModified
  nameWithType: CommitInfo.ClientModified
  fullName: Dropbox.Api.Files.CommitInfo.ClientModified
- uid: Dropbox.Api.Files.CommitInfo.ClientModified*
  commentId: Overload:Dropbox.Api.Files.CommitInfo.ClientModified
  name: ClientModified
  nameWithType: CommitInfo.ClientModified
  fullName: Dropbox.Api.Files.CommitInfo.ClientModified
- uid: Dropbox.Api.Files.CommitInfo.Mute*
  commentId: Overload:Dropbox.Api.Files.CommitInfo.Mute
  name: Mute
  nameWithType: CommitInfo.Mute
  fullName: Dropbox.Api.Files.CommitInfo.Mute
- uid: Dropbox.Api.Files.CommitInfo.PropertyGroups*
  commentId: Overload:Dropbox.Api.Files.CommitInfo.PropertyGroups
  name: PropertyGroups
  nameWithType: CommitInfo.PropertyGroups
  fullName: Dropbox.Api.Files.CommitInfo.PropertyGroups
- uid: System.Collections.Generic.IList{Dropbox.Api.FileProperties.PropertyGroup}
  commentId: T:System.Collections.Generic.IList{Dropbox.Api.FileProperties.PropertyGroup}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<PropertyGroup>
  nameWithType: IList<PropertyGroup>
  fullName: System.Collections.Generic.IList<Dropbox.Api.FileProperties.PropertyGroup>
  nameWithType.vb: IList(Of PropertyGroup)
  fullName.vb: System.Collections.Generic.IList(Of Dropbox.Api.FileProperties.PropertyGroup)
  name.vb: IList(Of PropertyGroup)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.PropertyGroup
    name: PropertyGroup
    nameWithType: PropertyGroup
    fullName: Dropbox.Api.FileProperties.PropertyGroup
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.PropertyGroup
    name: PropertyGroup
    nameWithType: PropertyGroup
    fullName: Dropbox.Api.FileProperties.PropertyGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.CommitInfo.StrictConflict*
  commentId: Overload:Dropbox.Api.Files.CommitInfo.StrictConflict
  name: StrictConflict
  nameWithType: CommitInfo.StrictConflict
  fullName: Dropbox.Api.Files.CommitInfo.StrictConflict
