### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.PKCEOAuthFlow
  commentId: T:Dropbox.Api.PKCEOAuthFlow
  id: PKCEOAuthFlow
  parent: Dropbox.Api
  children:
  - Dropbox.Api.PKCEOAuthFlow.#ctor
  - Dropbox.Api.PKCEOAuthFlow.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes)
  - Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync(System.String,System.String,System.String,HttpClient)
  - Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync(System.Uri,System.String,System.String,System.String,HttpClient)
  langs:
  - csharp
  - vb
  name: PKCEOAuthFlow
  nameWithType: PKCEOAuthFlow
  fullName: Dropbox.Api.PKCEOAuthFlow
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: PKCEOAuthFlow
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 675
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nObject used to execute OAuth through PKCE\nUse this object to maintain code verifier and challenge using S256 method.\n"
  example: []
  syntax:
    content: public class PKCEOAuthFlow
    content.vb: Public Class PKCEOAuthFlow
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.PKCEOAuthFlow.#ctor
  commentId: M:Dropbox.Api.PKCEOAuthFlow.#ctor
  id: '#ctor'
  parent: Dropbox.Api.PKCEOAuthFlow
  langs:
  - csharp
  - vb
  name: PKCEOAuthFlow()
  nameWithType: PKCEOAuthFlow.PKCEOAuthFlow()
  fullName: Dropbox.Api.PKCEOAuthFlow.PKCEOAuthFlow()
  type: Constructor
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: .ctor
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 681
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nInitializes a new instance of the <xref href=\"Dropbox.Api.PKCEOAuthFlow\" data-throw-if-not-resolved=\"false\"></xref> class.\nDefault constructor that also generates code verifier and code challenge to be used in PKCE flow.\n"
  example: []
  syntax:
    content: public PKCEOAuthFlow()
    content.vb: Public Sub New
  overload: Dropbox.Api.PKCEOAuthFlow.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.PKCEOAuthFlow.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes)
  commentId: M:Dropbox.Api.PKCEOAuthFlow.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes)
  id: GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes)
  parent: Dropbox.Api.PKCEOAuthFlow
  langs:
  - csharp
  - vb
  name: GetAuthorizeUri(OAuthResponseType, String, String, String, Boolean, Boolean, String, Boolean, TokenAccessType, String[], IncludeGrantedScopes)
  nameWithType: PKCEOAuthFlow.GetAuthorizeUri(OAuthResponseType, String, String, String, Boolean, Boolean, String, Boolean, TokenAccessType, String[], IncludeGrantedScopes)
  fullName: Dropbox.Api.PKCEOAuthFlow.GetAuthorizeUri(Dropbox.Api.OAuthResponseType, System.String, System.String, System.String, System.Boolean, System.Boolean, System.String, System.Boolean, Dropbox.Api.TokenAccessType, System.String[], Dropbox.Api.IncludeGrantedScopes)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetAuthorizeUri
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 724
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nGets the URI used to start the OAuth2.0 authorization flow.  Passes in codeChallenge generated in this class.\n"
  example: []
  syntax:
    content: public Uri GetAuthorizeUri(OAuthResponseType oauthResponseType, string clientId, string redirectUri = null, string state = null, bool forceReapprove = false, bool disableSignup = false, string requireRole = null, bool forceReauthentication = false, TokenAccessType tokenAccessType = TokenAccessType.Legacy, string[] scopeList = null, IncludeGrantedScopes includeGrantedScopes = IncludeGrantedScopes.None)
    parameters:
    - id: oauthResponseType
      type: Dropbox.Api.OAuthResponseType
      description: The grant type requested, either <code>Token</code> or <code>Code</code>.
    - id: clientId
      type: System.String
      description: >-
        The apps key, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a>.
    - id: redirectUri
      type: System.String
      description: >-
        Where to redirect the user after authorization has completed. This must be the exact URI

        registered in the <a href="https://www.dropbox.com/developers/apps">App Console</a>; even <code>localhost</code>

        must be listed if it is used for testing. A redirect URI is required for a token flow, but optional for code.

        If the redirect URI is omitted, the code will be presented directly to the user and they will be invited to enter

        the information in your app.
    - id: state
      type: System.String
      description: >-
        Up to 500 bytes of arbitrary data that will be passed back to <code data-dev-comment-type="paramref" class="paramref">redirectUri</code>.

        This parameter should be used to protect against cross-site request forgery (CSRF).
    - id: forceReapprove
      type: System.Boolean
      description: >-
        Whether or not to force the user to approve the app again if they&apos;ve already done so.

        If <code>false</code> (default), a user who has already approved the application may be automatically redirected to

        <code data-dev-comment-type="paramref" class="paramref">redirectUri</code>If <code>true</code>, the user will not be automatically redirected and will have to approve

        the app again.
    - id: disableSignup
      type: System.Boolean
      description: >-
        When <code>true</code> (default is <code>false</code>) users will not be able to sign up for a

        Dropbox account via the authorization page. Instead, the authorization page will show a link to the Dropbox

        iOS app in the App Store. This is only intended for use when necessary for compliance with App Store policies.
    - id: requireRole
      type: System.String
      description: >-
        If this parameter is specified, the user will be asked to authorize with a particular

        type of Dropbox account, either work for a team account or personal for a personal account. Your app should still

        verify the type of Dropbox account after authorization since the user could modify or remove the require_role

        parameter.
    - id: forceReauthentication
      type: System.Boolean
      description: >-
        If <code>true</code>, users will be signed out if they are currently signed in.

        This will make sure the user is brought to a page where they can create a new account or sign in to another account.

        This should only be used when there is a definite reason to believe that the user needs to sign in to a new or

        different account.
    - id: tokenAccessType
      type: Dropbox.Api.TokenAccessType
      description: >-
        Determines the type of token to request.  See <xref href="Dropbox.Api.TokenAccessType" data-throw-if-not-resolved="false"></xref>

        for information on specific types available.  If none is specified, this will use the legacy type.
    - id: scopeList
      type: System.String[]
      description: list of scopes to request in base oauth flow.  If left blank, will default to all scopes for app.
    - id: includeGrantedScopes
      type: Dropbox.Api.IncludeGrantedScopes
      description: 'which scopes to include from previous grants. Note: if this user has never linked the app, include_granted_scopes must be None.'
    return:
      type: System.Uri
      description: The uri of a web page which must be displayed to the user in order to authorize the app.
    content.vb: Public Function GetAuthorizeUri(oauthResponseType As OAuthResponseType, clientId As String, redirectUri As String = Nothing, state As String = Nothing, forceReapprove As Boolean = False, disableSignup As Boolean = False, requireRole As String = Nothing, forceReauthentication As Boolean = False, tokenAccessType As TokenAccessType = TokenAccessType.Legacy, scopeList As String() = Nothing, includeGrantedScopes As IncludeGrantedScopes = IncludeGrantedScopes.None) As Uri
  overload: Dropbox.Api.PKCEOAuthFlow.GetAuthorizeUri*
  nameWithType.vb: PKCEOAuthFlow.GetAuthorizeUri(OAuthResponseType, String, String, String, Boolean, Boolean, String, Boolean, TokenAccessType, String(), IncludeGrantedScopes)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.PKCEOAuthFlow.GetAuthorizeUri(Dropbox.Api.OAuthResponseType, System.String, System.String, System.String, System.Boolean, System.Boolean, System.String, System.Boolean, Dropbox.Api.TokenAccessType, System.String(), Dropbox.Api.IncludeGrantedScopes)
  name.vb: GetAuthorizeUri(OAuthResponseType, String, String, String, Boolean, Boolean, String, Boolean, TokenAccessType, String(), IncludeGrantedScopes)
- uid: Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync(System.String,System.String,System.String,HttpClient)
  commentId: M:Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync(System.String,System.String,System.String,HttpClient)
  id: ProcessCodeFlowAsync(System.String,System.String,System.String,HttpClient)
  parent: Dropbox.Api.PKCEOAuthFlow
  langs:
  - csharp
  - vb
  name: ProcessCodeFlowAsync(String, String, String, HttpClient)
  nameWithType: PKCEOAuthFlow.ProcessCodeFlowAsync(String, String, String, HttpClient)
  fullName: Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync(System.String, System.String, System.String, HttpClient)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ProcessCodeFlowAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 740
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nProcesses the second half of the OAuth 2.0 code flow.  Uses the codeVerifier created in this class to execute the second half.\n"
  example: []
  syntax:
    content: public Task<OAuth2Response> ProcessCodeFlowAsync(string code, string appKey, string redirectUri = null, HttpClient client = null)
    parameters:
    - id: code
      type: System.String
      description: The code acquired in the query parameters of the redirect from the initial authorize url.
    - id: appKey
      type: System.String
      description: >-
        The application key, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a>.
    - id: redirectUri
      type: System.String
      description: >-
        The redirect URI that was provided in the initial authorize URI,

        this is only used to validate that it matches the original request, it is not used to redirect

        again.
    - id: client
      type: HttpClient
      description: An optional http client instance used to make requests.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.OAuth2Response}
      description: The authorization response, containing the access token and uid of the authorized user.
    content.vb: Public Function ProcessCodeFlowAsync(code As String, appKey As String, redirectUri As String = Nothing, client As HttpClient = Nothing) As Task(Of OAuth2Response)
  overload: Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync(System.Uri,System.String,System.String,System.String,HttpClient)
  commentId: M:Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync(System.Uri,System.String,System.String,System.String,HttpClient)
  id: ProcessCodeFlowAsync(System.Uri,System.String,System.String,System.String,HttpClient)
  parent: Dropbox.Api.PKCEOAuthFlow
  langs:
  - csharp
  - vb
  name: ProcessCodeFlowAsync(Uri, String, String, String, HttpClient)
  nameWithType: PKCEOAuthFlow.ProcessCodeFlowAsync(Uri, String, String, String, HttpClient)
  fullName: Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync(System.Uri, System.String, System.String, System.String, HttpClient)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ProcessCodeFlowAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 757
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nProcesses the second half of the OAuth 2.0 code flow.  Uses the codeVerifier created in this class to execute second half.\n"
  example: []
  syntax:
    content: public Task<OAuth2Response> ProcessCodeFlowAsync(Uri responseUri, string appKey, string redirectUri = null, string state = null, HttpClient client = null)
    parameters:
    - id: responseUri
      type: System.Uri
      description: The URI to which the user was redirected after the initial authorization request.
    - id: appKey
      type: System.String
      description: >-
        The application key, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a>.
    - id: redirectUri
      type: System.String
      description: >-
        The redirect URI that was provided in the initial authorize URI,

        this is only used to validate that it matches the original request, it is not used to redirect

        again.
    - id: state
      type: System.String
      description: The state parameter (if any) that matches that used in the initial authorize URI.
    - id: client
      type: HttpClient
      description: An optional http client instance used to make requests.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.OAuth2Response}
      description: The authorization response, containing the access token and uid of the authorized user.
    content.vb: Public Function ProcessCodeFlowAsync(responseUri As Uri, appKey As String, redirectUri As String = Nothing, state As String = Nothing, client As HttpClient = Nothing) As Task(Of OAuth2Response)
  overload: Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Dropbox.Api
  commentId: N:Dropbox.Api
  name: Dropbox.Api
  nameWithType: Dropbox.Api
  fullName: Dropbox.Api
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dropbox.Api.PKCEOAuthFlow
  commentId: T:Dropbox.Api.PKCEOAuthFlow
  name: PKCEOAuthFlow
  nameWithType: PKCEOAuthFlow
  fullName: Dropbox.Api.PKCEOAuthFlow
- uid: Dropbox.Api.PKCEOAuthFlow.#ctor*
  commentId: Overload:Dropbox.Api.PKCEOAuthFlow.#ctor
  name: PKCEOAuthFlow
  nameWithType: PKCEOAuthFlow.PKCEOAuthFlow
  fullName: Dropbox.Api.PKCEOAuthFlow.PKCEOAuthFlow
- uid: Dropbox.Api.TokenAccessType
  commentId: T:Dropbox.Api.TokenAccessType
  parent: Dropbox.Api
  name: TokenAccessType
  nameWithType: TokenAccessType
  fullName: Dropbox.Api.TokenAccessType
- uid: Dropbox.Api.PKCEOAuthFlow.GetAuthorizeUri*
  commentId: Overload:Dropbox.Api.PKCEOAuthFlow.GetAuthorizeUri
  name: GetAuthorizeUri
  nameWithType: PKCEOAuthFlow.GetAuthorizeUri
  fullName: Dropbox.Api.PKCEOAuthFlow.GetAuthorizeUri
- uid: Dropbox.Api.OAuthResponseType
  commentId: T:Dropbox.Api.OAuthResponseType
  parent: Dropbox.Api
  name: OAuthResponseType
  nameWithType: OAuthResponseType
  fullName: Dropbox.Api.OAuthResponseType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Dropbox.Api.IncludeGrantedScopes
  commentId: T:Dropbox.Api.IncludeGrantedScopes
  parent: Dropbox.Api
  name: IncludeGrantedScopes
  nameWithType: IncludeGrantedScopes
  fullName: Dropbox.Api.IncludeGrantedScopes
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync*
  commentId: Overload:Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync
  name: ProcessCodeFlowAsync
  nameWithType: PKCEOAuthFlow.ProcessCodeFlowAsync
  fullName: Dropbox.Api.PKCEOAuthFlow.ProcessCodeFlowAsync
- uid: HttpClient
  isExternal: true
  name: HttpClient
  nameWithType: HttpClient
  fullName: HttpClient
- uid: System.Threading.Tasks.Task{Dropbox.Api.OAuth2Response}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.OAuth2Response}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OAuth2Response>
  nameWithType: Task<OAuth2Response>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.OAuth2Response>
  nameWithType.vb: Task(Of OAuth2Response)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.OAuth2Response)
  name.vb: Task(Of OAuth2Response)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.OAuth2Response
    name: OAuth2Response
    nameWithType: OAuth2Response
    fullName: Dropbox.Api.OAuth2Response
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.OAuth2Response
    name: OAuth2Response
    nameWithType: OAuth2Response
    fullName: Dropbox.Api.OAuth2Response
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
