### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes
  commentId: T:Dropbox.Api.Files.Routes.FilesAppRoutes
  id: FilesAppRoutes
  parent: Dropbox.Api.Files.Routes
  children:
  - Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.EndGetThumbnailV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolder(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolderContinue(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  - Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(System.String)
  langs:
  - csharp
  - vb
  name: FilesAppRoutes
  nameWithType: FilesAppRoutes
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: FilesAppRoutes
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 15
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The routes for the <xref href=\"Dropbox.Api.Files\" data-throw-if-not-resolved=\"false\"></xref> namespace</p>\n"
  example: []
  syntax:
    content: public class FilesAppRoutes
    content.vb: Public Class FilesAppRoutes
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  id: GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailV2Async(ThumbnailV2Arg)
  nameWithType: FilesAppRoutes.GetThumbnailV2Async(ThumbnailV2Arg)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetThumbnailV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 43
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<PreviewResult>> GetThumbnailV2Async(ThumbnailV2Arg thumbnailV2Arg)
    parameters:
    - id: thumbnailV2Arg
      type: Dropbox.Api.Files.ThumbnailV2Arg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailV2Async(thumbnailV2Arg As ThumbnailV2Arg) As Task(Of IDownloadResponse(Of PreviewResult))
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailV2Error" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  id: BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailV2(ThumbnailV2Arg, AsyncCallback, Object)
  nameWithType: FilesAppRoutes.BeginGetThumbnailV2(ThumbnailV2Arg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetThumbnailV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 57
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetThumbnailV2(ThumbnailV2Arg thumbnailV2Arg, AsyncCallback callback, object state = null)
    parameters:
    - id: thumbnailV2Arg
      type: Dropbox.Api.Files.ThumbnailV2Arg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailV2(thumbnailV2Arg As ThumbnailV2Arg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  id: GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailV2Async(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  nameWithType: FilesAppRoutes.GetThumbnailV2Async(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: GetThumbnailV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 84
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public Task<IDownloadResponse<PreviewResult>> GetThumbnailV2Async(PathOrLink resource, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null)
    parameters:
    - id: resource
      type: Dropbox.Api.Files.PathOrLink
      description: >-
        Information specifying which file to preview. This could be

        a path to a file, a shared link pointing to a file, or a shared link pointing to a

        folder, with a relative path.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailV2Async(resource As PathOrLink, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing) As Task(Of IDownloadResponse(Of PreviewResult))
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailV2Error" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  id: BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailV2(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode, AsyncCallback, Object)
  nameWithType: FilesAppRoutes.BeginGetThumbnailV2(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginGetThumbnailV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 114
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginGetThumbnailV2(PathOrLink resource, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: resource
      type: Dropbox.Api.Files.PathOrLink
      description: >-
        Information specifying which file to preview. This could be

        a path to a file, a shared link pointing to a file, or a shared link pointing to a

        folder, with a relative path.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailV2(resource As PathOrLink, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.EndGetThumbnailV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.EndGetThumbnailV2(System.IAsyncResult)
  id: EndGetThumbnailV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: EndGetThumbnailV2(IAsyncResult)
  nameWithType: FilesAppRoutes.EndGetThumbnailV2(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.EndGetThumbnailV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndGetThumbnailV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 139
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get thumbnail route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<PreviewResult> EndGetThumbnailV2(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}
      description: The response to the send request
    content.vb: Public Function EndGetThumbnailV2(asyncResult As IAsyncResult) As IDownloadResponse(Of PreviewResult)
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.EndGetThumbnailV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailV2Error" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  id: ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: ListFolderAsync(ListFolderArg)
  nameWithType: FilesAppRoutes.ListFolderAsync(ListFolderArg)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 189
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Starts returning the contents of a folder. If the result&apos;s <xref href=\"Dropbox.Api.Files.ListFolderResult.HasMore\" data-throw-if-not-resolved=\"false\"></xref> field is <code>true</code>, call\n<xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> with the\nreturned <xref href=\"Dropbox.Api.Files.ListFolderResult.Cursor\" data-throw-if-not-resolved=\"false\"></xref> to retrieve more\nentries.</p>\n<p>If you&apos;re using <xref href=\"Dropbox.Api.Files.ListFolderArg.Recursive\" data-throw-if-not-resolved=\"false\"></xref> set\nto <code>true</code> to keep a local cache of the contents of a Dropbox account, iterate\nthrough each entry in order and process them as follows to keep your local state in\nsync:</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it and remove all its\nchildren.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it but leave the\nchildren as they are. Check the new entry&apos;s <see cref=\"!:Dropbox.Api.Files.FolderSharingInfo.ReadOnly\"></see> and set all its children&apos;s\nread-only statuses to match.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref>, if your local state has something at\nthe given path, remove it and all its children. If there&apos;s nothing at the given\npath, ignore this entry.</p>\n<p>Note: <xref href=\"Dropbox.Api.Auth.RateLimitError\" data-throw-if-not-resolved=\"false\"></xref> may be returned if multiple <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> calls\nwith same parameters are made simultaneously by same API app for same user. If your\napp implements retry logic, please hold off the retry until the previous request\nfinishes.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderResult> ListFolderAsync(ListFolderArg listFolderArg)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderAsync(listFolderArg As ListFolderArg) As Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  id: BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolder(ListFolderArg, AsyncCallback, Object)
  nameWithType: FilesAppRoutes.BeginListFolder(ListFolderArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 203
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolder(ListFolderArg listFolderArg, AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolder(listFolderArg As ListFolderArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  id: ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  nameWithType: FilesAppRoutes.ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 274
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Starts returning the contents of a folder. If the result&apos;s <xref href=\"Dropbox.Api.Files.ListFolderResult.HasMore\" data-throw-if-not-resolved=\"false\"></xref> field is <code>true</code>, call\n<xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> with the\nreturned <xref href=\"Dropbox.Api.Files.ListFolderResult.Cursor\" data-throw-if-not-resolved=\"false\"></xref> to retrieve more\nentries.</p>\n<p>If you&apos;re using <xref href=\"Dropbox.Api.Files.ListFolderArg.Recursive\" data-throw-if-not-resolved=\"false\"></xref> set\nto <code>true</code> to keep a local cache of the contents of a Dropbox account, iterate\nthrough each entry in order and process them as follows to keep your local state in\nsync:</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it and remove all its\nchildren.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it but leave the\nchildren as they are. Check the new entry&apos;s <see cref=\"!:Dropbox.Api.Files.FolderSharingInfo.ReadOnly\"></see> and set all its children&apos;s\nread-only statuses to match.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref>, if your local state has something at\nthe given path, remove it and all its children. If there&apos;s nothing at the given\npath, ignore this entry.</p>\n<p>Note: <xref href=\"Dropbox.Api.Auth.RateLimitError\" data-throw-if-not-resolved=\"false\"></xref> may be returned if multiple <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> calls\nwith same parameters are made simultaneously by same API app for same user. If your\napp implements retry logic, please hold off the retry until the previous request\nfinishes.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderResult> ListFolderAsync(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderAsync(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True) As Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesAppRoutes.ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  name.vb: ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
  nameWithType: FilesAppRoutes.BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 333
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolder(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true, AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolder(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True, callback As AsyncCallback = Nothing, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder*
  nameWithType.vb: FilesAppRoutes.BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolder(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolder(System.IAsyncResult)
  id: EndListFolder(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: EndListFolder(IAsyncResult)
  nameWithType: FilesAppRoutes.EndListFolder(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolder(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndListFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 370
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListFolderResult EndListFolder(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderResult
      description: The response to the send request
    content.vb: Public Function EndListFolder(asyncResult As IAsyncResult) As ListFolderResult
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolder*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  id: ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: ListFolderContinueAsync(ListFolderContinueArg)
  nameWithType: FilesAppRoutes.ListFolderContinueAsync(ListFolderContinueArg)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 396
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all files and retrieve updates to the folder, following the same\nrules as documented for <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderResult> ListFolderContinueAsync(ListFolderContinueArg listFolderContinueArg)
    parameters:
    - id: listFolderContinueArg
      type: Dropbox.Api.Files.ListFolderContinueArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderContinueAsync(listFolderContinueArg As ListFolderContinueArg) As Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  id: BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderContinue(ListFolderContinueArg, AsyncCallback, Object)
  nameWithType: FilesAppRoutes.BeginListFolderContinue(ListFolderContinueArg, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolderContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 410
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder continue route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolderContinue(ListFolderContinueArg listFolderContinueArg, AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderContinueArg
      type: Dropbox.Api.Files.ListFolderContinueArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderContinue(listFolderContinueArg As ListFolderContinueArg, callback As AsyncCallback, state As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(System.String)
  id: ListFolderContinueAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: ListFolderContinueAsync(String)
  nameWithType: FilesAppRoutes.ListFolderContinueAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: ListFolderContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 436
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all files and retrieve updates to the folder, following the same\nrules as documented for <xref href=\"Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task<ListFolderResult> ListFolderContinueAsync(string cursor)
    parameters:
    - id: cursor
      type: System.String
      description: The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderContinueAsync(cursor As String) As Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  id: BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderContinue(String, AsyncCallback, Object)
  nameWithType: FilesAppRoutes.BeginListFolderContinue(String, AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: BeginListFolderContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 456
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder continue route.</p>\n"
  example: []
  syntax:
    content: public IAsyncResult BeginListFolderContinue(string cursor, AsyncCallback callback, object callbackState = null)
    parameters:
    - id: cursor
      type: System.String
      description: The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref> <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderContinue(cursor As String, callback As AsyncCallback, callbackState As Object = Nothing) As IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolderContinue(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolderContinue(System.IAsyncResult)
  id: EndListFolderContinue(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesAppRoutes
  langs:
  - csharp
  - vb
  name: EndListFolderContinue(IAsyncResult)
  nameWithType: FilesAppRoutes.EndListFolderContinue(IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolderContinue(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
      branch: doc_fx_integration
      repo: https://github.com/dropbox/dropbox-sdk-dotnet.git
    id: EndListFolderContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesAppRoutes.cs
    startLine: 475
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder continue route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListFolderResult EndListFolderContinue(IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderResult
      description: The response to the send request
    content.vb: Public Function EndListFolderContinue(asyncResult As IAsyncResult) As ListFolderResult
  overload: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolderContinue*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Dropbox.Api.Files
  commentId: N:Dropbox.Api.Files
  name: Dropbox.Api.Files
  nameWithType: Dropbox.Api.Files
  fullName: Dropbox.Api.Files
- uid: Dropbox.Api.Files.Routes
  commentId: N:Dropbox.Api.Files.Routes
  name: Dropbox.Api.Files.Routes
  nameWithType: Dropbox.Api.Files.Routes
  fullName: Dropbox.Api.Files.Routes
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dropbox.Api.Files.ThumbnailV2Error
  commentId: T:Dropbox.Api.Files.ThumbnailV2Error
  parent: Dropbox.Api.Files
  name: ThumbnailV2Error
  nameWithType: ThumbnailV2Error
  fullName: Dropbox.Api.Files.ThumbnailV2Error
- uid: Dropbox.Api.ApiException`1
  commentId: T:Dropbox.Api.ApiException`1
  name: ApiException<TError>
  nameWithType: ApiException<TError>
  fullName: Dropbox.Api.ApiException<TError>
  nameWithType.vb: ApiException(Of TError)
  fullName.vb: Dropbox.Api.ApiException(Of TError)
  name.vb: ApiException(Of TError)
  spec.csharp:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: <
    nameWithType: <
    fullName: <
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async
  name: GetThumbnailV2Async
  nameWithType: FilesAppRoutes.GetThumbnailV2Async
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.GetThumbnailV2Async
- uid: Dropbox.Api.Files.ThumbnailV2Arg
  commentId: T:Dropbox.Api.Files.ThumbnailV2Arg
  parent: Dropbox.Api.Files
  name: ThumbnailV2Arg
  nameWithType: ThumbnailV2Arg
  fullName: Dropbox.Api.Files.ThumbnailV2Arg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IDownloadResponse<PreviewResult>>
  nameWithType: Task<IDownloadResponse<PreviewResult>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.PreviewResult>>
  nameWithType.vb: Task(Of IDownloadResponse(Of PreviewResult))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.PreviewResult))
  name.vb: Task(Of IDownloadResponse(Of PreviewResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2
  name: BeginGetThumbnailV2
  nameWithType: FilesAppRoutes.BeginGetThumbnailV2
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginGetThumbnailV2
- uid: System.AsyncCallback
  commentId: T:System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: Dropbox.Api.Files.PathOrLink
  commentId: T:Dropbox.Api.Files.PathOrLink
  parent: Dropbox.Api.Files
  name: PathOrLink
  nameWithType: PathOrLink
  fullName: Dropbox.Api.Files.PathOrLink
- uid: Dropbox.Api.Files.ThumbnailFormat
  commentId: T:Dropbox.Api.Files.ThumbnailFormat
  parent: Dropbox.Api.Files
  name: ThumbnailFormat
  nameWithType: ThumbnailFormat
  fullName: Dropbox.Api.Files.ThumbnailFormat
- uid: Dropbox.Api.Files.ThumbnailSize
  commentId: T:Dropbox.Api.Files.ThumbnailSize
  parent: Dropbox.Api.Files
  name: ThumbnailSize
  nameWithType: ThumbnailSize
  fullName: Dropbox.Api.Files.ThumbnailSize
- uid: Dropbox.Api.Files.ThumbnailMode
  commentId: T:Dropbox.Api.Files.ThumbnailMode
  parent: Dropbox.Api.Files
  name: ThumbnailMode
  nameWithType: ThumbnailMode
  fullName: Dropbox.Api.Files.ThumbnailMode
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.EndGetThumbnailV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesAppRoutes.EndGetThumbnailV2
  name: EndGetThumbnailV2
  nameWithType: FilesAppRoutes.EndGetThumbnailV2
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.EndGetThumbnailV2
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<PreviewResult>
  nameWithType: IDownloadResponse<PreviewResult>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.PreviewResult>
  nameWithType.vb: IDownloadResponse(Of PreviewResult)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.PreviewResult)
  name.vb: IDownloadResponse(Of PreviewResult)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Stone.IDownloadResponse`1
  commentId: T:Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<TResponse>
  nameWithType: IDownloadResponse<TResponse>
  fullName: Dropbox.Api.Stone.IDownloadResponse<TResponse>
  nameWithType.vb: IDownloadResponse(Of TResponse)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of TResponse)
  name.vb: IDownloadResponse(Of TResponse)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Stone
  commentId: N:Dropbox.Api.Stone
  name: Dropbox.Api.Stone
  nameWithType: Dropbox.Api.Stone
  fullName: Dropbox.Api.Stone
- uid: Dropbox.Api.Files.ListFolderResult.HasMore
  commentId: P:Dropbox.Api.Files.ListFolderResult.HasMore
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderResult.Cursor
  commentId: P:Dropbox.Api.Files.ListFolderResult.Cursor
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderArg.Recursive
  commentId: P:Dropbox.Api.Files.ListFolderArg.Recursive
  isExternal: true
- uid: Dropbox.Api.Files.FileMetadata
  commentId: T:Dropbox.Api.Files.FileMetadata
  parent: Dropbox.Api.Files
  name: FileMetadata
  nameWithType: FileMetadata
  fullName: Dropbox.Api.Files.FileMetadata
- uid: Dropbox.Api.Files.FolderMetadata
  commentId: T:Dropbox.Api.Files.FolderMetadata
  parent: Dropbox.Api.Files
  name: FolderMetadata
  nameWithType: FolderMetadata
  fullName: Dropbox.Api.Files.FolderMetadata
- uid: Dropbox.Api.Files.DeletedMetadata
  commentId: T:Dropbox.Api.Files.DeletedMetadata
  parent: Dropbox.Api.Files
  name: DeletedMetadata
  nameWithType: DeletedMetadata
  fullName: Dropbox.Api.Files.DeletedMetadata
- uid: Dropbox.Api.Auth.RateLimitError
  commentId: T:Dropbox.Api.Auth.RateLimitError
  name: RateLimitError
  nameWithType: RateLimitError
  fullName: Dropbox.Api.Auth.RateLimitError
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderError
  commentId: T:Dropbox.Api.Files.ListFolderError
  parent: Dropbox.Api.Files
  name: ListFolderError
  nameWithType: ListFolderError
  fullName: Dropbox.Api.Files.ListFolderError
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync
  name: ListFolderAsync
  nameWithType: FilesAppRoutes.ListFolderAsync
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderAsync
- uid: Dropbox.Api.Files.ListFolderArg
  commentId: T:Dropbox.Api.Files.ListFolderArg
  parent: Dropbox.Api.Files
  name: ListFolderArg
  nameWithType: ListFolderArg
  fullName: Dropbox.Api.Files.ListFolderArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
  commentId: T:System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ListFolderResult>
  nameWithType: Task<ListFolderResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.ListFolderResult>
  nameWithType.vb: Task(Of ListFolderResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.ListFolderResult)
  name.vb: Task(Of ListFolderResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ListFolderResult
    name: ListFolderResult
    nameWithType: ListFolderResult
    fullName: Dropbox.Api.Files.ListFolderResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ListFolderResult
    name: ListFolderResult
    nameWithType: ListFolderResult
    fullName: Dropbox.Api.Files.ListFolderResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder
  name: BeginListFolder
  nameWithType: FilesAppRoutes.BeginListFolder
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolder
- uid: Dropbox.Api.Files.FileMetadata.MediaInfo
  commentId: P:Dropbox.Api.Files.FileMetadata.MediaInfo
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderArg.Path
  commentId: P:Dropbox.Api.Files.ListFolderArg.Path
  isExternal: true
- uid: Dropbox.Api.Files.FileMetadata.PropertyGroups
  commentId: P:Dropbox.Api.Files.FileMetadata.PropertyGroups
  isExternal: true
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable{System.UInt32}
  commentId: T:System.Nullable{System.UInt32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt32>
  nameWithType: Nullable<UInt32>
  fullName: System.Nullable<System.UInt32>
  nameWithType.vb: Nullable(Of UInt32)
  fullName.vb: System.Nullable(Of System.UInt32)
  name.vb: Nullable(Of UInt32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.SharedLink
  commentId: T:Dropbox.Api.Files.SharedLink
  parent: Dropbox.Api.Files
  name: SharedLink
  nameWithType: SharedLink
  fullName: Dropbox.Api.Files.SharedLink
- uid: Dropbox.Api.FileProperties.TemplateFilterBase
  commentId: T:Dropbox.Api.FileProperties.TemplateFilterBase
  parent: Dropbox.Api.FileProperties
  name: TemplateFilterBase
  nameWithType: TemplateFilterBase
  fullName: Dropbox.Api.FileProperties.TemplateFilterBase
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.FileProperties
  commentId: N:Dropbox.Api.FileProperties
  name: Dropbox.Api.FileProperties
  nameWithType: Dropbox.Api.FileProperties
  fullName: Dropbox.Api.FileProperties
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolder
  name: EndListFolder
  nameWithType: FilesAppRoutes.EndListFolder
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolder
- uid: Dropbox.Api.Files.ListFolderResult
  commentId: T:Dropbox.Api.Files.ListFolderResult
  parent: Dropbox.Api.Files
  name: ListFolderResult
  nameWithType: ListFolderResult
  fullName: Dropbox.Api.Files.ListFolderResult
- uid: Dropbox.Api.Files.ListFolderContinueError
  commentId: T:Dropbox.Api.Files.ListFolderContinueError
  parent: Dropbox.Api.Files
  name: ListFolderContinueError
  nameWithType: ListFolderContinueError
  fullName: Dropbox.Api.Files.ListFolderContinueError
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync
  name: ListFolderContinueAsync
  nameWithType: FilesAppRoutes.ListFolderContinueAsync
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.ListFolderContinueAsync
- uid: Dropbox.Api.Files.ListFolderContinueArg
  commentId: T:Dropbox.Api.Files.ListFolderContinueArg
  parent: Dropbox.Api.Files
  name: ListFolderContinueArg
  nameWithType: ListFolderContinueArg
  fullName: Dropbox.Api.Files.ListFolderContinueArg
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue
  name: BeginListFolderContinue
  nameWithType: FilesAppRoutes.BeginListFolderContinue
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.BeginListFolderContinue
- uid: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolderContinue*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolderContinue
  name: EndListFolderContinue
  nameWithType: FilesAppRoutes.EndListFolderContinue
  fullName: Dropbox.Api.Files.Routes.FilesAppRoutes.EndListFolderContinue
