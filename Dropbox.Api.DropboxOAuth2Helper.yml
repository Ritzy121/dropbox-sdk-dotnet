### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.DropboxOAuth2Helper
  commentId: T:Dropbox.Api.DropboxOAuth2Helper
  id: DropboxOAuth2Helper
  parent: Dropbox.Api
  children:
  - Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeChallenge(System.String)
  - Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeVerifier
  - Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  - Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,Uri,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  - Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(System.String,System.Boolean)
  - Dropbox.Api.DropboxOAuth2Helper.ParseTokenFragment(Uri)
  - Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(System.String,System.String,System.String,System.String,HttpClient,System.String)
  - Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(Uri,System.String,System.String,System.String,System.String,HttpClient,System.String)
  langs:
  - csharp
  - vb
  name: DropboxOAuth2Helper
  nameWithType: DropboxOAuth2Helper
  fullName: Dropbox.Api.DropboxOAuth2Helper
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DropboxOAuth2Helper
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 220
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nContains methods that make authorizing with Dropbox easier.\n"
  example:
  - "\n<p>\nThis shows an example of how to use the token flow. This is part of a Windows Console or WPF app.\n</p>\n<p>\nThe <code>GetAccessToken()</code> method calls <xref href=\"Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType%2cSystem.String%2cSystem.String%2cSystem.String%2cSystem.Boolean%2cSystem.Boolean%2cSystem.String%2cSystem.Boolean%2cDropbox.Api.TokenAccessType%2cSystem.String%5b%5d%2cDropbox.Api.IncludeGrantedScopes%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> to create the URI with response type\nset to <xref href=\"Dropbox.Api.OAuthResponseType.Token\" data-throw-if-not-resolved=\"false\"></xref> for token flow.\n</p>\n<p>\n<see cref=\"!:Guid.NewGuid\"></see> is called to generate a random string to use as the state argument, this value can also be used to\nstore application context and prevent cross-site request forgery.\n</p>\n<p>\nA <see cref=\"!:HttpListener\"></see> is created to listen to the <code>RedirectUri</code> which will later receive redirect callback from\nthe server. <see cref=\"!:System.Diagnostics.Process.Start\"></see> is called to launch a native browser and navigate user to the authorize\nURI. The <code>RedirectUri</code> needs to be registered at <a href=\"https://www.dropbox.com/developers/apps\">App Console</a>. It&apos;s\ncommon to use value like <code>http://127.0.0.1:{some_avaialble_port}</code>.\n</p>\n<p>\nAfter user successfully authorizes the request, <code>HandleOAuth2Redirect</code> receives the redirect callback which contains state\nand access token as URL fragment. Since the server cannot receive URL fragment directly, it calls <code>RespondPageWithJSRedirect</code>\nto respond with a HTML page which runs JS code and sends URL fragment as query string parameter to a separate <code>JSRedirect</code> endpoint.\n</p>\n<p>\n<code>HandleJSRedirect</code> is called to handle redirect from JS code and processes OAuth response from query string.\nThis returns an <xref href=\"Dropbox.Api.OAuth2Response\" data-throw-if-not-resolved=\"false\"></xref> containing the access token that will be passed to the <xref href=\"Dropbox.Api.DropboxClient\" data-throw-if-not-resolved=\"false\"></xref> constructor.\n</p>\n<pre><code>private async Task HandleOAuth2Redirect(HttpListener http)\n{\n    var context = await http.GetContextAsync();\n\n    // We only care about request to RedirectUri endpoint.\n    while (context.Request.Url.AbsolutePath != RedirectUri.AbsolutePath)\n    {\n        context = await http.GetContextAsync();\n    }\n\n    // Respond with a HTML page which runs JS to send URl fragment.\n    RespondPageWithJSRedirect();\n}\n\n\nprivate async Task&lt;OAuth2Response> HandleJSRedirect(HttpListener http)\n{\n    var context = await http.GetContextAsync();\n\n    // We only care about request to TokenRedirectUri endpoint.\n    while (context.Request.Url.AbsolutePath != JSRedirectUri.AbsolutePath)\n    {\n        context = await http.GetContextAsync();\n    }\n\n    var redirectUri = new Uri(context.Request.QueryString[&quot;url_with_fragment&quot;]);\n\n    var result = DropboxOAuth2Helper.ParseTokenFragment(redirectUri);\n\n    return result;\n}\n\nprivate async Task GetAccessToken() {\n    var state = Guid.NewGuid().ToString(&quot;N&quot;);\n    var authorizeUri = DropboxOAuth2Helper.GetAuthorizeUri(OAuthResponseType.Token, ApiKey, new Uri(RedirectUri), state: state);\n\n    var http = new HttpListener();\n    http.Prefixes.Add(RedirectUri);\n    http.Start();\n\n    System.Diagnostics.Process.Start(authorizeUri.ToString());\n\n    // Handle OAuth redirect and send URL fragment to local server using JS.\n    await HandleOAuth2Redirect(http);\n\n    // Handle redirect from JS and process OAuth response.\n    var result = await HandleJSRedirect(http);\n\n    if (result.State != state)\n    {\n        // The state in the response doesn&apos;t match the state in the request.\n        return null;\n    }\n\n    Settings.Default.AccessToken = result.AccessToken;\n}</code></pre>\n<p>\nThis shows an example of how to use the code flow. This is part of a controller class on an ASP.Net MVC website.\n</p>\n<p>\nThe <code>Connect()</code> method calls <xref href=\"Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType%2cSystem.String%2cSystem.String%2cSystem.String%2cSystem.Boolean%2cSystem.Boolean%2cSystem.String%2cSystem.Boolean%2cDropbox.Api.TokenAccessType%2cSystem.String%5b%5d%2cDropbox.Api.IncludeGrantedScopes%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref> to create the URI that the browser component\nnavigate to; the response type is set to <xref href=\"Dropbox.Api.OAuthResponseType.Code\" data-throw-if-not-resolved=\"false\"></xref> to create a URI for the code flow.\n</p>\n<p>\n<see cref=\"!:Guid.NewGuid\"></see> is called to generate a random string to use as the state argument, this value is stored\non a field in the web app&apos;s user database associated with the current user, this helps prevent cross-site request forgery.\n</p>\n<p>\nThe <code>AuthAsync</code> method handles the route represented by the <code>RedirectUri</code>. The ASP.Net infrastructure has already\nparsed the query string and extracted the <code>code</code> and <code>state</code> arguments. After validating that the <code>state</code>\nmatches the value stored in the user record in the <code>Connect</code> method, authorization is completed by calling\n<xref href=\"Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(System.String%2cSystem.String%2cSystem.String%2cSystem.String%2cHttpClient%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>. This returns an <xref href=\"Dropbox.Api.OAuth2Response\" data-throw-if-not-resolved=\"false\"></xref> containing the access token\nthat will be passed to the <xref href=\"Dropbox.Api.DropboxClient\" data-throw-if-not-resolved=\"false\"></xref> constructor.\n</p>\n<pre><code>// GET: /Home/Connect\npublic ActionResult Connect()\n{\n    var user = this.store.CurrentUser();\n    user.ConnectState = Guid.NewGuid().ToString(&quot;N&quot;);\n    this.store.SaveChanges();\n\n    var redirect = DropboxOAuth2Helper.GetAuthorizeUri(OauthResponseType.Code, AppKey, RedirectUri, user.ConnectState);\n    return Redirect(redirect.ToString());\n}\n\n// GET: /Home/Auth\npublic async Task&lt;ActionResult> AuthAsync(string code, string state)\n{\n    var user = this.store.CurrentUser();\n\n    if (user.ConnectState != state)\n    {\n        this.Flash(&quot;There was an error connecting to Dropbox.&quot;);\n        return this.RedirectToAction(&quot;Index&quot;);\n    }\n\n    OAuth2Response response = await DropboxOAuth2Helper.ProcessCodeFlowAsync(code, AppKey, AppSecret, RedirectUri);\n\n    user.DropboxAccessToken = response.AccessToken;\n    await this.store.SaveChangesAsync();\n\n    this.Flash(&quot;This account has been connected to Dropbox.&quot;);\n    return this.RedirectToAction(&quot;Profile&quot;);\n}</code></pre>\n"
  syntax:
    content: 'public static class DropboxOAuth2Helper : object'
    content.vb: >-
      Public Module DropboxOAuth2Helper
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  id: GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  parent: Dropbox.Api.DropboxOAuth2Helper
  langs:
  - csharp
  - vb
  name: GetAuthorizeUri(OAuthResponseType, String, String, String, Boolean, Boolean, String, Boolean, TokenAccessType, String[], IncludeGrantedScopes, String)
  nameWithType: DropboxOAuth2Helper.GetAuthorizeUri(OAuthResponseType, String, String, String, Boolean, Boolean, String, Boolean, TokenAccessType, String[], IncludeGrantedScopes, String)
  fullName: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType, System.String, System.String, System.String, System.Boolean, System.Boolean, System.String, System.Boolean, Dropbox.Api.TokenAccessType, System.String[], Dropbox.Api.IncludeGrantedScopes, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetAuthorizeUri
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 261
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nGets the URI used to start the OAuth2.0 authorization flow.\n"
  example: []
  syntax:
    content: public static Uri GetAuthorizeUri(OAuthResponseType oauthResponseType, string clientId, string redirectUri = null, string state = null, bool forceReapprove = false, bool disableSignup = false, string requireRole = null, bool forceReauthentication = false, TokenAccessType tokenAccessType = TokenAccessType.Legacy, string[] scopeList = null, IncludeGrantedScopes includeGrantedScopes = IncludeGrantedScopes.None, string codeChallenge = null)
    parameters:
    - id: oauthResponseType
      type: Dropbox.Api.OAuthResponseType
      description: The grant type requested, either <code>Token</code> or <code>Code</code>.
    - id: clientId
      type: System.String
      description: >-
        The apps key, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a>.
    - id: redirectUri
      type: System.String
      description: >-
        Where to redirect the user after authorization has completed. This must be the exact URI

        registered in the <a href="https://www.dropbox.com/developers/apps">App Console</a>; even <code>localhost</code>

        must be listed if it is used for testing. A redirect URI is required for a token flow, but optional for code.

        If the redirect URI is omitted, the code will be presented directly to the user and they will be invited to enter

        the information in your app.
    - id: state
      type: System.String
      description: >-
        Up to 500 bytes of arbitrary data that will be passed back to <code data-dev-comment-type="paramref" class="paramref">redirectUri</code>.

        This parameter should be used to protect against cross-site request forgery (CSRF).
    - id: forceReapprove
      type: System.Boolean
      description: >-
        Whether or not to force the user to approve the app again if they&apos;ve already done so.

        If <code>false</code> (default), a user who has already approved the application may be automatically redirected to

        <code data-dev-comment-type="paramref" class="paramref">redirectUri</code>If <code>true</code>, the user will not be automatically redirected and will have to approve

        the app again.
    - id: disableSignup
      type: System.Boolean
      description: >-
        When <code>true</code> (default is <code>false</code>) users will not be able to sign up for a

        Dropbox account via the authorization page. Instead, the authorization page will show a link to the Dropbox

        iOS app in the App Store. This is only intended for use when necessary for compliance with App Store policies.
    - id: requireRole
      type: System.String
      description: >-
        If this parameter is specified, the user will be asked to authorize with a particular

        type of Dropbox account, either work for a team account or personal for a personal account. Your app should still

        verify the type of Dropbox account after authorization since the user could modify or remove the require_role

        parameter.
    - id: forceReauthentication
      type: System.Boolean
      description: >-
        If <code>true</code>, users will be signed out if they are currently signed in.

        This will make sure the user is brought to a page where they can create a new account or sign in to another account.

        This should only be used when there is a definite reason to believe that the user needs to sign in to a new or

        different account.
    - id: tokenAccessType
      type: Dropbox.Api.TokenAccessType
      description: >-
        Determines the type of token to request.  See <xref href="Dropbox.Api.TokenAccessType" data-throw-if-not-resolved="false"></xref>

        for information on specific types available.  If none is specified, this will use the legacy type.
    - id: scopeList
      type: System.String[]
      description: list of scopes to request in base oauth flow.  If left blank, will default to all scopes for app.
    - id: includeGrantedScopes
      type: Dropbox.Api.IncludeGrantedScopes
      description: 'which scopes to include from previous grants. Note: if this user has never linked the app, include_granted_scopes must be None.'
    - id: codeChallenge
      type: System.String
      description: If using PKCE, please us the PKCEOAuthFlow object.
    return:
      type: Uri
      description: The uri of a web page which must be displayed to the user in order to authorize the app.
    content.vb: Public Shared Function GetAuthorizeUri(oauthResponseType As OAuthResponseType, clientId As String, redirectUri As String = Nothing, state As String = Nothing, forceReapprove As Boolean = False, disableSignup As Boolean = False, requireRole As String = Nothing, forceReauthentication As Boolean = False, tokenAccessType As TokenAccessType = TokenAccessType.Legacy, scopeList As String() = Nothing, includeGrantedScopes As IncludeGrantedScopes = IncludeGrantedScopes.None, codeChallenge As String = Nothing) As Uri
  overload: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri*
  nameWithType.vb: DropboxOAuth2Helper.GetAuthorizeUri(OAuthResponseType, String, String, String, Boolean, Boolean, String, Boolean, TokenAccessType, String(), IncludeGrantedScopes, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType, System.String, System.String, System.String, System.Boolean, System.Boolean, System.String, System.Boolean, Dropbox.Api.TokenAccessType, System.String(), Dropbox.Api.IncludeGrantedScopes, System.String)
  name.vb: GetAuthorizeUri(OAuthResponseType, String, String, String, Boolean, Boolean, String, Boolean, TokenAccessType, String(), IncludeGrantedScopes, String)
- uid: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,Uri,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,Uri,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  id: GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,Uri,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  parent: Dropbox.Api.DropboxOAuth2Helper
  langs:
  - csharp
  - vb
  name: GetAuthorizeUri(OAuthResponseType, String, Uri, String, Boolean, Boolean, String, Boolean, TokenAccessType, String[], IncludeGrantedScopes, String)
  nameWithType: DropboxOAuth2Helper.GetAuthorizeUri(OAuthResponseType, String, Uri, String, Boolean, Boolean, String, Boolean, TokenAccessType, String[], IncludeGrantedScopes, String)
  fullName: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType, System.String, Uri, System.String, System.Boolean, System.Boolean, System.String, System.Boolean, Dropbox.Api.TokenAccessType, System.String[], Dropbox.Api.IncludeGrantedScopes, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetAuthorizeUri
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 302
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nGets the URI used to start the OAuth2.0 authorization flow.\n"
  example: []
  syntax:
    content: public static Uri GetAuthorizeUri(OAuthResponseType oauthResponseType, string clientId, Uri redirectUri = null, string state = null, bool forceReapprove = false, bool disableSignup = false, string requireRole = null, bool forceReauthentication = false, TokenAccessType tokenAccessType = TokenAccessType.Legacy, string[] scopeList = null, IncludeGrantedScopes includeGrantedScopes = IncludeGrantedScopes.None, string codeChallenge = null)
    parameters:
    - id: oauthResponseType
      type: Dropbox.Api.OAuthResponseType
      description: The grant type requested, either <code>Token</code> or <code>Code</code>.
    - id: clientId
      type: System.String
      description: >-
        The apps key, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a>.
    - id: redirectUri
      type: Uri
      description: >-
        Where to redirect the user after authorization has completed. This must be the exact URI

        registered in the <a href="https://www.dropbox.com/developers/apps">App Console</a>; even <code>localhost</code>

        must be listed if it is used for testing. A redirect URI is required for a token flow, but optional for code.

        If the redirect URI is omitted, the code will be presented directly to the user and they will be invited to enter

        the information in your app.
    - id: state
      type: System.String
      description: >-
        Up to 500 bytes of arbitrary data that will be passed back to <code data-dev-comment-type="paramref" class="paramref">redirectUri</code>.

        This parameter should be used to protect against cross-site request forgery (CSRF).
    - id: forceReapprove
      type: System.Boolean
      description: >-
        Whether or not to force the user to approve the app again if they&apos;ve already done so.

        If <code>false</code> (default), a user who has already approved the application may be automatically redirected to

        <code data-dev-comment-type="paramref" class="paramref">redirectUri</code>If <code>true</code>, the user will not be automatically redirected and will have to approve

        the app again.
    - id: disableSignup
      type: System.Boolean
      description: >-
        When <code>true</code> (default is <code>false</code>) users will not be able to sign up for a

        Dropbox account via the authorization page. Instead, the authorization page will show a link to the Dropbox

        iOS app in the App Store. This is only intended for use when necessary for compliance with App Store policies.
    - id: requireRole
      type: System.String
      description: >-
        If this parameter is specified, the user will be asked to authorize with a particular

        type of Dropbox account, either work for a team account or personal for a personal account. Your app should still

        verify the type of Dropbox account after authorization since the user could modify or remove the require_role

        parameter.
    - id: forceReauthentication
      type: System.Boolean
      description: >-
        If <code>true</code>, users will be signed out if they are currently signed in.

        This will make sure the user is brought to a page where they can create a new account or sign in to another account.

        This should only be used when there is a definite reason to believe that the user needs to sign in to a new or

        different account.
    - id: tokenAccessType
      type: Dropbox.Api.TokenAccessType
      description: >-
        Determines the type of token to request.  See <xref href="Dropbox.Api.TokenAccessType" data-throw-if-not-resolved="false"></xref>

        for information on specific types available.  If none is specified, this will use the legacy type.
    - id: scopeList
      type: System.String[]
      description: list of scopes to request in base oauth flow.  If left blank, will default to all scopes for app.
    - id: includeGrantedScopes
      type: Dropbox.Api.IncludeGrantedScopes
      description: 'which scopes to include from previous grants. Note: if this user has never linked the app, include_granted_scopes must be None.'
    - id: codeChallenge
      type: System.String
      description: If using PKCE, please us the PKCEOAuthFlow object.
    return:
      type: Uri
      description: The uri of a web page which must be displayed to the user in order to authorize the app.
    content.vb: Public Shared Function GetAuthorizeUri(oauthResponseType As OAuthResponseType, clientId As String, redirectUri As Uri = Nothing, state As String = Nothing, forceReapprove As Boolean = False, disableSignup As Boolean = False, requireRole As String = Nothing, forceReauthentication As Boolean = False, tokenAccessType As TokenAccessType = TokenAccessType.Legacy, scopeList As String() = Nothing, includeGrantedScopes As IncludeGrantedScopes = IncludeGrantedScopes.None, codeChallenge As String = Nothing) As Uri
  overload: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri*
  nameWithType.vb: DropboxOAuth2Helper.GetAuthorizeUri(OAuthResponseType, String, Uri, String, Boolean, Boolean, String, Boolean, TokenAccessType, String(), IncludeGrantedScopes, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType, System.String, Uri, System.String, System.Boolean, System.Boolean, System.String, System.Boolean, Dropbox.Api.TokenAccessType, System.String(), Dropbox.Api.IncludeGrantedScopes, System.String)
  name.vb: GetAuthorizeUri(OAuthResponseType, String, Uri, String, Boolean, Boolean, String, Boolean, TokenAccessType, String(), IncludeGrantedScopes, String)
- uid: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(System.String,System.Boolean)
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(System.String,System.Boolean)
  id: GetAuthorizeUri(System.String,System.Boolean)
  parent: Dropbox.Api.DropboxOAuth2Helper
  langs:
  - csharp
  - vb
  name: GetAuthorizeUri(String, Boolean)
  nameWithType: DropboxOAuth2Helper.GetAuthorizeUri(String, Boolean)
  fullName: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetAuthorizeUri
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 395
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nGets the URI used to start the OAuth2.0 authorization flow which doesn&apos;t require a redirect URL.\n"
  example: []
  syntax:
    content: public static Uri GetAuthorizeUri(string clientId, bool disableSignup = false)
    parameters:
    - id: clientId
      type: System.String
      description: >-
        The apps key, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a>.
    - id: disableSignup
      type: System.Boolean
      description: >-
        When <code>true</code> (default is <code>false</code>) users will not be able to sign up for a

        Dropbox account via the authorization page. Instead, the authorization page will show a link to the Dropbox

        iOS app in the App Store. This is only intended for use when necessary for compliance with App Store policies.
    return:
      type: Uri
      description: The uri of a web page which must be displayed to the user in order to authorize the app.
    content.vb: Public Shared Function GetAuthorizeUri(clientId As String, disableSignup As Boolean = False) As Uri
  overload: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeVerifier
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeVerifier
  id: GeneratePKCECodeVerifier
  parent: Dropbox.Api.DropboxOAuth2Helper
  langs:
  - csharp
  - vb
  name: GeneratePKCECodeVerifier()
  nameWithType: DropboxOAuth2Helper.GeneratePKCECodeVerifier()
  fullName: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeVerifier()
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GeneratePKCECodeVerifier
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 404
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nGenerates a PKCE code verifier.\n"
  example: []
  syntax:
    content: public static string GeneratePKCECodeVerifier()
    return:
      type: System.String
      description: The PKCE code verifier.
    content.vb: Public Shared Function GeneratePKCECodeVerifier As String
  overload: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeVerifier*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeChallenge(System.String)
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeChallenge(System.String)
  id: GeneratePKCECodeChallenge(System.String)
  parent: Dropbox.Api.DropboxOAuth2Helper
  langs:
  - csharp
  - vb
  name: GeneratePKCECodeChallenge(String)
  nameWithType: DropboxOAuth2Helper.GeneratePKCECodeChallenge(String)
  fullName: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeChallenge(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GeneratePKCECodeChallenge
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 420
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nHashes a PKCE code verifier to generate a code challenge.\n"
  example: []
  syntax:
    content: public static string GeneratePKCECodeChallenge(string codeVerifier)
    parameters:
    - id: codeVerifier
      type: System.String
      description: The PKCE code verifier.
    return:
      type: System.String
      description: The PKCE code challenge.
    content.vb: Public Shared Function GeneratePKCECodeChallenge(codeVerifier As String) As String
  overload: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeChallenge*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Dropbox.Api.DropboxOAuth2Helper.ParseTokenFragment(Uri)
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.ParseTokenFragment(Uri)
  id: ParseTokenFragment(Uri)
  parent: Dropbox.Api.DropboxOAuth2Helper
  langs:
  - csharp
  - vb
  name: ParseTokenFragment(Uri)
  nameWithType: DropboxOAuth2Helper.ParseTokenFragment(Uri)
  fullName: Dropbox.Api.DropboxOAuth2Helper.ParseTokenFragment(Uri)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ParseTokenFragment
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 438
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nParses the token fragment. When using the OAuth 2.0 token or implicit grant flow, the\nuser will be redirected to a URI with a fragment containing the authorization token.\n"
  example: []
  syntax:
    content: public static OAuth2Response ParseTokenFragment(Uri redirectedUri)
    parameters:
    - id: redirectedUri
      type: Uri
      description: The redirected URI.
    return:
      type: Dropbox.Api.OAuth2Response
      description: The authorization response, containing the access token and uid of the authorized user.
    content.vb: Public Shared Function ParseTokenFragment(redirectedUri As Uri) As OAuth2Response
  overload: Dropbox.Api.DropboxOAuth2Helper.ParseTokenFragment*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(System.String,System.String,System.String,System.String,HttpClient,System.String)
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(System.String,System.String,System.String,System.String,HttpClient,System.String)
  id: ProcessCodeFlowAsync(System.String,System.String,System.String,System.String,HttpClient,System.String)
  parent: Dropbox.Api.DropboxOAuth2Helper
  langs:
  - csharp
  - vb
  name: ProcessCodeFlowAsync(String, String, String, String, HttpClient, String)
  nameWithType: DropboxOAuth2Helper.ProcessCodeFlowAsync(String, String, String, String, HttpClient, String)
  fullName: Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(System.String, System.String, System.String, System.String, HttpClient, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ProcessCodeFlowAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 500
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nProcesses the second half of the OAuth 2.0 code flow.\n"
  example: []
  syntax:
    content: public static Task<OAuth2Response> ProcessCodeFlowAsync(string code, string appKey, string appSecret = null, string redirectUri = null, HttpClient client = null, string codeVerifier = null)
    parameters:
    - id: code
      type: System.String
      description: The code acquired in the query parameters of the redirect from the initial authorize url.
    - id: appKey
      type: System.String
      description: >-
        The application key, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a>.
    - id: appSecret
      type: System.String
      description: >-
        The application secret, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a> This is optional if using PKCE.
    - id: redirectUri
      type: System.String
      description: >-
        The redirect URI that was provided in the initial authorize URI,

        this is only used to validate that it matches the original request, it is not used to redirect

        again.
    - id: client
      type: HttpClient
      description: An optional http client instance used to make requests.
    - id: codeVerifier
      type: System.String
      description: The code verifier for PKCE flow.  If using PKCE, please us the PKCEOauthFlow object.
    return:
      type: Task{Dropbox.Api.OAuth2Response}
      description: The authorization response, containing the access token and uid of the authorized user.
    content.vb: Public Shared Function ProcessCodeFlowAsync(code As String, appKey As String, appSecret As String = Nothing, redirectUri As String = Nothing, client As HttpClient = Nothing, codeVerifier As String = Nothing) As Task(Of OAuth2Response)
  overload: Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(Uri,System.String,System.String,System.String,System.String,HttpClient,System.String)
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(Uri,System.String,System.String,System.String,System.String,HttpClient,System.String)
  id: ProcessCodeFlowAsync(Uri,System.String,System.String,System.String,System.String,HttpClient,System.String)
  parent: Dropbox.Api.DropboxOAuth2Helper
  langs:
  - csharp
  - vb
  name: ProcessCodeFlowAsync(Uri, String, String, String, String, HttpClient, String)
  nameWithType: DropboxOAuth2Helper.ProcessCodeFlowAsync(Uri, String, String, String, String, HttpClient, String)
  fullName: Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(Uri, System.String, System.String, System.String, System.String, HttpClient, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ProcessCodeFlowAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/DropboxOauth2Helper.cs
    startLine: 612
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api
  summary: "\nProcesses the second half of the OAuth 2.0 code flow.\n"
  example: []
  syntax:
    content: public static Task<OAuth2Response> ProcessCodeFlowAsync(Uri responseUri, string appKey, string appSecret, string redirectUri = null, string state = null, HttpClient client = null, string codeVerifier = null)
    parameters:
    - id: responseUri
      type: Uri
      description: The URI to which the user was redirected after the initial authorization request.
    - id: appKey
      type: System.String
      description: >-
        The application key, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a>.
    - id: appSecret
      type: System.String
      description: >-
        The application secret, found in the

        <a href="https://www.dropbox.com/developers/apps">App Console</a>.
    - id: redirectUri
      type: System.String
      description: >-
        The redirect URI that was provided in the initial authorize URI,

        this is only used to validate that it matches the original request, it is not used to redirect

        again.
    - id: state
      type: System.String
      description: The state parameter (if any) that matches that used in the initial authorize URI.
    - id: client
      type: HttpClient
      description: An optional http client instance used to make requests.
    - id: codeVerifier
      type: System.String
      description: The code verifier for PKCE flow.  If using PKCE, please us the PKCEOauthFlow object.
    return:
      type: Task{Dropbox.Api.OAuth2Response}
      description: The authorization response, containing the access token and uid of the authorized user.
    content.vb: Public Shared Function ProcessCodeFlowAsync(responseUri As Uri, appKey As String, appSecret As String, redirectUri As String = Nothing, state As String = Nothing, client As HttpClient = Nothing, codeVerifier As String = Nothing) As Task(Of OAuth2Response)
  overload: Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri(Dropbox.Api.OAuthResponseType,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.Boolean,Dropbox.Api.TokenAccessType,System.String[],Dropbox.Api.IncludeGrantedScopes,System.String)
  isExternal: true
- uid: Dropbox.Api.OAuthResponseType.Token
  commentId: F:Dropbox.Api.OAuthResponseType.Token
  isExternal: true
- uid: Dropbox.Api.OAuth2Response
  commentId: T:Dropbox.Api.OAuth2Response
  parent: Dropbox.Api
  name: OAuth2Response
  nameWithType: OAuth2Response
  fullName: Dropbox.Api.OAuth2Response
- uid: Dropbox.Api.DropboxClient
  commentId: T:Dropbox.Api.DropboxClient
  parent: Dropbox.Api
  name: DropboxClient
  nameWithType: DropboxClient
  fullName: Dropbox.Api.DropboxClient
- uid: Dropbox.Api.OAuthResponseType.Code
  commentId: F:Dropbox.Api.OAuthResponseType.Code
  isExternal: true
- uid: Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(System.String,System.String,System.String,System.String,HttpClient,System.String)
  commentId: M:Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync(System.String,System.String,System.String,System.String,HttpClient,System.String)
  isExternal: true
- uid: Dropbox.Api
  commentId: N:Dropbox.Api
  name: Dropbox.Api
  nameWithType: Dropbox.Api
  fullName: Dropbox.Api
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Dropbox.Api.TokenAccessType
  commentId: T:Dropbox.Api.TokenAccessType
  parent: Dropbox.Api
  name: TokenAccessType
  nameWithType: TokenAccessType
  fullName: Dropbox.Api.TokenAccessType
- uid: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri*
  commentId: Overload:Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri
  name: GetAuthorizeUri
  nameWithType: DropboxOAuth2Helper.GetAuthorizeUri
  fullName: Dropbox.Api.DropboxOAuth2Helper.GetAuthorizeUri
- uid: Dropbox.Api.OAuthResponseType
  commentId: T:Dropbox.Api.OAuthResponseType
  parent: Dropbox.Api
  name: OAuthResponseType
  nameWithType: OAuthResponseType
  fullName: Dropbox.Api.OAuthResponseType
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Dropbox.Api.IncludeGrantedScopes
  commentId: T:Dropbox.Api.IncludeGrantedScopes
  parent: Dropbox.Api
  name: IncludeGrantedScopes
  nameWithType: IncludeGrantedScopes
  fullName: Dropbox.Api.IncludeGrantedScopes
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
- uid: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeVerifier*
  commentId: Overload:Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeVerifier
  name: GeneratePKCECodeVerifier
  nameWithType: DropboxOAuth2Helper.GeneratePKCECodeVerifier
  fullName: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeVerifier
- uid: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeChallenge*
  commentId: Overload:Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeChallenge
  name: GeneratePKCECodeChallenge
  nameWithType: DropboxOAuth2Helper.GeneratePKCECodeChallenge
  fullName: Dropbox.Api.DropboxOAuth2Helper.GeneratePKCECodeChallenge
- uid: Dropbox.Api.DropboxOAuth2Helper.ParseTokenFragment*
  commentId: Overload:Dropbox.Api.DropboxOAuth2Helper.ParseTokenFragment
  name: ParseTokenFragment
  nameWithType: DropboxOAuth2Helper.ParseTokenFragment
  fullName: Dropbox.Api.DropboxOAuth2Helper.ParseTokenFragment
- uid: Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync*
  commentId: Overload:Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync
  name: ProcessCodeFlowAsync
  nameWithType: DropboxOAuth2Helper.ProcessCodeFlowAsync
  fullName: Dropbox.Api.DropboxOAuth2Helper.ProcessCodeFlowAsync
- uid: HttpClient
  isExternal: true
  name: HttpClient
  nameWithType: HttpClient
  fullName: HttpClient
- uid: Task{Dropbox.Api.OAuth2Response}
  commentId: '!:Task{Dropbox.Api.OAuth2Response}'
  definition: Task`1
  name: Task<OAuth2Response>
  nameWithType: Task<OAuth2Response>
  fullName: Task<Dropbox.Api.OAuth2Response>
  nameWithType.vb: Task(Of OAuth2Response)
  fullName.vb: Task(Of Dropbox.Api.OAuth2Response)
  name.vb: Task(Of OAuth2Response)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.OAuth2Response
    name: OAuth2Response
    nameWithType: OAuth2Response
    fullName: Dropbox.Api.OAuth2Response
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.OAuth2Response
    name: OAuth2Response
    nameWithType: OAuth2Response
    fullName: Dropbox.Api.OAuth2Response
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
shouldSkipMarkup: true
