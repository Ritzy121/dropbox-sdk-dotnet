### YamlMime:ManagedReference
items:
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes
  commentId: T:Dropbox.Api.Files.Routes.FilesUserRoutes
  id: FilesUserRoutes
  parent: Dropbox.Api.Files.Routes
  children:
  - Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(Dropbox.Api.Files.CommitInfoWithProperties,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(Dropbox.Api.Files.CommitInfoWithProperties,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(System.String,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(Dropbox.Api.Files.DownloadArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(Dropbox.Api.Files.ExportArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(Dropbox.Api.Files.PreviewArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo,System.Double,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(System.String,System.UInt64,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList(System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(Dropbox.Api.Files.RestoreArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(System.String,System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(Dropbox.Api.Files.SearchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(Dropbox.Api.Files.SearchV2Arg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(Dropbox.Api.Files.CommitInfo,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(System.String,System.UInt64,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(System.String,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.IO.Stream,System.AsyncCallback,System.Object)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(Dropbox.Api.Files.RelocationArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(Dropbox.Api.Files.RelocationArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(System.String,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(System.String,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(Dropbox.Api.Files.DeleteArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(Dropbox.Api.Files.DownloadArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart(System.IAsyncResult)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(Dropbox.Api.Files.ExportArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo,System.Double)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(System.String,System.UInt64)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(Dropbox.Api.Files.RelocationArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(Dropbox.Api.Files.RelocationArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(Dropbox.Api.Files.RestoreArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(System.String,System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(Dropbox.Api.Files.SearchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(System.String,System.UInt64,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(System.String)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  - Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.IO.Stream)
  langs:
  - csharp
  - vb
  name: FilesUserRoutes
  nameWithType: FilesUserRoutes
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes
  type: Class
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: FilesUserRoutes
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 15
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The routes for the <xref href=\"Dropbox.Api.Files\" data-throw-if-not-resolved=\"false\"></xref> namespace</p>\n"
  example: []
  syntax:
    content: 'public class FilesUserRoutes : object'
    content.vb: >-
      Public Class FilesUserRoutes
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  id: AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: AlphaGetMetadataAsync(AlphaGetMetadataArg)
  nameWithType: FilesUserRoutes.AlphaGetMetadataAsync(AlphaGetMetadataArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(Dropbox.Api.Files.AlphaGetMetadataArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: AlphaGetMetadataAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 43
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the metadata for a file or folder. This is an alpha endpoint\ncompatible with the properties API.</p>\n<p>Note: Metadata for the root folder is unsupported.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> AlphaGetMetadataAsync(AlphaGetMetadataArg alphaGetMetadataArg)
    parameters:
    - id: alphaGetMetadataArg
      type: Dropbox.Api.Files.AlphaGetMetadataArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function AlphaGetMetadataAsync(alphaGetMetadataArg As AlphaGetMetadataArg) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.AlphaGetMetadataError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg,System.AsyncCallback,System.Object)
  id: BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginAlphaGetMetadata(AlphaGetMetadataArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginAlphaGetMetadata(AlphaGetMetadataArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(Dropbox.Api.Files.AlphaGetMetadataArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginAlphaGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 58
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the alpha get metadata route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginAlphaGetMetadata(AlphaGetMetadataArg alphaGetMetadataArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: alphaGetMetadataArg
      type: Dropbox.Api.Files.AlphaGetMetadataArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginAlphaGetMetadata(alphaGetMetadataArg As AlphaGetMetadataArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String})
  id: AlphaGetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: AlphaGetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.Collections.Generic.IEnumerable<String>)
  nameWithType: FilesUserRoutes.AlphaGetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.Collections.Generic.IEnumerable<String>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: AlphaGetMetadataAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 92
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the metadata for a file or folder. This is an alpha endpoint\ncompatible with the properties API.</p>\n<p>Note: Metadata for the root folder is unsupported.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> AlphaGetMetadataAsync(string path, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, TemplateFilterBase includePropertyGroups = null, System.Collections.Generic.IEnumerable<string> includePropertyTemplates = null)
    parameters:
    - id: path
      type: System.String
      description: The path of a file or folder on Dropbox.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and

        video.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.DeletedMetadata" data-throw-if-not-resolved="false"></xref> will be

        returned for deleted file or folder, otherwise <xref href="Dropbox.Api.Files.LookupError.NotFound" data-throw-if-not-resolved="false"></xref> will be returned.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includePropertyTemplates
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set for files with

        custom properties.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function AlphaGetMetadataAsync(path As String, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includePropertyGroups As TemplateFilterBase = Nothing, includePropertyTemplates As System.Collections.Generic.IEnumerable(Of String) = Nothing) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.AlphaGetMetadataError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.AlphaGetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.Collections.Generic.IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: AlphaGetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.Collections.Generic.IEnumerable(Of String))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  id: BeginAlphaGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginAlphaGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.Collections.Generic.IEnumerable<String>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginAlphaGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.Collections.Generic.IEnumerable<String>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.Collections.Generic.IEnumerable<System.String>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginAlphaGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 134
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the alpha get metadata route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginAlphaGetMetadata(string path, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, TemplateFilterBase includePropertyGroups = null, System.Collections.Generic.IEnumerable<string> includePropertyTemplates = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of a file or folder on Dropbox.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and

        video.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.DeletedMetadata" data-throw-if-not-resolved="false"></xref> will be

        returned for deleted file or folder, otherwise <xref href="Dropbox.Api.Files.LookupError.NotFound" data-throw-if-not-resolved="false"></xref> will be returned.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includePropertyTemplates
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set for files with

        custom properties.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginAlphaGetMetadata(path As String, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includePropertyGroups As TemplateFilterBase = Nothing, includePropertyTemplates As System.Collections.Generic.IEnumerable(Of String) = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata*
  nameWithType.vb: FilesUserRoutes.BeginAlphaGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.Collections.Generic.IEnumerable(Of String), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.Collections.Generic.IEnumerable(Of System.String), System.AsyncCallback, System.Object)
  name.vb: BeginAlphaGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.Collections.Generic.IEnumerable(Of String), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata(System.IAsyncResult)
  id: EndAlphaGetMetadata(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndAlphaGetMetadata(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndAlphaGetMetadata(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndAlphaGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 164
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the alpha get metadata route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public Metadata EndAlphaGetMetadata(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: Public Function EndAlphaGetMetadata(asyncResult As System.IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.AlphaGetMetadataError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(Dropbox.Api.Files.CommitInfoWithProperties,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(Dropbox.Api.Files.CommitInfoWithProperties,System.IO.Stream)
  id: AlphaUploadAsync(Dropbox.Api.Files.CommitInfoWithProperties,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: AlphaUploadAsync(CommitInfoWithProperties, System.IO.Stream)
  nameWithType: FilesUserRoutes.AlphaUploadAsync(CommitInfoWithProperties, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(Dropbox.Api.Files.CommitInfoWithProperties, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: AlphaUploadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 191
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a new file with the contents provided in the request. Note that this\nendpoint is part of the properties API alpha and is slightly different from <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Do not use this to upload a file larger than 150 MB. Instead, create an\nupload session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FileMetadata> AlphaUploadAsync(CommitInfoWithProperties commitInfoWithProperties, System.IO.Stream body)
    parameters:
    - id: commitInfoWithProperties
      type: Dropbox.Api.Files.CommitInfoWithProperties
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function AlphaUploadAsync(commitInfoWithProperties As CommitInfoWithProperties, body As System.IO.Stream) As System.Threading.Tasks.Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadErrorWithProperties" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(Dropbox.Api.Files.CommitInfoWithProperties,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(Dropbox.Api.Files.CommitInfoWithProperties,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginAlphaUpload(Dropbox.Api.Files.CommitInfoWithProperties,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginAlphaUpload(CommitInfoWithProperties, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginAlphaUpload(CommitInfoWithProperties, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(Dropbox.Api.Files.CommitInfoWithProperties, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginAlphaUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 207
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the alpha upload route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginAlphaUpload(CommitInfoWithProperties commitInfoWithProperties, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: commitInfoWithProperties
      type: Dropbox.Api.Files.CommitInfoWithProperties
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginAlphaUpload(commitInfoWithProperties As CommitInfoWithProperties, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream)
  id: AlphaUploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: AlphaUploadAsync(String, WriteMode, Boolean, Nullable<System.DateTime>, Boolean, System.Collections.Generic.IEnumerable<PropertyGroup>, Boolean, System.IO.Stream)
  nameWithType: FilesUserRoutes.AlphaUploadAsync(String, WriteMode, Boolean, Nullable<System.DateTime>, Boolean, System.Collections.Generic.IEnumerable<PropertyGroup>, Boolean, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable<System.DateTime>, System.Boolean, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.Boolean, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: AlphaUploadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 250
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a new file with the contents provided in the request. Note that this\nendpoint is part of the properties API alpha and is slightly different from <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Do not use this to upload a file larger than 150 MB. Instead, create an\nupload session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FileMetadata> AlphaUploadAsync(string path, WriteMode mode = null, bool autorename = false, System.DateTime? clientModified = null, bool mute = false, System.Collections.Generic.IEnumerable<PropertyGroup> propertyGroups = null, bool strictConflict = false, System.IO.Stream body = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to save the file.
    - id: mode
      type: Dropbox.Api.Files.WriteMode
      description: Selects what to do if the file already exists.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, as determined by <code data-dev-comment-type="paramref" class="paramref">mode</code>, have the Dropbox server try to autorename the file to avoid

        conflict.
    - id: clientModified
      type: System.Nullable{System.DateTime}
      description: >-
        The value to store as the <code data-dev-comment-type="paramref" class="paramref">clientModified</code> timestamp. Dropbox automatically records the time at which

        the file was written to the Dropbox servers. It can also record an additional

        timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of

        when the file was actually created or modified.
    - id: mute
      type: System.Boolean
      description: >-
        Normally, users are made aware of any file modifications in

        their Dropbox account via notifications in the client software. If <code>true</code>,

        this tells the clients that this modification shouldn&apos;t result in a user

        notification.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: List of custom properties to add to file.
    - id: strictConflict
      type: System.Boolean
      description: >-
        Be more strict about how each <xref href="Dropbox.Api.Files.WriteMode" data-throw-if-not-resolved="false"></xref>

        detects conflict. For example, always return a conflict error when <code data-dev-comment-type="paramref" class="paramref">mode</code> = <xref href="Dropbox.Api.Files.WriteMode.Update" data-throw-if-not-resolved="false"></xref> and the given

        &quot;rev&quot; doesn&apos;t match the existing file&apos;s &quot;rev&quot;, even if the existing file has been

        deleted. This also forces a conflict even when the target path refers to a file

        with identical contents.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function AlphaUploadAsync(path As String, mode As WriteMode = Nothing, autorename As Boolean = False, clientModified As System.DateTime? = Nothing, mute As Boolean = False, propertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroup) = Nothing, strictConflict As Boolean = False, body As System.IO.Stream = Nothing) As System.Threading.Tasks.Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadErrorWithProperties" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.AlphaUploadAsync(String, WriteMode, Boolean, Nullable(Of System.DateTime), Boolean, System.Collections.Generic.IEnumerable(Of PropertyGroup), Boolean, System.IO.Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable(Of System.DateTime), System.Boolean, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.Boolean, System.IO.Stream)
  name.vb: AlphaUploadAsync(String, WriteMode, Boolean, Nullable(Of System.DateTime), Boolean, System.Collections.Generic.IEnumerable(Of PropertyGroup), Boolean, System.IO.Stream)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginAlphaUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginAlphaUpload(String, WriteMode, Boolean, Nullable<System.DateTime>, Boolean, System.Collections.Generic.IEnumerable<PropertyGroup>, Boolean, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginAlphaUpload(String, WriteMode, Boolean, Nullable<System.DateTime>, Boolean, System.Collections.Generic.IEnumerable<PropertyGroup>, Boolean, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable<System.DateTime>, System.Boolean, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.Boolean, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginAlphaUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 301
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the alpha upload route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginAlphaUpload(string path, WriteMode mode = null, bool autorename = false, System.DateTime? clientModified = null, bool mute = false, System.Collections.Generic.IEnumerable<PropertyGroup> propertyGroups = null, bool strictConflict = false, System.IO.Stream body = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to save the file.
    - id: mode
      type: Dropbox.Api.Files.WriteMode
      description: Selects what to do if the file already exists.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, as determined by <code data-dev-comment-type="paramref" class="paramref">mode</code>, have the Dropbox server try to autorename the file to avoid

        conflict.
    - id: clientModified
      type: System.Nullable{System.DateTime}
      description: >-
        The value to store as the <code data-dev-comment-type="paramref" class="paramref">clientModified</code> timestamp. Dropbox automatically records the time at which

        the file was written to the Dropbox servers. It can also record an additional

        timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of

        when the file was actually created or modified.
    - id: mute
      type: System.Boolean
      description: >-
        Normally, users are made aware of any file modifications in

        their Dropbox account via notifications in the client software. If <code>true</code>,

        this tells the clients that this modification shouldn&apos;t result in a user

        notification.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: List of custom properties to add to file.
    - id: strictConflict
      type: System.Boolean
      description: >-
        Be more strict about how each <xref href="Dropbox.Api.Files.WriteMode" data-throw-if-not-resolved="false"></xref>

        detects conflict. For example, always return a conflict error when <code data-dev-comment-type="paramref" class="paramref">mode</code> = <xref href="Dropbox.Api.Files.WriteMode.Update" data-throw-if-not-resolved="false"></xref> and the given

        &quot;rev&quot; doesn&apos;t match the existing file&apos;s &quot;rev&quot;, even if the existing file has been

        deleted. This also forces a conflict even when the target path refers to a file

        with identical contents.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginAlphaUpload(path As String, mode As WriteMode = Nothing, autorename As Boolean = False, clientModified As System.DateTime? = Nothing, mute As Boolean = False, propertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroup) = Nothing, strictConflict As Boolean = False, body As System.IO.Stream = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload*
  nameWithType.vb: FilesUserRoutes.BeginAlphaUpload(String, WriteMode, Boolean, Nullable(Of System.DateTime), Boolean, System.Collections.Generic.IEnumerable(Of PropertyGroup), Boolean, System.IO.Stream, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable(Of System.DateTime), System.Boolean, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.Boolean, System.IO.Stream, System.AsyncCallback, System.Object)
  name.vb: BeginAlphaUpload(String, WriteMode, Boolean, Nullable(Of System.DateTime), Boolean, System.Collections.Generic.IEnumerable(Of PropertyGroup), Boolean, System.IO.Stream, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload(System.IAsyncResult)
  id: EndAlphaUpload(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndAlphaUpload(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndAlphaUpload(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndAlphaUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 334
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the alpha upload route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public FileMetadata EndAlphaUpload(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FileMetadata
      description: The response to the send request
    content.vb: Public Function EndAlphaUpload(asyncResult As System.IAsyncResult) As FileMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadErrorWithProperties" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(Dropbox.Api.Files.RelocationArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(Dropbox.Api.Files.RelocationArg)
  id: CopyV2Async(Dropbox.Api.Files.RelocationArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyV2Async(RelocationArg)
  nameWithType: FilesUserRoutes.CopyV2Async(RelocationArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(Dropbox.Api.Files.RelocationArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 356
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be copied.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationResult> CopyV2Async(RelocationArg relocationArg)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyV2Async(relocationArg As RelocationArg) As System.Threading.Tasks.Task(Of RelocationResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  id: BeginCopyV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyV2(RelocationArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyV2(RelocationArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(Dropbox.Api.Files.RelocationArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 370
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyV2(RelocationArg relocationArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyV2(relocationArg As RelocationArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: CopyV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyV2Async(String, String, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.CopyV2Async(String, String, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async(System.String, System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 394
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be copied.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationResult> CopyV2Async(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyV2Async(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As System.Threading.Tasks.Task(Of RelocationResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCopyV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyV2(String, String, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyV2(String, String, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2(System.String, System.String, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 425
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyV2(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyV2(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2(System.IAsyncResult)
  id: EndCopyV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCopyV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 451
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy route to complete</p>\n"
  example: []
  syntax:
    content: public RelocationResult EndCopyV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationResult
      description: The response to the send request
    content.vb: Public Function EndCopyV2(asyncResult As System.IAsyncResult) As RelocationResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(Dropbox.Api.Files.RelocationArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(Dropbox.Api.Files.RelocationArg)
  id: CopyAsync(Dropbox.Api.Files.RelocationArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyAsync(RelocationArg)
  nameWithType: FilesUserRoutes.CopyAsync(RelocationArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(Dropbox.Api.Files.RelocationArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 472
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be copied.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> CopyAsync(RelocationArg relocationArg)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyAsync(relocationArg As RelocationArg) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  id: BeginCopy(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopy(RelocationArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopy(RelocationArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(Dropbox.Api.Files.RelocationArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopy
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 487
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopy(RelocationArg relocationArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopy(relocationArg As RelocationArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: CopyAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyAsync(String, String, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.CopyAsync(String, String, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync(System.String, System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 512
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be copied.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> CopyAsync(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyAsync(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCopy(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopy(String, String, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopy(String, String, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy(System.String, System.String, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopy
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 544
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopy(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopy(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy(System.IAsyncResult)
  id: EndCopy(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopy(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopy(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCopy
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 571
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy route to complete</p>\n"
  example: []
  syntax:
    content: public Metadata EndCopy(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: Public Function EndCopy(asyncResult As System.IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  id: CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchV2Async(RelocationBatchArgBase)
  nameWithType: FilesUserRoutes.CopyBatchV2Async(RelocationBatchArgBase)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 599
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will replace <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. The main\ndifference is this route will return status for each entry, while <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref> raises failure if\nany entry fails.</p>\n<p>This route will either finish synchronously, or return a job ID and do the\nasync copy job in background. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchV2Launch> CopyBatchV2Async(RelocationBatchArgBase relocationBatchArgBase)
    parameters:
    - id: relocationBatchArgBase
      type: Dropbox.Api.Files.RelocationBatchArgBase
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchV2Async(relocationBatchArgBase As RelocationBatchArgBase) As System.Threading.Tasks.Task(Of RelocationBatchV2Launch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase,System.AsyncCallback,System.Object)
  id: BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchV2(RelocationBatchArgBase, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchV2(RelocationBatchArgBase, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(Dropbox.Api.Files.RelocationBatchArgBase, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 613
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyBatchV2(RelocationBatchArgBase relocationBatchArgBase, System.AsyncCallback callback, object state = null)
    parameters:
    - id: relocationBatchArgBase
      type: Dropbox.Api.Files.RelocationBatchArgBase
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchV2(relocationBatchArgBase As RelocationBatchArgBase, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean)
  id: CopyBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchV2Async(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean)
  nameWithType: FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 639
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will replace <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. The main\ndifference is this route will return status for each entry, while <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref> raises failure if\nany entry fails.</p>\n<p>This route will either finish synchronously, or return a job ID and do the\nasync copy job in background. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchV2Launch> CopyBatchV2Async(System.Collections.Generic.IEnumerable<RelocationPath> entries, bool autorename = false)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchV2Async(entries As System.Collections.Generic.IEnumerable(Of RelocationPath), autorename As Boolean = False) As System.Threading.Tasks.Task(Of RelocationBatchV2Launch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async*
  nameWithType.vb: FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean)
  name.vb: CopyBatchV2Async(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCopyBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchV2(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 660
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyBatchV2(System.Collections.Generic.IEnumerable<RelocationPath> entries, bool autorename = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchV2(entries As System.Collections.Generic.IEnumerable(Of RelocationPath), autorename As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2*
  nameWithType.vb: FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginCopyBatchV2(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2(System.IAsyncResult)
  id: EndCopyBatchV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyBatchV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyBatchV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCopyBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 678
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchV2Launch EndCopyBatchV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchV2Launch
      description: The response to the send request
    content.vb: Public Function EndCopyBatchV2(asyncResult As System.IAsyncResult) As RelocationBatchV2Launch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  id: CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchAsync(RelocationBatchArg)
  nameWithType: FilesUserRoutes.CopyBatchAsync(RelocationBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 700
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will return job ID immediately and do the async copy job in\nbackground. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the\njob status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchLaunch> CopyBatchAsync(RelocationBatchArg relocationBatchArg)
    parameters:
    - id: relocationBatchArg
      type: Dropbox.Api.Files.RelocationBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchAsync(relocationBatchArg As RelocationBatchArg) As System.Threading.Tasks.Task(Of RelocationBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  id: BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatch(RelocationBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatch(RelocationBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(Dropbox.Api.Files.RelocationBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 715
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyBatch(RelocationBatchArg relocationBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: relocationBatchArg
      type: Dropbox.Api.Files.RelocationBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatch(relocationBatchArg As RelocationBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  id: CopyBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchAsync(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 741
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Copy multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will return job ID immediately and do the async copy job in\nbackground. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the\njob status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchLaunch> CopyBatchAsync(System.Collections.Generic.IEnumerable<RelocationPath> entries, bool autorename = false, bool allowSharedFolder = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchAsync(entries As System.Collections.Generic.IEnumerable(Of RelocationPath), autorename As Boolean = False, allowSharedFolder As Boolean = False, allowOwnershipTransfer As Boolean = False) As System.Threading.Tasks.Task(Of RelocationBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync*
  nameWithType.vb: FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.Boolean)
  name.vb: CopyBatchAsync(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCopyBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatch(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 771
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyBatch(System.Collections.Generic.IEnumerable<RelocationPath> entries, bool autorename = false, bool allowSharedFolder = false, bool allowOwnershipTransfer = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatch(entries As System.Collections.Generic.IEnumerable(Of RelocationPath), autorename As Boolean = False, allowSharedFolder As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch*
  nameWithType.vb: FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginCopyBatch(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch(System.IAsyncResult)
  id: EndCopyBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyBatch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyBatch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCopyBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 794
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchLaunch EndCopyBatch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchLaunch
      description: The response to the send request
    content.vb: Public Function EndCopyBatch(asyncResult As System.IAsyncResult) As RelocationBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  id: CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchCheckV2Async(PollArg)
  nameWithType: FilesUserRoutes.CopyBatchCheckV2Async(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyBatchCheckV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 817
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)\" data-throw-if-not-resolved=\"false\"></xref>. It returns\nlist of results for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchV2JobStatus> CopyBatchCheckV2Async(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchCheckV2Async(pollArg As PollArg) As System.Threading.Tasks.Task(Of RelocationBatchV2JobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchCheckV2(PollArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchCheckV2(PollArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 831
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyBatchCheckV2(PollArg pollArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchCheckV2(pollArg As PollArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(System.String)
  id: CopyBatchCheckV2Async(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchCheckV2Async(String)
  nameWithType: FilesUserRoutes.CopyBatchCheckV2Async(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyBatchCheckV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 850
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)\" data-throw-if-not-resolved=\"false\"></xref>. It returns\nlist of results for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchV2JobStatus> CopyBatchCheckV2Async(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchCheckV2Async(asyncJobId As String) As System.Threading.Tasks.Task(Of RelocationBatchV2JobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  id: BeginCopyBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchCheckV2(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchCheckV2(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 867
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyBatchCheckV2(string asyncJobId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchCheckV2(asyncJobId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2(System.IAsyncResult)
  id: EndCopyBatchCheckV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyBatchCheckV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyBatchCheckV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCopyBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 886
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchV2JobStatus EndCopyBatchCheckV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchV2JobStatus
      description: The response to the send request
    content.vb: Public Function EndCopyBatchCheckV2(asyncResult As System.IAsyncResult) As RelocationBatchV2JobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.CopyBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 908
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of results for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchJobStatus> CopyBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchCheckAsync(pollArg As PollArg) As System.Threading.Tasks.Task(Of RelocationBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginCopyBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchCheck(PollArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchCheck(PollArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 923
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyBatchCheck(PollArg pollArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchCheck(pollArg As PollArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(System.String)
  id: CopyBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.CopyBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 943
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of results for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchJobStatus> CopyBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyBatchCheckAsync(asyncJobId As String) As System.Threading.Tasks.Task(Of RelocationBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginCopyBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyBatchCheck(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyBatchCheck(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 961
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyBatchCheck(string asyncJobId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyBatchCheck(asyncJobId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck(System.IAsyncResult)
  id: EndCopyBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyBatchCheck(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyBatchCheck(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCopyBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 981
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchJobStatus EndCopyBatchCheck(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchJobStatus
      description: The response to the send request
    content.vb: Public Function EndCopyBatchCheck(asyncResult As System.IAsyncResult) As RelocationBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  id: CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyReferenceGetAsync(GetCopyReferenceArg)
  nameWithType: FilesUserRoutes.CopyReferenceGetAsync(GetCopyReferenceArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyReferenceGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1004
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a copy reference to a file or folder. This reference string can be used\nto save that file or folder to another user&apos;s Dropbox by passing it to <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetCopyReferenceResult> CopyReferenceGetAsync(GetCopyReferenceArg getCopyReferenceArg)
    parameters:
    - id: getCopyReferenceArg
      type: Dropbox.Api.Files.GetCopyReferenceArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetCopyReferenceResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyReferenceGetAsync(getCopyReferenceArg As GetCopyReferenceArg) As System.Threading.Tasks.Task(Of GetCopyReferenceResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg,System.AsyncCallback,System.Object)
  id: BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyReferenceGet(GetCopyReferenceArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyReferenceGet(GetCopyReferenceArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(Dropbox.Api.Files.GetCopyReferenceArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyReferenceGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1018
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy reference get route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyReferenceGet(GetCopyReferenceArg getCopyReferenceArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: getCopyReferenceArg
      type: Dropbox.Api.Files.GetCopyReferenceArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyReferenceGet(getCopyReferenceArg As GetCopyReferenceArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(System.String)
  id: CopyReferenceGetAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyReferenceGetAsync(String)
  nameWithType: FilesUserRoutes.CopyReferenceGetAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyReferenceGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1037
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a copy reference to a file or folder. This reference string can be used\nto save that file or folder to another user&apos;s Dropbox by passing it to <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetCopyReferenceResult> CopyReferenceGetAsync(string path)
    parameters:
    - id: path
      type: System.String
      description: >-
        The path to the file or folder you want to get a copy reference

        to.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetCopyReferenceResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyReferenceGetAsync(path As String) As System.Threading.Tasks.Task(Of GetCopyReferenceResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(System.String,System.AsyncCallback,System.Object)
  id: BeginCopyReferenceGet(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyReferenceGet(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyReferenceGet(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyReferenceGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1054
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy reference get route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyReferenceGet(string path, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        The path to the file or folder you want to get a copy reference

        to.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyReferenceGet(path As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet(System.IAsyncResult)
  id: EndCopyReferenceGet(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyReferenceGet(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyReferenceGet(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCopyReferenceGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1073
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy reference get route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public GetCopyReferenceResult EndCopyReferenceGet(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.GetCopyReferenceResult
      description: The response to the send request
    content.vb: Public Function EndCopyReferenceGet(asyncResult As System.IAsyncResult) As GetCopyReferenceResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  id: CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyReferenceSaveAsync(SaveCopyReferenceArg)
  nameWithType: FilesUserRoutes.CopyReferenceSaveAsync(SaveCopyReferenceArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyReferenceSaveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1095
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Save a copy reference returned by <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)\" data-throw-if-not-resolved=\"false\"></xref> to the\nuser&apos;s Dropbox.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SaveCopyReferenceResult> CopyReferenceSaveAsync(SaveCopyReferenceArg saveCopyReferenceArg)
    parameters:
    - id: saveCopyReferenceArg
      type: Dropbox.Api.Files.SaveCopyReferenceArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveCopyReferenceResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyReferenceSaveAsync(saveCopyReferenceArg As SaveCopyReferenceArg) As System.Threading.Tasks.Task(Of SaveCopyReferenceResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg,System.AsyncCallback,System.Object)
  id: BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyReferenceSave(SaveCopyReferenceArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyReferenceSave(SaveCopyReferenceArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(Dropbox.Api.Files.SaveCopyReferenceArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyReferenceSave
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1109
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy reference save route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyReferenceSave(SaveCopyReferenceArg saveCopyReferenceArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: saveCopyReferenceArg
      type: Dropbox.Api.Files.SaveCopyReferenceArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyReferenceSave(saveCopyReferenceArg As SaveCopyReferenceArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(System.String,System.String)
  id: CopyReferenceSaveAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CopyReferenceSaveAsync(String, String)
  nameWithType: FilesUserRoutes.CopyReferenceSaveAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CopyReferenceSaveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1129
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Save a copy reference returned by <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)\" data-throw-if-not-resolved=\"false\"></xref> to the\nuser&apos;s Dropbox.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SaveCopyReferenceResult> CopyReferenceSaveAsync(string copyReference, string path)
    parameters:
    - id: copyReference
      type: System.String
      description: A copy reference returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)" data-throw-if-not-resolved="false"></xref>.
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveCopyReferenceResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CopyReferenceSaveAsync(copyReference As String, path As String) As System.Threading.Tasks.Task(Of SaveCopyReferenceResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginCopyReferenceSave(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCopyReferenceSave(String, String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCopyReferenceSave(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCopyReferenceSave
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1149
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the copy reference save route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCopyReferenceSave(string copyReference, string path, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: copyReference
      type: System.String
      description: A copy reference returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)" data-throw-if-not-resolved="false"></xref>.
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCopyReferenceSave(copyReference As String, path As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave(System.IAsyncResult)
  id: EndCopyReferenceSave(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCopyReferenceSave(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCopyReferenceSave(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCopyReferenceSave
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1170
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the copy reference save route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public SaveCopyReferenceResult EndCopyReferenceSave(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SaveCopyReferenceResult
      description: The response to the send request
    content.vb: Public Function EndCopyReferenceSave(asyncResult As System.IAsyncResult) As SaveCopyReferenceResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveCopyReferenceError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  id: CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderV2Async(CreateFolderArg)
  nameWithType: FilesUserRoutes.CreateFolderV2Async(CreateFolderArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(Dropbox.Api.Files.CreateFolderArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CreateFolderV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1190
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a folder at a given path.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<CreateFolderResult> CreateFolderV2Async(CreateFolderArg createFolderArg)
    parameters:
    - id: createFolderArg
      type: Dropbox.Api.Files.CreateFolderArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderV2Async(createFolderArg As CreateFolderArg) As System.Threading.Tasks.Task(Of CreateFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  id: BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderV2(CreateFolderArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderV2(CreateFolderArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(Dropbox.Api.Files.CreateFolderArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCreateFolderV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1204
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCreateFolderV2(CreateFolderArg createFolderArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: createFolderArg
      type: Dropbox.Api.Files.CreateFolderArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderV2(createFolderArg As CreateFolderArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(System.String,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(System.String,System.Boolean)
  id: CreateFolderV2Async(System.String,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderV2Async(String, Boolean)
  nameWithType: FilesUserRoutes.CreateFolderV2Async(String, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CreateFolderV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1222
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a folder at a given path.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<CreateFolderResult> CreateFolderV2Async(string path, bool autorename = false)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to create.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderV2Async(path As String, autorename As Boolean = False) As System.Threading.Tasks.Task(Of CreateFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(System.String,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(System.String,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCreateFolderV2(System.String,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderV2(String, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderV2(String, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2(System.String, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCreateFolderV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1242
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCreateFolderV2(string path, bool autorename = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to create.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderV2(path As String, autorename As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2(System.IAsyncResult)
  id: EndCreateFolderV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCreateFolderV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCreateFolderV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCreateFolderV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1263
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the create folder route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public CreateFolderResult EndCreateFolderV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.CreateFolderResult
      description: The response to the send request
    content.vb: Public Function EndCreateFolderV2(asyncResult As System.IAsyncResult) As CreateFolderResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  id: CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderAsync(CreateFolderArg)
  nameWithType: FilesUserRoutes.CreateFolderAsync(CreateFolderArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(Dropbox.Api.Files.CreateFolderArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CreateFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1283
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a folder at a given path.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FolderMetadata> CreateFolderAsync(CreateFolderArg createFolderArg)
    parameters:
    - id: createFolderArg
      type: Dropbox.Api.Files.CreateFolderArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FolderMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderAsync(createFolderArg As CreateFolderArg) As System.Threading.Tasks.Task(Of FolderMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  id: BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolder(CreateFolderArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolder(CreateFolderArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(Dropbox.Api.Files.CreateFolderArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCreateFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1298
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCreateFolder(CreateFolderArg createFolderArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: createFolderArg
      type: Dropbox.Api.Files.CreateFolderArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolder(createFolderArg As CreateFolderArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(System.String,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(System.String,System.Boolean)
  id: CreateFolderAsync(System.String,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderAsync(String, Boolean)
  nameWithType: FilesUserRoutes.CreateFolderAsync(String, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CreateFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1317
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a folder at a given path.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FolderMetadata> CreateFolderAsync(string path, bool autorename = false)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to create.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FolderMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderAsync(path As String, autorename As Boolean = False) As System.Threading.Tasks.Task(Of FolderMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCreateFolder(System.String,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolder(String, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolder(String, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder(System.String, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCreateFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1338
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCreateFolder(string path, bool autorename = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to create.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolder(path As String, autorename As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder(System.IAsyncResult)
  id: EndCreateFolder(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCreateFolder(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCreateFolder(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCreateFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1360
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the create folder route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public FolderMetadata EndCreateFolder(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FolderMetadata
      description: The response to the send request
    content.vb: Public Function EndCreateFolder(asyncResult As System.IAsyncResult) As FolderMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.CreateFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  id: CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderBatchAsync(CreateFolderBatchArg)
  nameWithType: FilesUserRoutes.CreateFolderBatchAsync(CreateFolderBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CreateFolderBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1385
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create multiple folders at once.</p>\n<p>This route is asynchronous for large batches, which returns a job ID\nimmediately and runs the create folder batch asynchronously. Otherwise, creates the\nfolders and returns the result synchronously for smaller inputs. You can force\nasynchronous behaviour by using the <xref href=\"Dropbox.Api.Files.CreateFolderBatchArg.ForceAsync\" data-throw-if-not-resolved=\"false\"></xref> flag.  Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to\ncheck the job status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<CreateFolderBatchLaunch> CreateFolderBatchAsync(CreateFolderBatchArg createFolderBatchArg)
    parameters:
    - id: createFolderBatchArg
      type: Dropbox.Api.Files.CreateFolderBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderBatchAsync(createFolderBatchArg As CreateFolderBatchArg) As System.Threading.Tasks.Task(Of CreateFolderBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg,System.AsyncCallback,System.Object)
  id: BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderBatch(CreateFolderBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderBatch(CreateFolderBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(Dropbox.Api.Files.CreateFolderBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCreateFolderBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1399
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCreateFolderBatch(CreateFolderBatchArg createFolderBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: createFolderBatchArg
      type: Dropbox.Api.Files.CreateFolderBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderBatch(createFolderBatchArg As CreateFolderBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
  id: CreateFolderBatchAsync(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderBatchAsync(System.Collections.Generic.IEnumerable<String>, Boolean, Boolean)
  nameWithType: FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable<String>, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable<System.String>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CreateFolderBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1424
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create multiple folders at once.</p>\n<p>This route is asynchronous for large batches, which returns a job ID\nimmediately and runs the create folder batch asynchronously. Otherwise, creates the\nfolders and returns the result synchronously for smaller inputs. You can force\nasynchronous behaviour by using the <xref href=\"Dropbox.Api.Files.CreateFolderBatchArg.ForceAsync\" data-throw-if-not-resolved=\"false\"></xref> flag.  Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to\ncheck the job status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<CreateFolderBatchLaunch> CreateFolderBatchAsync(System.Collections.Generic.IEnumerable<string> paths, bool autorename = false, bool forceAsync = false)
    parameters:
    - id: paths
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        List of paths to be created in the user&apos;s Dropbox. Duplicate

        path arguments in the batch are considered only once.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    - id: forceAsync
      type: System.Boolean
      description: >-
        Whether to force the create to happen

        asynchronously.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderBatchAsync(paths As System.Collections.Generic.IEnumerable(Of String), autorename As Boolean = False, forceAsync As Boolean = False) As System.Threading.Tasks.Task(Of CreateFolderBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync*
  nameWithType.vb: FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable(Of String), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(System.Collections.Generic.IEnumerable(Of System.String), System.Boolean, System.Boolean)
  name.vb: CreateFolderBatchAsync(System.Collections.Generic.IEnumerable(Of String), Boolean, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginCreateFolderBatch(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderBatch(System.Collections.Generic.IEnumerable<String>, Boolean, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable<String>, Boolean, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable<System.String>, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCreateFolderBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1449
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCreateFolderBatch(System.Collections.Generic.IEnumerable<string> paths, bool autorename = false, bool forceAsync = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: paths
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        List of paths to be created in the user&apos;s Dropbox. Duplicate

        path arguments in the batch are considered only once.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the folder to avoid the conflict.
    - id: forceAsync
      type: System.Boolean
      description: >-
        Whether to force the create to happen

        asynchronously.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderBatch(paths As System.Collections.Generic.IEnumerable(Of String), autorename As Boolean = False, forceAsync As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch*
  nameWithType.vb: FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable(Of String), Boolean, Boolean, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch(System.Collections.Generic.IEnumerable(Of System.String), System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginCreateFolderBatch(System.Collections.Generic.IEnumerable(Of String), Boolean, Boolean, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch(System.IAsyncResult)
  id: EndCreateFolderBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCreateFolderBatch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCreateFolderBatch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCreateFolderBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1469
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the create folder batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public CreateFolderBatchLaunch EndCreateFolderBatch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.CreateFolderBatchLaunch
      description: The response to the send request
    content.vb: Public Function EndCreateFolderBatch(asyncResult As System.IAsyncResult) As CreateFolderBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.CreateFolderBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CreateFolderBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1491
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If\nsuccess, it returns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<CreateFolderBatchJobStatus> CreateFolderBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderBatchCheckAsync(pollArg As PollArg) As System.Threading.Tasks.Task(Of CreateFolderBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderBatchCheck(PollArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderBatchCheck(PollArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCreateFolderBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1505
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCreateFolderBatchCheck(PollArg pollArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderBatchCheck(pollArg As PollArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(System.String)
  id: CreateFolderBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: CreateFolderBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.CreateFolderBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: CreateFolderBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1524
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If\nsuccess, it returns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<CreateFolderBatchJobStatus> CreateFolderBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function CreateFolderBatchCheckAsync(asyncJobId As String) As System.Threading.Tasks.Task(Of CreateFolderBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginCreateFolderBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginCreateFolderBatchCheck(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginCreateFolderBatchCheck(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginCreateFolderBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1541
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the create folder batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginCreateFolderBatchCheck(string asyncJobId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginCreateFolderBatchCheck(asyncJobId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck(System.IAsyncResult)
  id: EndCreateFolderBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndCreateFolderBatchCheck(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndCreateFolderBatchCheck(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndCreateFolderBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1560
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the create folder batch check\nroute to complete</p>\n"
  example: []
  syntax:
    content: public CreateFolderBatchJobStatus EndCreateFolderBatchCheck(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.CreateFolderBatchJobStatus
      description: The response to the send request
    content.vb: Public Function EndCreateFolderBatchCheck(asyncResult As System.IAsyncResult) As CreateFolderBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  id: DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteV2Async(DeleteArg)
  nameWithType: FilesUserRoutes.DeleteV2Async(DeleteArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(Dropbox.Api.Files.DeleteArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DeleteV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1584
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete the file or folder at a given path.</p>\n<p>If the path is a folder, all its contents will be deleted too.</p>\n<p>A successful response indicates that the file or folder was deleted. The\nreturned metadata will be the corresponding <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the item at time of deletion, and not a <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<DeleteResult> DeleteV2Async(DeleteArg deleteArg)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteV2Async(deleteArg As DeleteArg) As System.Threading.Tasks.Task(Of DeleteResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  id: BeginDeleteV2(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteV2(DeleteArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteV2(DeleteArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(Dropbox.Api.Files.DeleteArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDeleteV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1598
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDeleteV2(DeleteArg deleteArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteV2(deleteArg As DeleteArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(System.String,System.String)
  id: DeleteV2Async(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteV2Async(String, String)
  nameWithType: FilesUserRoutes.DeleteV2Async(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DeleteV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1620
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete the file or folder at a given path.</p>\n<p>If the path is a folder, all its contents will be deleted too.</p>\n<p>A successful response indicates that the file or folder was deleted. The\nreturned metadata will be the corresponding <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the item at time of deletion, and not a <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<DeleteResult> DeleteV2Async(string path, string parentRev = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteV2Async(path As String, parentRev As String = Nothing) As System.Threading.Tasks.Task(Of DeleteResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginDeleteV2(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteV2(String, String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteV2(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDeleteV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1640
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDeleteV2(string path, string parentRev = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteV2(path As String, parentRev As String = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2(System.IAsyncResult)
  id: EndDeleteV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDeleteV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndDeleteV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDeleteV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1660
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the delete route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public DeleteResult EndDeleteV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.DeleteResult
      description: The response to the send request
    content.vb: Public Function EndDeleteV2(asyncResult As System.IAsyncResult) As DeleteResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(Dropbox.Api.Files.DeleteArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(Dropbox.Api.Files.DeleteArg)
  id: DeleteAsync(Dropbox.Api.Files.DeleteArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteAsync(DeleteArg)
  nameWithType: FilesUserRoutes.DeleteAsync(DeleteArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(Dropbox.Api.Files.DeleteArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1684
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete the file or folder at a given path.</p>\n<p>If the path is a folder, all its contents will be deleted too.</p>\n<p>A successful response indicates that the file or folder was deleted. The\nreturned metadata will be the corresponding <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the item at time of deletion, and not a <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> DeleteAsync(DeleteArg deleteArg)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteAsync(deleteArg As DeleteArg) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  id: BeginDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDelete(DeleteArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDelete(DeleteArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(Dropbox.Api.Files.DeleteArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1699
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDelete(DeleteArg deleteArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDelete(deleteArg As DeleteArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(System.String,System.String)
  id: DeleteAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteAsync(String, String)
  nameWithType: FilesUserRoutes.DeleteAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1722
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete the file or folder at a given path.</p>\n<p>If the path is a folder, all its contents will be deleted too.</p>\n<p>A successful response indicates that the file or folder was deleted. The\nreturned metadata will be the corresponding <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref> for the item at time of deletion, and not a <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> DeleteAsync(string path, string parentRev = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteAsync(path As String, parentRev As String = Nothing) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginDelete(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDelete(String, String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDelete(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1743
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDelete(string path, string parentRev = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDelete(path As String, parentRev As String = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete(System.IAsyncResult)
  id: EndDelete(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDelete(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndDelete(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1764
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the delete route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public Metadata EndDelete(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: Public Function EndDelete(asyncResult As System.IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  id: DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteBatchAsync(DeleteBatchArg)
  nameWithType: FilesUserRoutes.DeleteBatchAsync(DeleteBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DeleteBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1786
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete multiple files/folders at once.</p>\n<p>This route is asynchronous, which returns a job ID immediately and runs the\ndelete batch asynchronously. Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<DeleteBatchLaunch> DeleteBatchAsync(DeleteBatchArg deleteBatchArg)
    parameters:
    - id: deleteBatchArg
      type: Dropbox.Api.Files.DeleteBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteBatchAsync(deleteBatchArg As DeleteBatchArg) As System.Threading.Tasks.Task(Of DeleteBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg,System.AsyncCallback,System.Object)
  id: BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteBatch(DeleteBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteBatch(DeleteBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(Dropbox.Api.Files.DeleteBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDeleteBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1800
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDeleteBatch(DeleteBatchArg deleteBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: deleteBatchArg
      type: Dropbox.Api.Files.DeleteBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteBatch(deleteBatchArg As DeleteBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg})
  id: DeleteBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteBatchAsync(System.Collections.Generic.IEnumerable<DeleteArg>)
  nameWithType: FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable<DeleteArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.DeleteArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DeleteBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1817
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Delete multiple files/folders at once.</p>\n<p>This route is asynchronous, which returns a job ID immediately and runs the\ndelete batch asynchronously. Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<DeleteBatchLaunch> DeleteBatchAsync(System.Collections.Generic.IEnumerable<DeleteArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg}
      description: The entries
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteBatchAsync(entries As System.Collections.Generic.IEnumerable(Of DeleteArg)) As System.Threading.Tasks.Task(Of DeleteBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync*
  nameWithType.vb: FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable(Of DeleteArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.DeleteArg))
  name.vb: DeleteBatchAsync(System.Collections.Generic.IEnumerable(Of DeleteArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg},System.AsyncCallback,System.Object)
  id: BeginDeleteBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteBatch(System.Collections.Generic.IEnumerable<DeleteArg>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable<DeleteArg>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.DeleteArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDeleteBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1833
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDeleteBatch(System.Collections.Generic.IEnumerable<DeleteArg> entries, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg}
      description: The entries
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteBatch(entries As System.Collections.Generic.IEnumerable(Of DeleteArg), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch*
  nameWithType.vb: FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable(Of DeleteArg), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.DeleteArg), System.AsyncCallback, System.Object)
  name.vb: BeginDeleteBatch(System.Collections.Generic.IEnumerable(Of DeleteArg), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch(System.IAsyncResult)
  id: EndDeleteBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDeleteBatch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndDeleteBatch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDeleteBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1849
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the delete batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public DeleteBatchLaunch EndDeleteBatch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.DeleteBatchLaunch
      description: The response to the send request
    content.vb: Public Function EndDeleteBatch(asyncResult As System.IAsyncResult) As DeleteBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.DeleteBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DeleteBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1871
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<DeleteBatchJobStatus> DeleteBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteBatchCheckAsync(pollArg As PollArg) As System.Threading.Tasks.Task(Of DeleteBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteBatchCheck(PollArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteBatchCheck(PollArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDeleteBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1885
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDeleteBatchCheck(PollArg pollArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteBatchCheck(pollArg As PollArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(System.String)
  id: DeleteBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DeleteBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.DeleteBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DeleteBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1904
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<DeleteBatchJobStatus> DeleteBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DeleteBatchCheckAsync(asyncJobId As String) As System.Threading.Tasks.Task(Of DeleteBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginDeleteBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDeleteBatchCheck(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDeleteBatchCheck(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDeleteBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1921
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the delete batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDeleteBatchCheck(string asyncJobId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDeleteBatchCheck(asyncJobId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck(System.IAsyncResult)
  id: EndDeleteBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDeleteBatchCheck(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndDeleteBatchCheck(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDeleteBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1940
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the delete batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public DeleteBatchJobStatus EndDeleteBatchCheck(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.DeleteBatchJobStatus
      description: The response to the send request
    content.vb: Public Function EndDeleteBatchCheck(asyncResult As System.IAsyncResult) As DeleteBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(Dropbox.Api.Files.DownloadArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(Dropbox.Api.Files.DownloadArg)
  id: DownloadAsync(Dropbox.Api.Files.DownloadArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DownloadAsync(DownloadArg)
  nameWithType: FilesUserRoutes.DownloadAsync(DownloadArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(Dropbox.Api.Files.DownloadArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DownloadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1960
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Download a file from a user&apos;s Dropbox.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<FileMetadata>> DownloadAsync(DownloadArg downloadArg)
    parameters:
    - id: downloadArg
      type: Dropbox.Api.Files.DownloadArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DownloadAsync(downloadArg As DownloadArg) As System.Threading.Tasks.Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(Dropbox.Api.Files.DownloadArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(Dropbox.Api.Files.DownloadArg,System.AsyncCallback,System.Object)
  id: BeginDownload(Dropbox.Api.Files.DownloadArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDownload(DownloadArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDownload(DownloadArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(Dropbox.Api.Files.DownloadArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDownload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1974
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the download route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDownload(DownloadArg downloadArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: downloadArg
      type: Dropbox.Api.Files.DownloadArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDownload(downloadArg As DownloadArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(System.String,System.String)
  id: DownloadAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DownloadAsync(String, String)
  nameWithType: FilesUserRoutes.DownloadAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DownloadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 1992
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Download a file from a user&apos;s Dropbox.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<FileMetadata>> DownloadAsync(string path, string rev = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to download.
    - id: rev
      type: System.String
      description: >-
        Please specify revision in <code data-dev-comment-type="paramref" class="paramref">path</code>

        instead.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DownloadAsync(path As String, rev As String = Nothing) As System.Threading.Tasks.Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginDownload(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDownload(String, String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDownload(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDownload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2012
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the download route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDownload(string path, string rev = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to download.
    - id: rev
      type: System.String
      description: >-
        Please specify revision in <code data-dev-comment-type="paramref" class="paramref">path</code>

        instead.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDownload(path As String, rev As String = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload(System.IAsyncResult)
  id: EndDownload(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDownload(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndDownload(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDownload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2033
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the download route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<FileMetadata> EndDownload(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
      description: The response to the send request
    content.vb: Public Function EndDownload(asyncResult As System.IAsyncResult) As IDownloadResponse(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  id: DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DownloadZipAsync(DownloadZipArg)
  nameWithType: FilesUserRoutes.DownloadZipAsync(DownloadZipArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(Dropbox.Api.Files.DownloadZipArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DownloadZipAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2056
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Download a folder from the user&apos;s Dropbox, as a zip file. The folder must be\nless than 20 GB in size and any single file within must be less than 4 GB in size.\nThe resulting zip must have fewer than 10,000 total file and folder entries,\nincluding the top level folder. The input cannot be a single file.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<DownloadZipResult>> DownloadZipAsync(DownloadZipArg downloadZipArg)
    parameters:
    - id: downloadZipArg
      type: Dropbox.Api.Files.DownloadZipArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DownloadZipAsync(downloadZipArg As DownloadZipArg) As System.Threading.Tasks.Task(Of IDownloadResponse(Of DownloadZipResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadZipError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg,System.AsyncCallback,System.Object)
  id: BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDownloadZip(DownloadZipArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDownloadZip(DownloadZipArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(Dropbox.Api.Files.DownloadZipArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDownloadZip
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2070
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the download zip route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDownloadZip(DownloadZipArg downloadZipArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: downloadZipArg
      type: Dropbox.Api.Files.DownloadZipArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDownloadZip(downloadZipArg As DownloadZipArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(System.String)
  id: DownloadZipAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: DownloadZipAsync(String)
  nameWithType: FilesUserRoutes.DownloadZipAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: DownloadZipAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2089
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Download a folder from the user&apos;s Dropbox, as a zip file. The folder must be\nless than 20 GB in size and any single file within must be less than 4 GB in size.\nThe resulting zip must have fewer than 10,000 total file and folder entries,\nincluding the top level folder. The input cannot be a single file.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<DownloadZipResult>> DownloadZipAsync(string path)
    parameters:
    - id: path
      type: System.String
      description: The path of the folder to download.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function DownloadZipAsync(path As String) As System.Threading.Tasks.Task(Of IDownloadResponse(Of DownloadZipResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadZipError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(System.String,System.AsyncCallback,System.Object)
  id: BeginDownloadZip(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginDownloadZip(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginDownloadZip(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginDownloadZip
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2105
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the download zip route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginDownloadZip(string path, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the folder to download.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginDownloadZip(path As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip(System.IAsyncResult)
  id: EndDownloadZip(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndDownloadZip(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndDownloadZip(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndDownloadZip
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2124
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the download zip route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<DownloadZipResult> EndDownloadZip(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}
      description: The response to the send request
    content.vb: Public Function EndDownloadZip(asyncResult As System.IAsyncResult) As IDownloadResponse(Of DownloadZipResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DownloadZipError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(Dropbox.Api.Files.ExportArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(Dropbox.Api.Files.ExportArg)
  id: ExportAsync(Dropbox.Api.Files.ExportArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ExportAsync(ExportArg)
  nameWithType: FilesUserRoutes.ExportAsync(ExportArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(Dropbox.Api.Files.ExportArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ExportAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2146
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Export a file from a user&apos;s Dropbox. This route only supports exporting files\nthat cannot be downloaded directly  and whose <xref href=\"Dropbox.Api.Files.ExportResult.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> has <xref href=\"Dropbox.Api.Files.ExportInfo.ExportAs\" data-throw-if-not-resolved=\"false\"></xref> populated.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<ExportResult>> ExportAsync(ExportArg exportArg)
    parameters:
    - id: exportArg
      type: Dropbox.Api.Files.ExportArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ExportAsync(exportArg As ExportArg) As System.Threading.Tasks.Task(Of IDownloadResponse(Of ExportResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ExportError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(Dropbox.Api.Files.ExportArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(Dropbox.Api.Files.ExportArg,System.AsyncCallback,System.Object)
  id: BeginExport(Dropbox.Api.Files.ExportArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginExport(ExportArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginExport(ExportArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(Dropbox.Api.Files.ExportArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginExport
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2160
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the export route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginExport(ExportArg exportArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: exportArg
      type: Dropbox.Api.Files.ExportArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginExport(exportArg As ExportArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(System.String,System.String)
  id: ExportAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ExportAsync(String, String)
  nameWithType: FilesUserRoutes.ExportAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ExportAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2183
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Export a file from a user&apos;s Dropbox. This route only supports exporting files\nthat cannot be downloaded directly  and whose <xref href=\"Dropbox.Api.Files.ExportResult.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref> has <xref href=\"Dropbox.Api.Files.ExportInfo.ExportAs\" data-throw-if-not-resolved=\"false\"></xref> populated.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<ExportResult>> ExportAsync(string path, string exportFormat = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to be exported.
    - id: exportFormat
      type: System.String
      description: >-
        The file format to which the file should be exported.

        This must be one of the formats listed in the file&apos;s export_options returned by

        <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)" data-throw-if-not-resolved="false"></xref>. If none

        is specified, the default format (specified in export_as in file metadata) will be

        used.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ExportAsync(path As String, exportFormat As String = Nothing) As System.Threading.Tasks.Task(Of IDownloadResponse(Of ExportResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ExportError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginExport(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginExport(String, String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginExport(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginExport
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2206
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the export route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginExport(string path, string exportFormat = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to be exported.
    - id: exportFormat
      type: System.String
      description: >-
        The file format to which the file should be exported.

        This must be one of the formats listed in the file&apos;s export_options returned by

        <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)" data-throw-if-not-resolved="false"></xref>. If none

        is specified, the default format (specified in export_as in file metadata) will be

        used.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginExport(path As String, exportFormat As String = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport(System.IAsyncResult)
  id: EndExport(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndExport(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndExport(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndExport
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2226
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the export route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<ExportResult> EndExport(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}
      description: The response to the send request
    content.vb: Public Function EndExport(asyncResult As System.IAsyncResult) As IDownloadResponse(Of ExportResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ExportError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  id: GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetFileLockBatchAsync(LockFileBatchArg)
  nameWithType: FilesUserRoutes.GetFileLockBatchAsync(LockFileBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetFileLockBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2246
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Return the lock metadata for the given list of paths.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<LockFileBatchResult> GetFileLockBatchAsync(LockFileBatchArg lockFileBatchArg)
    parameters:
    - id: lockFileBatchArg
      type: Dropbox.Api.Files.LockFileBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetFileLockBatchAsync(lockFileBatchArg As LockFileBatchArg) As System.Threading.Tasks.Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  id: BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetFileLockBatch(LockFileBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetFileLockBatch(LockFileBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(Dropbox.Api.Files.LockFileBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetFileLockBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2260
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get file lock batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetFileLockBatch(LockFileBatchArg lockFileBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: lockFileBatchArg
      type: Dropbox.Api.Files.LockFileBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetFileLockBatch(lockFileBatchArg As LockFileBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  id: GetFileLockBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetFileLockBatchAsync(System.Collections.Generic.IEnumerable<LockFileArg>)
  nameWithType: FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable<LockFileArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetFileLockBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2278
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Return the lock metadata for the given list of paths.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<LockFileBatchResult> GetFileLockBatchAsync(System.Collections.Generic.IEnumerable<LockFileArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be locked or queried. Duplicate path arguments in the batch are

        considered only once.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetFileLockBatchAsync(entries As System.Collections.Generic.IEnumerable(Of LockFileArg)) As System.Threading.Tasks.Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable(Of LockFileArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg))
  name.vb: GetFileLockBatchAsync(System.Collections.Generic.IEnumerable(Of LockFileArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  id: BeginGetFileLockBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetFileLockBatch(System.Collections.Generic.IEnumerable<LockFileArg>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable<LockFileArg>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetFileLockBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2296
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get file lock batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetFileLockBatch(System.Collections.Generic.IEnumerable<LockFileArg> entries, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be locked or queried. Duplicate path arguments in the batch are

        considered only once.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetFileLockBatch(entries As System.Collections.Generic.IEnumerable(Of LockFileArg), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch*
  nameWithType.vb: FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable(Of LockFileArg), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg), System.AsyncCallback, System.Object)
  name.vb: BeginGetFileLockBatch(System.Collections.Generic.IEnumerable(Of LockFileArg), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch(System.IAsyncResult)
  id: EndGetFileLockBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetFileLockBatch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetFileLockBatch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndGetFileLockBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2315
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get file lock batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public LockFileBatchResult EndGetFileLockBatch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.LockFileBatchResult
      description: The response to the send request
    content.vb: Public Function EndGetFileLockBatch(asyncResult As System.IAsyncResult) As LockFileBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  id: GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetMetadataAsync(GetMetadataArg)
  nameWithType: FilesUserRoutes.GetMetadataAsync(GetMetadataArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetMetadataAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2336
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the metadata for a file or folder.</p>\n<p>Note: Metadata for the root folder is unsupported.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> GetMetadataAsync(GetMetadataArg getMetadataArg)
    parameters:
    - id: getMetadataArg
      type: Dropbox.Api.Files.GetMetadataArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetMetadataAsync(getMetadataArg As GetMetadataArg) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetMetadataError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg,System.AsyncCallback,System.Object)
  id: BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetMetadata(GetMetadataArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetMetadata(GetMetadataArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(Dropbox.Api.Files.GetMetadataArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2350
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get metadata route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetMetadata(GetMetadataArg getMetadataArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: getMetadataArg
      type: Dropbox.Api.Files.GetMetadataArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetMetadata(getMetadataArg As GetMetadataArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase)
  id: GetMetadataAsync(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase)
  nameWithType: FilesUserRoutes.GetMetadataAsync(String, Boolean, Boolean, Boolean, TemplateFilterBase)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetMetadataAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2379
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the metadata for a file or folder.</p>\n<p>Note: Metadata for the root folder is unsupported.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> GetMetadataAsync(string path, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, TemplateFilterBase includePropertyGroups = null)
    parameters:
    - id: path
      type: System.String
      description: The path of a file or folder on Dropbox.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and

        video.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.DeletedMetadata" data-throw-if-not-resolved="false"></xref> will be

        returned for deleted file or folder, otherwise <xref href="Dropbox.Api.Files.LookupError.NotFound" data-throw-if-not-resolved="false"></xref> will be returned.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetMetadataAsync(path As String, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includePropertyGroups As TemplateFilterBase = Nothing) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetMetadataError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.AsyncCallback,System.Object)
  id: BeginGetMetadata(System.String,System.Boolean,System.Boolean,System.Boolean,Dropbox.Api.FileProperties.TemplateFilterBase,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetMetadata(String, Boolean, Boolean, Boolean, TemplateFilterBase, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata(System.String, System.Boolean, System.Boolean, System.Boolean, Dropbox.Api.FileProperties.TemplateFilterBase, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2415
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get metadata route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetMetadata(string path, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, TemplateFilterBase includePropertyGroups = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of a file or folder on Dropbox.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and

        video.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.DeletedMetadata" data-throw-if-not-resolved="false"></xref> will be

        returned for deleted file or folder, otherwise <xref href="Dropbox.Api.Files.LookupError.NotFound" data-throw-if-not-resolved="false"></xref> will be returned.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetMetadata(path As String, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includePropertyGroups As TemplateFilterBase = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata(System.IAsyncResult)
  id: EndGetMetadata(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetMetadata(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetMetadata(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndGetMetadata
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2442
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get metadata route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public Metadata EndGetMetadata(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: Public Function EndGetMetadata(asyncResult As System.IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetMetadataError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  id: GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetPreviewAsync(PreviewArg)
  nameWithType: FilesUserRoutes.GetPreviewAsync(PreviewArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(Dropbox.Api.Files.PreviewArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetPreviewAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2467
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a preview for a file.</p>\n<p>Currently, PDF previews are generated for files with the following\nextensions: .ai, .doc, .docm, .docx, .eps, .gdoc, .gslides, .odp, .odt, .pps,\n.ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf.</p>\n<p>HTML previews are generated for files with the following extensions: .csv,\n.ods, .xls, .xlsm, .gsheet, .xlsx.</p>\n<p>Other formats will return an unsupported extension error.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<FileMetadata>> GetPreviewAsync(PreviewArg previewArg)
    parameters:
    - id: previewArg
      type: Dropbox.Api.Files.PreviewArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetPreviewAsync(previewArg As PreviewArg) As System.Threading.Tasks.Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PreviewError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(Dropbox.Api.Files.PreviewArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(Dropbox.Api.Files.PreviewArg,System.AsyncCallback,System.Object)
  id: BeginGetPreview(Dropbox.Api.Files.PreviewArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetPreview(PreviewArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetPreview(PreviewArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(Dropbox.Api.Files.PreviewArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetPreview
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2481
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get preview route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetPreview(PreviewArg previewArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: previewArg
      type: Dropbox.Api.Files.PreviewArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetPreview(previewArg As PreviewArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(System.String,System.String)
  id: GetPreviewAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetPreviewAsync(String, String)
  nameWithType: FilesUserRoutes.GetPreviewAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetPreviewAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2504
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a preview for a file.</p>\n<p>Currently, PDF previews are generated for files with the following\nextensions: .ai, .doc, .docm, .docx, .eps, .gdoc, .gslides, .odp, .odt, .pps,\n.ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf.</p>\n<p>HTML previews are generated for files with the following extensions: .csv,\n.ods, .xls, .xlsm, .gsheet, .xlsx.</p>\n<p>Other formats will return an unsupported extension error.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<FileMetadata>> GetPreviewAsync(string path, string rev = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to preview.
    - id: rev
      type: System.String
      description: >-
        Please specify revision in <code data-dev-comment-type="paramref" class="paramref">path</code>

        instead.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetPreviewAsync(path As String, rev As String = Nothing) As System.Threading.Tasks.Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PreviewError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginGetPreview(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetPreview(String, String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetPreview(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetPreview
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2524
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get preview route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetPreview(string path, string rev = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path of the file to preview.
    - id: rev
      type: System.String
      description: >-
        Please specify revision in <code data-dev-comment-type="paramref" class="paramref">path</code>

        instead.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetPreview(path As String, rev As String = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview(System.IAsyncResult)
  id: EndGetPreview(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetPreview(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetPreview(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndGetPreview
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2544
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get preview route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<FileMetadata> EndGetPreview(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
      description: The response to the send request
    content.vb: Public Function EndGetPreview(asyncResult As System.IAsyncResult) As IDownloadResponse(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PreviewError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  id: GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetTemporaryLinkAsync(GetTemporaryLinkArg)
  nameWithType: FilesUserRoutes.GetTemporaryLinkAsync(GetTemporaryLinkArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(Dropbox.Api.Files.GetTemporaryLinkArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetTemporaryLinkAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2567
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a temporary link to stream content of a file. This link will expire in\nfour hours and afterwards you will get 410 Gone. This URL should not be used to\ndisplay content directly in the browser. The Content-Type of the link is determined\nautomatically by the file&apos;s mime type.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetTemporaryLinkResult> GetTemporaryLinkAsync(GetTemporaryLinkArg getTemporaryLinkArg)
    parameters:
    - id: getTemporaryLinkArg
      type: Dropbox.Api.Files.GetTemporaryLinkArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryLinkResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetTemporaryLinkAsync(getTemporaryLinkArg As GetTemporaryLinkArg) As System.Threading.Tasks.Task(Of GetTemporaryLinkResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetTemporaryLinkError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg,System.AsyncCallback,System.Object)
  id: BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetTemporaryLink(GetTemporaryLinkArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetTemporaryLink(GetTemporaryLinkArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(Dropbox.Api.Files.GetTemporaryLinkArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetTemporaryLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2581
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get temporary link route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetTemporaryLink(GetTemporaryLinkArg getTemporaryLinkArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: getTemporaryLinkArg
      type: Dropbox.Api.Files.GetTemporaryLinkArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetTemporaryLink(getTemporaryLinkArg As GetTemporaryLinkArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(System.String)
  id: GetTemporaryLinkAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetTemporaryLinkAsync(String)
  nameWithType: FilesUserRoutes.GetTemporaryLinkAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetTemporaryLinkAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2600
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a temporary link to stream content of a file. This link will expire in\nfour hours and afterwards you will get 410 Gone. This URL should not be used to\ndisplay content directly in the browser. The Content-Type of the link is determined\nautomatically by the file&apos;s mime type.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetTemporaryLinkResult> GetTemporaryLinkAsync(string path)
    parameters:
    - id: path
      type: System.String
      description: The path to the file you want a temporary link to.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryLinkResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetTemporaryLinkAsync(path As String) As System.Threading.Tasks.Task(Of GetTemporaryLinkResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetTemporaryLinkError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(System.String,System.AsyncCallback,System.Object)
  id: BeginGetTemporaryLink(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetTemporaryLink(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetTemporaryLink(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetTemporaryLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2616
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get temporary link route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetTemporaryLink(string path, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the file you want a temporary link to.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetTemporaryLink(path As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink(System.IAsyncResult)
  id: EndGetTemporaryLink(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetTemporaryLink(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetTemporaryLink(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndGetTemporaryLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2635
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get temporary link route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public GetTemporaryLinkResult EndGetTemporaryLink(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.GetTemporaryLinkResult
      description: The response to the send request
    content.vb: Public Function EndGetTemporaryLink(asyncResult As System.IAsyncResult) As GetTemporaryLinkResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetTemporaryLinkError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  id: GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetTemporaryUploadLinkAsync(GetTemporaryUploadLinkArg)
  nameWithType: FilesUserRoutes.GetTemporaryUploadLinkAsync(GetTemporaryUploadLinkArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetTemporaryUploadLinkAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2694
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a one-time use temporary upload link to upload a file to a Dropbox\nlocation.</p>\n<p></p>\n<p>This endpoint acts as a delayed <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>. The returned\ntemporary upload link may be used to make a POST request with the data to be\nuploaded. The upload will then be perfomed with the <xref href=\"Dropbox.Api.Files.CommitInfo\" data-throw-if-not-resolved=\"false\"></xref>\npreviously provided to <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)\" data-throw-if-not-resolved=\"false\"></xref> but\nevaluated only upon consumption. Hence, errors stemming from invalid <xref href=\"Dropbox.Api.Files.CommitInfo\" data-throw-if-not-resolved=\"false\"></xref> with respect to the state of the user&apos;s Dropbox will only be\ncommunicated at consumption time. Additionally, these errors are surfaced as\ngeneric HTTP 409 Conflict responses, potentially hiding issue details. The maximum\ntemporary upload link duration is 4 hours. Upon consumption or expiration, a new\nlink will have to be generated. Multiple links may exist for a specific upload path\nat any given time.</p>\n<p></p>\n<p>The POST request on the temporary upload link must have its Content-Type set\nto &quot;application/octet-stream&quot;.</p>\n<p></p>\n<p>Example temporary upload link consumption request:</p>\n<p></p>\n<p>curl -X POST https://content.dropboxapi.com/apitul/1/bNi2uIYF51cVBND</p>\n<p>--header &quot;Content-Type: application/octet-stream&quot;</p>\n<p>--data-binary @local_file.txt</p>\n<p></p>\n<p>A successful temporary upload link consumption request returns the content\nhash of the uploaded data in JSON format.</p>\n<p></p>\n<p>Example successful temporary upload link consumption response:</p>\n<p>{&quot;content-hash&quot;: &quot;599d71033d700ac892a0e48fa61b125d2f5994&quot;}</p>\n<p></p>\n<p>An unsuccessful temporary upload link consumption request returns any of the\nfollowing status codes:</p>\n<p></p>\n<p>HTTP 400 Bad Request: Content-Type is not one of application/octet-stream and\ntext/plain or request is invalid.</p>\n<p>HTTP 409 Conflict: The temporary upload link does not exist or is currently\nunavailable, the upload failed, or another error happened.</p>\n<p>HTTP 410 Gone: The temporary upload link is expired or consumed.</p>\n<p></p>\n<p>Example unsuccessful temporary upload link consumption response:</p>\n<p>Temporary upload link has been recently consumed.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetTemporaryUploadLinkResult> GetTemporaryUploadLinkAsync(GetTemporaryUploadLinkArg getTemporaryUploadLinkArg)
    parameters:
    - id: getTemporaryUploadLinkArg
      type: Dropbox.Api.Files.GetTemporaryUploadLinkArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryUploadLinkResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetTemporaryUploadLinkAsync(getTemporaryUploadLinkArg As GetTemporaryUploadLinkArg) As System.Threading.Tasks.Task(Of GetTemporaryUploadLinkResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg,System.AsyncCallback,System.Object)
  id: BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetTemporaryUploadLink(GetTemporaryUploadLinkArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetTemporaryUploadLink(GetTemporaryUploadLinkArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.GetTemporaryUploadLinkArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetTemporaryUploadLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2708
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get temporary upload link route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetTemporaryUploadLink(GetTemporaryUploadLinkArg getTemporaryUploadLinkArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: getTemporaryUploadLinkArg
      type: Dropbox.Api.Files.GetTemporaryUploadLinkArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetTemporaryUploadLink(getTemporaryUploadLinkArg As GetTemporaryUploadLinkArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo,System.Double)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo,System.Double)
  id: GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo,System.Double)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetTemporaryUploadLinkAsync(CommitInfo, Double)
  nameWithType: FilesUserRoutes.GetTemporaryUploadLinkAsync(CommitInfo, Double)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.CommitInfo, System.Double)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetTemporaryUploadLinkAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2768
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a one-time use temporary upload link to upload a file to a Dropbox\nlocation.</p>\n<p></p>\n<p>This endpoint acts as a delayed <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>. The returned\ntemporary upload link may be used to make a POST request with the data to be\nuploaded. The upload will then be perfomed with the <xref href=\"Dropbox.Api.Files.CommitInfo\" data-throw-if-not-resolved=\"false\"></xref>\npreviously provided to <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)\" data-throw-if-not-resolved=\"false\"></xref> but\nevaluated only upon consumption. Hence, errors stemming from invalid <xref href=\"Dropbox.Api.Files.CommitInfo\" data-throw-if-not-resolved=\"false\"></xref> with respect to the state of the user&apos;s Dropbox will only be\ncommunicated at consumption time. Additionally, these errors are surfaced as\ngeneric HTTP 409 Conflict responses, potentially hiding issue details. The maximum\ntemporary upload link duration is 4 hours. Upon consumption or expiration, a new\nlink will have to be generated. Multiple links may exist for a specific upload path\nat any given time.</p>\n<p></p>\n<p>The POST request on the temporary upload link must have its Content-Type set\nto &quot;application/octet-stream&quot;.</p>\n<p></p>\n<p>Example temporary upload link consumption request:</p>\n<p></p>\n<p>curl -X POST https://content.dropboxapi.com/apitul/1/bNi2uIYF51cVBND</p>\n<p>--header &quot;Content-Type: application/octet-stream&quot;</p>\n<p>--data-binary @local_file.txt</p>\n<p></p>\n<p>A successful temporary upload link consumption request returns the content\nhash of the uploaded data in JSON format.</p>\n<p></p>\n<p>Example successful temporary upload link consumption response:</p>\n<p>{&quot;content-hash&quot;: &quot;599d71033d700ac892a0e48fa61b125d2f5994&quot;}</p>\n<p></p>\n<p>An unsuccessful temporary upload link consumption request returns any of the\nfollowing status codes:</p>\n<p></p>\n<p>HTTP 400 Bad Request: Content-Type is not one of application/octet-stream and\ntext/plain or request is invalid.</p>\n<p>HTTP 409 Conflict: The temporary upload link does not exist or is currently\nunavailable, the upload failed, or another error happened.</p>\n<p>HTTP 410 Gone: The temporary upload link is expired or consumed.</p>\n<p></p>\n<p>Example unsuccessful temporary upload link consumption response:</p>\n<p>Temporary upload link has been recently consumed.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetTemporaryUploadLinkResult> GetTemporaryUploadLinkAsync(CommitInfo commitInfo, double duration = 14400)
    parameters:
    - id: commitInfo
      type: Dropbox.Api.Files.CommitInfo
      description: >-
        Contains the path and other optional modifiers for the

        future upload commit. Equivalent to the parameters provided to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>.
    - id: duration
      type: System.Double
      description: >-
        How long before this link expires, in seconds.  Attempting

        to start an upload with this link longer than this period  of time after link

        creation will result in an error.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryUploadLinkResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetTemporaryUploadLinkAsync(commitInfo As CommitInfo, duration As Double = 14400) As System.Threading.Tasks.Task(Of GetTemporaryUploadLinkResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo,System.Double,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo,System.Double,System.AsyncCallback,System.Object)
  id: BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo,System.Double,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetTemporaryUploadLink(CommitInfo, Double, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetTemporaryUploadLink(CommitInfo, Double, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink(Dropbox.Api.Files.CommitInfo, System.Double, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetTemporaryUploadLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2791
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get temporary upload link route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetTemporaryUploadLink(CommitInfo commitInfo, double duration = 14400, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: commitInfo
      type: Dropbox.Api.Files.CommitInfo
      description: >-
        Contains the path and other optional modifiers for the

        future upload commit. Equivalent to the parameters provided to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>.
    - id: duration
      type: System.Double
      description: >-
        How long before this link expires, in seconds.  Attempting

        to start an upload with this link longer than this period  of time after link

        creation will result in an error.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetTemporaryUploadLink(commitInfo As CommitInfo, duration As Double = 14400, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink(System.IAsyncResult)
  id: EndGetTemporaryUploadLink(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetTemporaryUploadLink(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetTemporaryUploadLink(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndGetTemporaryUploadLink
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2809
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get temporary upload link\nroute to complete</p>\n"
  example: []
  syntax:
    content: public GetTemporaryUploadLinkResult EndGetTemporaryUploadLink(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.GetTemporaryUploadLinkResult
      description: The response to the send request
    content.vb: Public Function EndGetTemporaryUploadLink(asyncResult As System.IAsyncResult) As GetTemporaryUploadLinkResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  id: GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailAsync(ThumbnailArg)
  nameWithType: FilesUserRoutes.GetThumbnailAsync(ThumbnailArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(Dropbox.Api.Files.ThumbnailArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetThumbnailAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2832
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<FileMetadata>> GetThumbnailAsync(ThumbnailArg thumbnailArg)
    parameters:
    - id: thumbnailArg
      type: Dropbox.Api.Files.ThumbnailArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailAsync(thumbnailArg As ThumbnailArg) As System.Threading.Tasks.Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg,System.AsyncCallback,System.Object)
  id: BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnail(ThumbnailArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnail(ThumbnailArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(Dropbox.Api.Files.ThumbnailArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetThumbnail
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2846
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetThumbnail(ThumbnailArg thumbnailArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: thumbnailArg
      type: Dropbox.Api.Files.ThumbnailArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnail(thumbnailArg As ThumbnailArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  id: GetThumbnailAsync(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailAsync(String, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  nameWithType: FilesUserRoutes.GetThumbnailAsync(String, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync(System.String, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetThumbnailAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2871
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<FileMetadata>> GetThumbnailAsync(string path, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the image file you want to thumbnail.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailAsync(path As String, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing) As System.Threading.Tasks.Task(Of IDownloadResponse(Of FileMetadata))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  id: BeginGetThumbnail(System.String,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnail(String, ThumbnailFormat, ThumbnailSize, ThumbnailMode, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnail(String, ThumbnailFormat, ThumbnailSize, ThumbnailMode, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail(System.String, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetThumbnail
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2899
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetThumbnail(string path, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the image file you want to thumbnail.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnail(path As String, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail(System.IAsyncResult)
  id: EndGetThumbnail(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetThumbnail(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetThumbnail(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndGetThumbnail
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2924
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get thumbnail route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<FileMetadata> EndGetThumbnail(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
      description: The response to the send request
    content.vb: Public Function EndGetThumbnail(asyncResult As System.IAsyncResult) As IDownloadResponse(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  id: GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailV2Async(ThumbnailV2Arg)
  nameWithType: FilesUserRoutes.GetThumbnailV2Async(ThumbnailV2Arg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.ThumbnailV2Arg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetThumbnailV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2947
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<PreviewResult>> GetThumbnailV2Async(ThumbnailV2Arg thumbnailV2Arg)
    parameters:
    - id: thumbnailV2Arg
      type: Dropbox.Api.Files.ThumbnailV2Arg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailV2Async(thumbnailV2Arg As ThumbnailV2Arg) As System.Threading.Tasks.Task(Of IDownloadResponse(Of PreviewResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailV2Error" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  id: BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailV2(ThumbnailV2Arg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnailV2(ThumbnailV2Arg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.ThumbnailV2Arg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetThumbnailV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2961
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetThumbnailV2(ThumbnailV2Arg thumbnailV2Arg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: thumbnailV2Arg
      type: Dropbox.Api.Files.ThumbnailV2Arg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailV2(thumbnailV2Arg As ThumbnailV2Arg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  id: GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailV2Async(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  nameWithType: FilesUserRoutes.GetThumbnailV2Async(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async(Dropbox.Api.Files.PathOrLink, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetThumbnailV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 2988
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get a thumbnail for an image.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<IDownloadResponse<PreviewResult>> GetThumbnailV2Async(PathOrLink resource, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null)
    parameters:
    - id: resource
      type: Dropbox.Api.Files.PathOrLink
      description: >-
        Information specifying which file to preview. This could be

        a path to a file, a shared link pointing to a file, or a shared link pointing to a

        folder, with a relative path.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailV2Async(resource As PathOrLink, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing) As System.Threading.Tasks.Task(Of IDownloadResponse(Of PreviewResult))
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailV2Error" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  id: BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink,Dropbox.Api.Files.ThumbnailFormat,Dropbox.Api.Files.ThumbnailSize,Dropbox.Api.Files.ThumbnailMode,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailV2(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnailV2(PathOrLink, ThumbnailFormat, ThumbnailSize, ThumbnailMode, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2(Dropbox.Api.Files.PathOrLink, Dropbox.Api.Files.ThumbnailFormat, Dropbox.Api.Files.ThumbnailSize, Dropbox.Api.Files.ThumbnailMode, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetThumbnailV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3018
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetThumbnailV2(PathOrLink resource, ThumbnailFormat format = null, ThumbnailSize size = null, ThumbnailMode mode = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: resource
      type: Dropbox.Api.Files.PathOrLink
      description: >-
        Information specifying which file to preview. This could be

        a path to a file, a shared link pointing to a file, or a shared link pointing to a

        folder, with a relative path.
    - id: format
      type: Dropbox.Api.Files.ThumbnailFormat
      description: >-
        The format for the thumbnail image, jpeg (default) or png. For

        images that are photos, jpeg should be preferred, while png is  better for

        screenshots and digital arts.
    - id: size
      type: Dropbox.Api.Files.ThumbnailSize
      description: The size for the thumbnail image.
    - id: mode
      type: Dropbox.Api.Files.ThumbnailMode
      description: >-
        How to resize and crop the image to achieve the desired

        size.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailV2(resource As PathOrLink, format As ThumbnailFormat = Nothing, size As ThumbnailSize = Nothing, mode As ThumbnailMode = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2(System.IAsyncResult)
  id: EndGetThumbnailV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetThumbnailV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetThumbnailV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndGetThumbnailV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3043
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get thumbnail route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public IDownloadResponse<PreviewResult> EndGetThumbnailV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}
      description: The response to the send request
    content.vb: Public Function EndGetThumbnailV2(asyncResult As System.IAsyncResult) As IDownloadResponse(Of PreviewResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ThumbnailV2Error" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  id: GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailBatchAsync(GetThumbnailBatchArg)
  nameWithType: FilesUserRoutes.GetThumbnailBatchAsync(GetThumbnailBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(Dropbox.Api.Files.GetThumbnailBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetThumbnailBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3067
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get thumbnails for a list of images. We allow up to 25 thumbnails in a single\nbatch.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetThumbnailBatchResult> GetThumbnailBatchAsync(GetThumbnailBatchArg getThumbnailBatchArg)
    parameters:
    - id: getThumbnailBatchArg
      type: Dropbox.Api.Files.GetThumbnailBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetThumbnailBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailBatchAsync(getThumbnailBatchArg As GetThumbnailBatchArg) As System.Threading.Tasks.Task(Of GetThumbnailBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetThumbnailBatchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg,System.AsyncCallback,System.Object)
  id: BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailBatch(GetThumbnailBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnailBatch(GetThumbnailBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(Dropbox.Api.Files.GetThumbnailBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetThumbnailBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3081
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetThumbnailBatch(GetThumbnailBatchArg getThumbnailBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: getThumbnailBatchArg
      type: Dropbox.Api.Files.GetThumbnailBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailBatch(getThumbnailBatchArg As GetThumbnailBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg})
  id: GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable<ThumbnailArg>)
  nameWithType: FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable<ThumbnailArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.ThumbnailArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: GetThumbnailBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3101
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Get thumbnails for a list of images. We allow up to 25 thumbnails in a single\nbatch.</p>\n<p>This method currently supports files with the following file extensions: jpg,\njpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in\nsize won&apos;t be converted to a thumbnail.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetThumbnailBatchResult> GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable<ThumbnailArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg}
      description: List of files to get thumbnails.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.GetThumbnailBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function GetThumbnailBatchAsync(entries As System.Collections.Generic.IEnumerable(Of ThumbnailArg)) As System.Threading.Tasks.Task(Of GetThumbnailBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetThumbnailBatchError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable(Of ThumbnailArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.ThumbnailArg))
  name.vb: GetThumbnailBatchAsync(System.Collections.Generic.IEnumerable(Of ThumbnailArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg},System.AsyncCallback,System.Object)
  id: BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable<ThumbnailArg>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable<ThumbnailArg>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.ThumbnailArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginGetThumbnailBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3117
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the get thumbnail batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable<ThumbnailArg> entries, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg}
      description: List of files to get thumbnails.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginGetThumbnailBatch(entries As System.Collections.Generic.IEnumerable(Of ThumbnailArg), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch*
  nameWithType.vb: FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable(Of ThumbnailArg), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.ThumbnailArg), System.AsyncCallback, System.Object)
  name.vb: BeginGetThumbnailBatch(System.Collections.Generic.IEnumerable(Of ThumbnailArg), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch(System.IAsyncResult)
  id: EndGetThumbnailBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndGetThumbnailBatch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndGetThumbnailBatch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndGetThumbnailBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3136
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the get thumbnail batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public GetThumbnailBatchResult EndGetThumbnailBatch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.GetThumbnailBatchResult
      description: The response to the send request
    content.vb: Public Function EndGetThumbnailBatch(asyncResult As System.IAsyncResult) As GetThumbnailBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.GetThumbnailBatchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  id: ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderAsync(ListFolderArg)
  nameWithType: FilesUserRoutes.ListFolderAsync(ListFolderArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3183
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Starts returning the contents of a folder. If the result&apos;s <xref href=\"Dropbox.Api.Files.ListFolderResult.HasMore\" data-throw-if-not-resolved=\"false\"></xref> field is <code>true</code>, call\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref>\nwith the returned <xref href=\"Dropbox.Api.Files.ListFolderResult.Cursor\" data-throw-if-not-resolved=\"false\"></xref> to\nretrieve more entries.</p>\n<p>If you&apos;re using <xref href=\"Dropbox.Api.Files.ListFolderArg.Recursive\" data-throw-if-not-resolved=\"false\"></xref> set\nto <code>true</code> to keep a local cache of the contents of a Dropbox account, iterate\nthrough each entry in order and process them as follows to keep your local state in\nsync:</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it and remove all its\nchildren.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it but leave the\nchildren as they are. Check the new entry&apos;s <see cref=\"!:Dropbox.Api.Files.FolderSharingInfo.ReadOnly\"></see> and set all its children&apos;s\nread-only statuses to match.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref>, if your local state has something at\nthe given path, remove it and all its children. If there&apos;s nothing at the given\npath, ignore this entry.</p>\n<p>Note: <xref href=\"Dropbox.Api.Auth.RateLimitError\" data-throw-if-not-resolved=\"false\"></xref> may be returned if multiple <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> calls\nwith same parameters are made simultaneously by same API app for same user. If your\napp implements retry logic, please hold off the retry until the previous request\nfinishes.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListFolderResult> ListFolderAsync(ListFolderArg listFolderArg)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderAsync(listFolderArg As ListFolderArg) As System.Threading.Tasks.Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  id: BeginListFolder(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolder(ListFolderArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolder(ListFolderArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(Dropbox.Api.Files.ListFolderArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3197
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListFolder(ListFolderArg listFolderArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolder(listFolderArg As ListFolderArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  id: ListFolderAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  nameWithType: FilesUserRoutes.ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListFolderAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3265
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Starts returning the contents of a folder. If the result&apos;s <xref href=\"Dropbox.Api.Files.ListFolderResult.HasMore\" data-throw-if-not-resolved=\"false\"></xref> field is <code>true</code>, call\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref>\nwith the returned <xref href=\"Dropbox.Api.Files.ListFolderResult.Cursor\" data-throw-if-not-resolved=\"false\"></xref> to\nretrieve more entries.</p>\n<p>If you&apos;re using <xref href=\"Dropbox.Api.Files.ListFolderArg.Recursive\" data-throw-if-not-resolved=\"false\"></xref> set\nto <code>true</code> to keep a local cache of the contents of a Dropbox account, iterate\nthrough each entry in order and process them as follows to keep your local state in\nsync:</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FileMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it and remove all its\nchildren.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.FolderMetadata\" data-throw-if-not-resolved=\"false\"></xref>, store the new entry at the given path\nin your local state. If the required parent folders don&apos;t exist yet, create them.\nIf there&apos;s already something else at the given path, replace it but leave the\nchildren as they are. Check the new entry&apos;s <see cref=\"!:Dropbox.Api.Files.FolderSharingInfo.ReadOnly\"></see> and set all its children&apos;s\nread-only statuses to match.</p>\n<p>For each <xref href=\"Dropbox.Api.Files.DeletedMetadata\" data-throw-if-not-resolved=\"false\"></xref>, if your local state has something at\nthe given path, remove it and all its children. If there&apos;s nothing at the given\npath, ignore this entry.</p>\n<p>Note: <xref href=\"Dropbox.Api.Auth.RateLimitError\" data-throw-if-not-resolved=\"false\"></xref> may be returned if multiple <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> calls\nwith same parameters are made simultaneously by same API app for same user. If your\napp implements retry logic, please hold off the retry until the previous request\nfinishes.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListFolderResult> ListFolderAsync(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderAsync(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True) As System.Threading.Tasks.Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  name.vb: ListFolderAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginListFolder(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3324
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListFolder(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolder(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder*
  nameWithType.vb: FilesUserRoutes.BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginListFolder(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder(System.IAsyncResult)
  id: EndListFolder(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListFolder(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndListFolder(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndListFolder
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3361
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListFolderResult EndListFolder(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderResult
      description: The response to the send request
    content.vb: Public Function EndListFolder(asyncResult As System.IAsyncResult) As ListFolderResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  id: ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderContinueAsync(ListFolderContinueArg)
  nameWithType: FilesUserRoutes.ListFolderContinueAsync(ListFolderContinueArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListFolderContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3385
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all files and retrieve updates to the folder, following the same\nrules as documented for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListFolderResult> ListFolderContinueAsync(ListFolderContinueArg listFolderContinueArg)
    parameters:
    - id: listFolderContinueArg
      type: Dropbox.Api.Files.ListFolderContinueArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderContinueAsync(listFolderContinueArg As ListFolderContinueArg) As System.Threading.Tasks.Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  id: BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderContinue(ListFolderContinueArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderContinue(ListFolderContinueArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(Dropbox.Api.Files.ListFolderContinueArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListFolderContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3399
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder continue route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListFolderContinue(ListFolderContinueArg listFolderContinueArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderContinueArg
      type: Dropbox.Api.Files.ListFolderContinueArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderContinue(listFolderContinueArg As ListFolderContinueArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(System.String)
  id: ListFolderContinueAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderContinueAsync(String)
  nameWithType: FilesUserRoutes.ListFolderContinueAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListFolderContinueAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3421
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Once a cursor has been retrieved from <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, use this to\npaginate through all files and retrieve updates to the folder, following the same\nrules as documented for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListFolderResult> ListFolderContinueAsync(string cursor)
    parameters:
    - id: cursor
      type: System.String
      description: The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderContinueAsync(cursor As String) As System.Threading.Tasks.Task(Of ListFolderResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  id: BeginListFolderContinue(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderContinue(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderContinue(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListFolderContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3439
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder continue route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListFolderContinue(string cursor, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: cursor
      type: System.String
      description: The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderContinue(cursor As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue(System.IAsyncResult)
  id: EndListFolderContinue(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListFolderContinue(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndListFolderContinue(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndListFolderContinue
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3458
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder continue route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListFolderResult EndListFolderContinue(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderResult
      description: The response to the send request
    content.vb: Public Function EndListFolderContinue(asyncResult As System.IAsyncResult) As ListFolderResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderContinueError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  id: ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderGetLatestCursorAsync(ListFolderArg)
  nameWithType: FilesUserRoutes.ListFolderGetLatestCursorAsync(ListFolderArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListFolderGetLatestCursorAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3483
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>A way to quickly get a cursor for the folder&apos;s state. Unlike <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>\ndoesn&apos;t return any entries. This endpoint is for app which only needs to know about\nnew files and modifications and doesn&apos;t need to know about files that already exist\nin Dropbox.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListFolderGetLatestCursorResult> ListFolderGetLatestCursorAsync(ListFolderArg listFolderArg)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderGetLatestCursorResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderGetLatestCursorAsync(listFolderArg As ListFolderArg) As System.Threading.Tasks.Task(Of ListFolderGetLatestCursorResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  id: BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderGetLatestCursor(ListFolderArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderGetLatestCursor(ListFolderArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(Dropbox.Api.Files.ListFolderArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListFolderGetLatestCursor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3498
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder get latest cursor\nroute.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListFolderGetLatestCursor(ListFolderArg listFolderArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderArg
      type: Dropbox.Api.Files.ListFolderArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderGetLatestCursor(listFolderArg As ListFolderArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  id: ListFolderGetLatestCursorAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderGetLatestCursorAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  nameWithType: FilesUserRoutes.ListFolderGetLatestCursorAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListFolderGetLatestCursorAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3544
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>A way to quickly get a cursor for the folder&apos;s state. Unlike <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)\" data-throw-if-not-resolved=\"false\"></xref>\ndoesn&apos;t return any entries. This endpoint is for app which only needs to know about\nnew files and modifications and doesn&apos;t need to know about files that already exist\nin Dropbox.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListFolderGetLatestCursorResult> ListFolderGetLatestCursorAsync(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderGetLatestCursorResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderGetLatestCursorAsync(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True) As System.Threading.Tasks.Task(Of ListFolderGetLatestCursorResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.ListFolderGetLatestCursorAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean)
  name.vb: ListFolderGetLatestCursorAsync(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginListFolderGetLatestCursor(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.UInt32},Dropbox.Api.Files.SharedLink,Dropbox.Api.FileProperties.TemplateFilterBase,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderGetLatestCursor(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderGetLatestCursor(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable<UInt32>, SharedLink, TemplateFilterBase, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable<System.UInt32>, Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListFolderGetLatestCursor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3604
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder get latest cursor\nroute.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListFolderGetLatestCursor(string path, bool recursive = false, bool includeMediaInfo = false, bool includeDeleted = false, bool includeHasExplicitSharedMembers = false, bool includeMountedFolders = true, uint? limit = null, SharedLink sharedLink = null, TemplateFilterBase includePropertyGroups = null, bool includeNonDownloadableFiles = true, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file.
    - id: recursive
      type: System.Boolean
      description: >-
        If true, the list folder operation will be applied

        recursively to all subfolders and the response will contain contents of all

        subfolders.
    - id: includeMediaInfo
      type: System.Boolean
      description: >-
        If true, <xref href="Dropbox.Api.Files.FileMetadata.MediaInfo" data-throw-if-not-resolved="false"></xref> is set for photo and video. This

        parameter will no longer have an effect starting December 2, 2019.
    - id: includeDeleted
      type: System.Boolean
      description: >-
        If true, the results will include entries for files

        and folders that used to exist but were deleted.
    - id: includeHasExplicitSharedMembers
      type: System.Boolean
      description: >-
        If true, the results will include a

        flag for each file indicating whether or not  that file has any explicit

        members.
    - id: includeMountedFolders
      type: System.Boolean
      description: >-
        If true, the results will include entries under

        mounted folders which includes app folder, shared folder and team folder.
    - id: limit
      type: System.Nullable{System.UInt32}
      description: >-
        The maximum number of results to return per request. Note: This

        is an approximate number and there can be slightly more entries returned in some

        cases.
    - id: sharedLink
      type: Dropbox.Api.Files.SharedLink
      description: >-
        A shared link to list the contents of. If the link is

        password-protected, the password must be provided. If this field is present, <xref href="Dropbox.Api.Files.ListFolderArg.Path" data-throw-if-not-resolved="false"></xref> will be relative to root of the

        shared link. Only non-recursive mode is supported for shared link.
    - id: includePropertyGroups
      type: Dropbox.Api.FileProperties.TemplateFilterBase
      description: >-
        If set to a valid list of template IDs, <xref href="Dropbox.Api.Files.FileMetadata.PropertyGroups" data-throw-if-not-resolved="false"></xref> is set if there exists

        property data associated with the file and each of the listed templates.
    - id: includeNonDownloadableFiles
      type: System.Boolean
      description: >-
        If true, include files that are not

        downloadable, i.e. Google Docs.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderGetLatestCursor(path As String, recursive As Boolean = False, includeMediaInfo As Boolean = False, includeDeleted As Boolean = False, includeHasExplicitSharedMembers As Boolean = False, includeMountedFolders As Boolean = True, limit As UInteger? = Nothing, sharedLink As SharedLink = Nothing, includePropertyGroups As TemplateFilterBase = Nothing, includeNonDownloadableFiles As Boolean = True, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor*
  nameWithType.vb: FilesUserRoutes.BeginListFolderGetLatestCursor(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor(System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Nullable(Of System.UInt32), Dropbox.Api.Files.SharedLink, Dropbox.Api.FileProperties.TemplateFilterBase, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginListFolderGetLatestCursor(String, Boolean, Boolean, Boolean, Boolean, Boolean, Nullable(Of UInt32), SharedLink, TemplateFilterBase, Boolean, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor(System.IAsyncResult)
  id: EndListFolderGetLatestCursor(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListFolderGetLatestCursor(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndListFolderGetLatestCursor(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndListFolderGetLatestCursor
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3641
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder get latest cursor\nroute to complete</p>\n"
  example: []
  syntax:
    content: public ListFolderGetLatestCursorResult EndListFolderGetLatestCursor(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderGetLatestCursorResult
      description: The response to the send request
    content.vb: Public Function EndListFolderGetLatestCursor(asyncResult As System.IAsyncResult) As ListFolderGetLatestCursorResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  id: ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderLongpollAsync(ListFolderLongpollArg)
  nameWithType: FilesUserRoutes.ListFolderLongpollAsync(ListFolderLongpollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(Dropbox.Api.Files.ListFolderLongpollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListFolderLongpollAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3668
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>A longpoll endpoint to wait for changes on an account. In conjunction with\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref>,\nthis call gives you a low-latency way to monitor an account for file changes. The\nconnection will block until there are changes available or a timeout occurs. This\nendpoint is useful mostly for client-side apps. If you&apos;re looking for server-side\nnotifications, check out our <a href=\"https://www.dropbox.com/developers/reference/webhooks\">webhooks\ndocumentation</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListFolderLongpollResult> ListFolderLongpollAsync(ListFolderLongpollArg listFolderLongpollArg)
    parameters:
    - id: listFolderLongpollArg
      type: Dropbox.Api.Files.ListFolderLongpollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderLongpollResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderLongpollAsync(listFolderLongpollArg As ListFolderLongpollArg) As System.Threading.Tasks.Task(Of ListFolderLongpollResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderLongpollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg,System.AsyncCallback,System.Object)
  id: BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderLongpoll(ListFolderLongpollArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderLongpoll(ListFolderLongpollArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(Dropbox.Api.Files.ListFolderLongpollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListFolderLongpoll
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3682
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder longpoll route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListFolderLongpoll(ListFolderLongpollArg listFolderLongpollArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listFolderLongpollArg
      type: Dropbox.Api.Files.ListFolderLongpollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderLongpoll(listFolderLongpollArg As ListFolderLongpollArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(System.String,System.UInt64)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(System.String,System.UInt64)
  id: ListFolderLongpollAsync(System.String,System.UInt64)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListFolderLongpollAsync(String, UInt64)
  nameWithType: FilesUserRoutes.ListFolderLongpollAsync(String, UInt64)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync(System.String, System.UInt64)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListFolderLongpollAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3713
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>A longpoll endpoint to wait for changes on an account. In conjunction with\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)\" data-throw-if-not-resolved=\"false\"></xref>,\nthis call gives you a low-latency way to monitor an account for file changes. The\nconnection will block until there are changes available or a timeout occurs. This\nendpoint is useful mostly for client-side apps. If you&apos;re looking for server-side\nnotifications, check out our <a href=\"https://www.dropbox.com/developers/reference/webhooks\">webhooks\ndocumentation</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListFolderLongpollResult> ListFolderLongpollAsync(string cursor, ulong timeout = null)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        A cursor as returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>. Cursors

        retrieved by setting <xref href="Dropbox.Api.Files.ListFolderArg.IncludeMediaInfo" data-throw-if-not-resolved="false"></xref> to <code>true</code> are not supported.
    - id: timeout
      type: System.UInt64
      description: >-
        A timeout in seconds. The request will block for at most this

        length of time, plus up to 90 seconds of random jitter added to avoid the

        thundering herd problem. Care should be taken when using this parameter, as some

        network infrastructure does not support long timeouts.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderLongpollResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListFolderLongpollAsync(cursor As String, timeout As ULong = Nothing) As System.Threading.Tasks.Task(Of ListFolderLongpollResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderLongpollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(System.String,System.UInt64,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(System.String,System.UInt64,System.AsyncCallback,System.Object)
  id: BeginListFolderLongpoll(System.String,System.UInt64,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListFolderLongpoll(String, UInt64, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListFolderLongpoll(String, UInt64, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll(System.String, System.UInt64, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListFolderLongpoll
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3739
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list folder longpoll route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListFolderLongpoll(string cursor, ulong timeout = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        A cursor as returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)" data-throw-if-not-resolved="false"></xref>. Cursors

        retrieved by setting <xref href="Dropbox.Api.Files.ListFolderArg.IncludeMediaInfo" data-throw-if-not-resolved="false"></xref> to <code>true</code> are not supported.
    - id: timeout
      type: System.UInt64
      description: >-
        A timeout in seconds. The request will block for at most this

        length of time, plus up to 90 seconds of random jitter added to avoid the

        thundering herd problem. Care should be taken when using this parameter, as some

        network infrastructure does not support long timeouts.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListFolderLongpoll(cursor As String, timeout As ULong = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll(System.IAsyncResult)
  id: EndListFolderLongpoll(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListFolderLongpoll(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndListFolderLongpoll(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndListFolderLongpoll
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3760
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list folder longpoll route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListFolderLongpollResult EndListFolderLongpoll(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListFolderLongpollResult
      description: The response to the send request
    content.vb: Public Function EndListFolderLongpoll(asyncResult As System.IAsyncResult) As ListFolderLongpollResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListFolderLongpollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  id: ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListRevisionsAsync(ListRevisionsArg)
  nameWithType: FilesUserRoutes.ListRevisionsAsync(ListRevisionsArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(Dropbox.Api.Files.ListRevisionsArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListRevisionsAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3789
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns revisions for files based on a file path or a file id. The file path\nor file id is identified from the latest file entry at the given file path or id.\nThis end point allows your app to query either by file path or file id by setting\nthe mode parameter appropriately.</p>\n<p>In the <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Path\" data-throw-if-not-resolved=\"false\"></xref> (default)\nmode, all revisions at the same file path as the latest file entry are returned. If\nrevisions with the same file id are desired, then mode must be set to <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Id\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Id\" data-throw-if-not-resolved=\"false\"></xref> mode is useful to retrieve\nrevisions for a given file across moves or renames.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListRevisionsResult> ListRevisionsAsync(ListRevisionsArg listRevisionsArg)
    parameters:
    - id: listRevisionsArg
      type: Dropbox.Api.Files.ListRevisionsArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListRevisionsResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListRevisionsAsync(listRevisionsArg As ListRevisionsArg) As System.Threading.Tasks.Task(Of ListRevisionsResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListRevisionsError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg,System.AsyncCallback,System.Object)
  id: BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListRevisions(ListRevisionsArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListRevisions(ListRevisionsArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(Dropbox.Api.Files.ListRevisionsArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListRevisions
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3803
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list revisions route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListRevisions(ListRevisionsArg listRevisionsArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: listRevisionsArg
      type: Dropbox.Api.Files.ListRevisionsArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListRevisions(listRevisionsArg As ListRevisionsArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64)
  id: ListRevisionsAsync(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: ListRevisionsAsync(String, ListRevisionsMode, UInt64)
  nameWithType: FilesUserRoutes.ListRevisionsAsync(String, ListRevisionsMode, UInt64)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync(System.String, Dropbox.Api.Files.ListRevisionsMode, System.UInt64)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: ListRevisionsAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3831
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns revisions for files based on a file path or a file id. The file path\nor file id is identified from the latest file entry at the given file path or id.\nThis end point allows your app to query either by file path or file id by setting\nthe mode parameter appropriately.</p>\n<p>In the <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Path\" data-throw-if-not-resolved=\"false\"></xref> (default)\nmode, all revisions at the same file path as the latest file entry are returned. If\nrevisions with the same file id are desired, then mode must be set to <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Id\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"Dropbox.Api.Files.ListRevisionsMode.Id\" data-throw-if-not-resolved=\"false\"></xref> mode is useful to retrieve\nrevisions for a given file across moves or renames.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListRevisionsResult> ListRevisionsAsync(string path, ListRevisionsMode mode = null, ulong limit = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the file you want to see the revisions of.
    - id: mode
      type: Dropbox.Api.Files.ListRevisionsMode
      description: >-
        Determines the behavior of the API in listing the revisions for

        a given file path or id.
    - id: limit
      type: System.UInt64
      description: The maximum number of revision entries returned.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.ListRevisionsResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function ListRevisionsAsync(path As String, mode As ListRevisionsMode = Nothing, limit As ULong = Nothing) As System.Threading.Tasks.Task(Of ListRevisionsResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListRevisionsError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64,System.AsyncCallback,System.Object)
  id: BeginListRevisions(System.String,Dropbox.Api.Files.ListRevisionsMode,System.UInt64,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginListRevisions(String, ListRevisionsMode, UInt64, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginListRevisions(String, ListRevisionsMode, UInt64, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions(System.String, Dropbox.Api.Files.ListRevisionsMode, System.UInt64, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginListRevisions
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3854
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the list revisions route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginListRevisions(string path, ListRevisionsMode mode = null, ulong limit = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path to the file you want to see the revisions of.
    - id: mode
      type: Dropbox.Api.Files.ListRevisionsMode
      description: >-
        Determines the behavior of the API in listing the revisions for

        a given file path or id.
    - id: limit
      type: System.UInt64
      description: The maximum number of revision entries returned.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginListRevisions(path As String, mode As ListRevisionsMode = Nothing, limit As ULong = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions(System.IAsyncResult)
  id: EndListRevisions(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndListRevisions(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndListRevisions(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndListRevisions
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3877
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the list revisions route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public ListRevisionsResult EndListRevisions(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.ListRevisionsResult
      description: The response to the send request
    content.vb: Public Function EndListRevisions(asyncResult As System.IAsyncResult) As ListRevisionsResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.ListRevisionsError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  id: LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: LockFileBatchAsync(LockFileBatchArg)
  nameWithType: FilesUserRoutes.LockFileBatchAsync(LockFileBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(Dropbox.Api.Files.LockFileBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: LockFileBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3899
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Lock the files at the given paths. A locked file will be writable only by the\nlock holder. A successful response indicates that the file has been locked. Returns\na list of the locked file paths and their metadata after this operation.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<LockFileBatchResult> LockFileBatchAsync(LockFileBatchArg lockFileBatchArg)
    parameters:
    - id: lockFileBatchArg
      type: Dropbox.Api.Files.LockFileBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function LockFileBatchAsync(lockFileBatchArg As LockFileBatchArg) As System.Threading.Tasks.Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  id: BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginLockFileBatch(LockFileBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginLockFileBatch(LockFileBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(Dropbox.Api.Files.LockFileBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginLockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3913
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the lock file batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginLockFileBatch(LockFileBatchArg lockFileBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: lockFileBatchArg
      type: Dropbox.Api.Files.LockFileBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginLockFileBatch(lockFileBatchArg As LockFileBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  id: LockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: LockFileBatchAsync(System.Collections.Generic.IEnumerable<LockFileArg>)
  nameWithType: FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable<LockFileArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: LockFileBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3933
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Lock the files at the given paths. A locked file will be writable only by the\nlock holder. A successful response indicates that the file has been locked. Returns\na list of the locked file paths and their metadata after this operation.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<LockFileBatchResult> LockFileBatchAsync(System.Collections.Generic.IEnumerable<LockFileArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be locked or queried. Duplicate path arguments in the batch are

        considered only once.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function LockFileBatchAsync(entries As System.Collections.Generic.IEnumerable(Of LockFileArg)) As System.Threading.Tasks.Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable(Of LockFileArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg))
  name.vb: LockFileBatchAsync(System.Collections.Generic.IEnumerable(Of LockFileArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  id: BeginLockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginLockFileBatch(System.Collections.Generic.IEnumerable<LockFileArg>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable<LockFileArg>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginLockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3951
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the lock file batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginLockFileBatch(System.Collections.Generic.IEnumerable<LockFileArg> entries, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be locked or queried. Duplicate path arguments in the batch are

        considered only once.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginLockFileBatch(entries As System.Collections.Generic.IEnumerable(Of LockFileArg), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch*
  nameWithType.vb: FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable(Of LockFileArg), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg), System.AsyncCallback, System.Object)
  name.vb: BeginLockFileBatch(System.Collections.Generic.IEnumerable(Of LockFileArg), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch(System.IAsyncResult)
  id: EndLockFileBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndLockFileBatch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndLockFileBatch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndLockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3970
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the lock file batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public LockFileBatchResult EndLockFileBatch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.LockFileBatchResult
      description: The response to the send request
    content.vb: Public Function EndLockFileBatch(asyncResult As System.IAsyncResult) As LockFileBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(Dropbox.Api.Files.RelocationArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(Dropbox.Api.Files.RelocationArg)
  id: MoveV2Async(Dropbox.Api.Files.RelocationArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveV2Async(RelocationArg)
  nameWithType: FilesUserRoutes.MoveV2Async(RelocationArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(Dropbox.Api.Files.RelocationArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 3992
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be moved.</p>\n<p>Note that we do not currently support case-only renaming.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationResult> MoveV2Async(RelocationArg relocationArg)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveV2Async(relocationArg As RelocationArg) As System.Threading.Tasks.Task(Of RelocationResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  id: BeginMoveV2(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveV2(RelocationArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveV2(RelocationArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(Dropbox.Api.Files.RelocationArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4006
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveV2(RelocationArg relocationArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveV2(relocationArg As RelocationArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: MoveV2Async(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveV2Async(String, String, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.MoveV2Async(String, String, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async(System.String, System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4031
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be moved.</p>\n<p>Note that we do not currently support case-only renaming.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationResult> MoveV2Async(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveV2Async(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As System.Threading.Tasks.Task(Of RelocationResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginMoveV2(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveV2(String, String, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveV2(String, String, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2(System.String, System.String, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4062
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveV2(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveV2(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2(System.IAsyncResult)
  id: EndMoveV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndMoveV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4088
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move route to complete</p>\n"
  example: []
  syntax:
    content: public RelocationResult EndMoveV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationResult
      description: The response to the send request
    content.vb: Public Function EndMoveV2(asyncResult As System.IAsyncResult) As RelocationResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(Dropbox.Api.Files.RelocationArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(Dropbox.Api.Files.RelocationArg)
  id: MoveAsync(Dropbox.Api.Files.RelocationArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveAsync(RelocationArg)
  nameWithType: FilesUserRoutes.MoveAsync(RelocationArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(Dropbox.Api.Files.RelocationArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4109
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be moved.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> MoveAsync(RelocationArg relocationArg)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveAsync(relocationArg As RelocationArg) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  id: BeginMove(Dropbox.Api.Files.RelocationArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMove(RelocationArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMove(RelocationArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(Dropbox.Api.Files.RelocationArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4124
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMove(RelocationArg relocationArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: relocationArg
      type: Dropbox.Api.Files.RelocationArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMove(relocationArg As RelocationArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  id: MoveAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveAsync(String, String, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.MoveAsync(String, String, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync(System.String, System.String, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4149
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move a file or folder to a different location in the user&apos;s Dropbox.</p>\n<p>If the source path is a folder all its contents will be moved.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<Metadata> MoveAsync(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveAsync(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As System.Threading.Tasks.Task(Of Metadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginMove(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMove(String, String, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMove(String, String, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove(System.String, System.String, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4181
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMove(string fromPath, string toPath, bool allowSharedFolder = false, bool autorename = false, bool allowOwnershipTransfer = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: fromPath
      type: System.String
      description: Path in the user&apos;s Dropbox to be copied or moved.
    - id: toPath
      type: System.String
      description: Path in the user&apos;s Dropbox that is the destination.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, have the Dropbox server try to

        autorename the file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMove(fromPath As String, toPath As String, allowSharedFolder As Boolean = False, autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove(System.IAsyncResult)
  id: EndMove(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMove(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndMove(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndMove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4208
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move route to complete</p>\n"
  example: []
  syntax:
    content: public Metadata EndMove(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.Metadata
      description: The response to the send request
    content.vb: Public Function EndMove(asyncResult As System.IAsyncResult) As Metadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RelocationError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  id: MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchV2Async(MoveBatchArg)
  nameWithType: FilesUserRoutes.MoveBatchV2Async(MoveBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4236
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move multiple files or folders to different locations at once in the user&apos;s\nDropbox. Note that we do not currently support case-only renaming.</p>\n<p>This route will replace <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. The main\ndifference is this route will return status for each entry, while <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref> raises failure if\nany entry fails.</p>\n<p>This route will either finish synchronously, or return a job ID and do the\nasync move job in background. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchV2Launch> MoveBatchV2Async(MoveBatchArg moveBatchArg)
    parameters:
    - id: moveBatchArg
      type: Dropbox.Api.Files.MoveBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchV2Async(moveBatchArg As MoveBatchArg) As System.Threading.Tasks.Task(Of RelocationBatchV2Launch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg,System.AsyncCallback,System.Object)
  id: BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchV2(MoveBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchV2(MoveBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(Dropbox.Api.Files.MoveBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4250
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveBatchV2(MoveBatchArg moveBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: moveBatchArg
      type: Dropbox.Api.Files.MoveBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchV2(moveBatchArg As MoveBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean)
  id: MoveBatchV2Async(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchV2Async(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean)
  nameWithType: FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveBatchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4279
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move multiple files or folders to different locations at once in the user&apos;s\nDropbox. Note that we do not currently support case-only renaming.</p>\n<p>This route will replace <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. The main\ndifference is this route will return status for each entry, while <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref> raises failure if\nany entry fails.</p>\n<p>This route will either finish synchronously, or return a job ID and do the\nasync move job in background. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check\nthe job status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchV2Launch> MoveBatchV2Async(System.Collections.Generic.IEnumerable<RelocationPath> entries, bool autorename = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchV2Async(entries As System.Collections.Generic.IEnumerable(Of RelocationPath), autorename As Boolean = False, allowOwnershipTransfer As Boolean = False) As System.Threading.Tasks.Task(Of RelocationBatchV2Launch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async*
  nameWithType.vb: FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean)
  name.vb: MoveBatchV2Async(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginMoveBatchV2(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchV2(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4305
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveBatchV2(System.Collections.Generic.IEnumerable<RelocationPath> entries, bool autorename = false, bool allowOwnershipTransfer = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchV2(entries As System.Collections.Generic.IEnumerable(Of RelocationPath), autorename As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2*
  nameWithType.vb: FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginMoveBatchV2(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2(System.IAsyncResult)
  id: EndMoveBatchV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveBatchV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveBatchV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndMoveBatchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4325
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchV2Launch EndMoveBatchV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchV2Launch
      description: The response to the send request
    content.vb: Public Function EndMoveBatchV2(asyncResult As System.IAsyncResult) As RelocationBatchV2Launch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  id: MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchAsync(RelocationBatchArg)
  nameWithType: FilesUserRoutes.MoveBatchAsync(RelocationBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4347
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will return job ID immediately and do the async moving job in\nbackground. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the\njob status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchLaunch> MoveBatchAsync(RelocationBatchArg relocationBatchArg)
    parameters:
    - id: relocationBatchArg
      type: Dropbox.Api.Files.RelocationBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchAsync(relocationBatchArg As RelocationBatchArg) As System.Threading.Tasks.Task(Of RelocationBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  id: BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatch(RelocationBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatch(RelocationBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(Dropbox.Api.Files.RelocationBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4362
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveBatch(RelocationBatchArg relocationBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: relocationBatchArg
      type: Dropbox.Api.Files.RelocationBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatch(relocationBatchArg As RelocationBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  id: MoveBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchAsync(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, Boolean)
  nameWithType: FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, Boolean)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4388
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Move multiple files or folders to different locations at once in the user&apos;s\nDropbox.</p>\n<p>This route will return job ID immediately and do the async moving job in\nbackground. Please use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the\njob status.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchLaunch> MoveBatchAsync(System.Collections.Generic.IEnumerable<RelocationPath> entries, bool autorename = false, bool allowSharedFolder = false, bool allowOwnershipTransfer = false)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchAsync(entries As System.Collections.Generic.IEnumerable(Of RelocationPath), autorename As Boolean = False, allowSharedFolder As Boolean = False, allowOwnershipTransfer As Boolean = False) As System.Threading.Tasks.Task(Of RelocationBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync*
  nameWithType.vb: FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.Boolean)
  name.vb: MoveBatchAsync(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginMoveBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath},System.Boolean,System.Boolean,System.Boolean,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatch(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable<RelocationPath>, Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>, System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4418
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveBatch(System.Collections.Generic.IEnumerable<RelocationPath> entries, bool autorename = false, bool allowSharedFolder = false, bool allowOwnershipTransfer = false, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
      description: List of entries to be moved or copied. Each entry is <xref href="Dropbox.Api.Files.RelocationPath" data-throw-if-not-resolved="false"></xref>.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict with any file, have the Dropbox

        server try to autorename that file to avoid the conflict.
    - id: allowSharedFolder
      type: System.Boolean
      description: This flag has no effect.
    - id: allowOwnershipTransfer
      type: System.Boolean
      description: >-
        Allow moves by owner even if it would result

        in an ownership transfer for the content being moved. This does not apply to

        copies.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatch(entries As System.Collections.Generic.IEnumerable(Of RelocationPath), autorename As Boolean = False, allowSharedFolder As Boolean = False, allowOwnershipTransfer As Boolean = False, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch*
  nameWithType.vb: FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath), System.Boolean, System.Boolean, System.Boolean, System.AsyncCallback, System.Object)
  name.vb: BeginMoveBatch(System.Collections.Generic.IEnumerable(Of RelocationPath), Boolean, Boolean, Boolean, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch(System.IAsyncResult)
  id: EndMoveBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveBatch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveBatch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndMoveBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4441
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchLaunch EndMoveBatch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchLaunch
      description: The response to the send request
    content.vb: Public Function EndMoveBatch(asyncResult As System.IAsyncResult) As RelocationBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  id: MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchCheckV2Async(PollArg)
  nameWithType: FilesUserRoutes.MoveBatchCheckV2Async(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveBatchCheckV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4464
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. It returns\nlist of results for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchV2JobStatus> MoveBatchCheckV2Async(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchCheckV2Async(pollArg As PollArg) As System.Threading.Tasks.Task(Of RelocationBatchV2JobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchCheckV2(PollArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchCheckV2(PollArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4478
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveBatchCheckV2(PollArg pollArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchCheckV2(pollArg As PollArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(System.String)
  id: MoveBatchCheckV2Async(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchCheckV2Async(String)
  nameWithType: FilesUserRoutes.MoveBatchCheckV2Async(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveBatchCheckV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4497
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. It returns\nlist of results for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchV2JobStatus> MoveBatchCheckV2Async(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchCheckV2Async(asyncJobId As String) As System.Threading.Tasks.Task(Of RelocationBatchV2JobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  id: BeginMoveBatchCheckV2(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchCheckV2(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchCheckV2(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4514
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveBatchCheckV2(string asyncJobId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchCheckV2(asyncJobId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2(System.IAsyncResult)
  id: EndMoveBatchCheckV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveBatchCheckV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveBatchCheckV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndMoveBatchCheckV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4533
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchV2JobStatus EndMoveBatchCheckV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchV2JobStatus
      description: The response to the send request
    content.vb: Public Function EndMoveBatchCheckV2(asyncResult As System.IAsyncResult) As RelocationBatchV2JobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.MoveBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4555
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of results for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchJobStatus> MoveBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchCheckAsync(pollArg As PollArg) As System.Threading.Tasks.Task(Of RelocationBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginMoveBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchCheck(PollArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchCheck(PollArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4570
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveBatchCheck(PollArg pollArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchCheck(pollArg As PollArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(System.String)
  id: MoveBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: MoveBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.MoveBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: MoveBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4590
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>. If success, it\nreturns list of results for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<RelocationBatchJobStatus> MoveBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function MoveBatchCheckAsync(asyncJobId As String) As System.Threading.Tasks.Task(Of RelocationBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginMoveBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginMoveBatchCheck(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginMoveBatchCheck(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginMoveBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4608
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the move batch check route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginMoveBatchCheck(string asyncJobId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginMoveBatchCheck(asyncJobId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck(System.IAsyncResult)
  id: EndMoveBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndMoveBatchCheck(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndMoveBatchCheck(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndMoveBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4628
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the move batch check route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public RelocationBatchJobStatus EndMoveBatchCheck(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.RelocationBatchJobStatus
      description: The response to the send request
    content.vb: Public Function EndMoveBatchCheck(asyncResult As System.IAsyncResult) As RelocationBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream)
  id: PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PaperCreateAsync(PaperCreateArg, System.IO.Stream)
  nameWithType: FilesUserRoutes.PaperCreateAsync(PaperCreateArg, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(Dropbox.Api.Files.PaperCreateArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PaperCreateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4650
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Creates a new Paper doc with the provided content.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperCreateResult> PaperCreateAsync(PaperCreateArg paperCreateArg, System.IO.Stream body)
    parameters:
    - id: paperCreateArg
      type: Dropbox.Api.Files.PaperCreateArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperCreateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PaperCreateAsync(paperCreateArg As PaperCreateArg, body As System.IO.Stream) As System.Threading.Tasks.Task(Of PaperCreateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPaperCreate(PaperCreateArg, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPaperCreate(PaperCreateArg, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(Dropbox.Api.Files.PaperCreateArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPaperCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4665
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the paper create route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPaperCreate(PaperCreateArg paperCreateArg, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: paperCreateArg
      type: Dropbox.Api.Files.PaperCreateArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPaperCreate(paperCreateArg As PaperCreateArg, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream)
  id: PaperCreateAsync(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PaperCreateAsync(String, ImportFormat, System.IO.Stream)
  nameWithType: FilesUserRoutes.PaperCreateAsync(String, ImportFormat, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync(System.String, Dropbox.Api.Files.ImportFormat, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PaperCreateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4685
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Creates a new Paper doc with the provided content.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperCreateResult> PaperCreateAsync(string path, ImportFormat importFormat, System.IO.Stream body)
    parameters:
    - id: path
      type: System.String
      description: >-
        The fully qualified path to the location in the user&apos;s Dropbox

        where the Paper Doc should be created. This should include the document&apos;s title and

        end with .paper.
    - id: importFormat
      type: Dropbox.Api.Files.ImportFormat
      description: The format of the provided data.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperCreateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PaperCreateAsync(path As String, importFormat As ImportFormat, body As System.IO.Stream) As System.Threading.Tasks.Task(Of PaperCreateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginPaperCreate(System.String,Dropbox.Api.Files.ImportFormat,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPaperCreate(String, ImportFormat, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPaperCreate(String, ImportFormat, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate(System.String, Dropbox.Api.Files.ImportFormat, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPaperCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4708
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the paper create route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPaperCreate(string path, ImportFormat importFormat, System.IO.Stream body, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        The fully qualified path to the location in the user&apos;s Dropbox

        where the Paper Doc should be created. This should include the document&apos;s title and

        end with .paper.
    - id: importFormat
      type: Dropbox.Api.Files.ImportFormat
      description: The format of the provided data.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPaperCreate(path As String, importFormat As ImportFormat, body As System.IO.Stream, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate(System.IAsyncResult)
  id: EndPaperCreate(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPaperCreate(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndPaperCreate(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndPaperCreate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4730
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the paper create route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public PaperCreateResult EndPaperCreate(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.PaperCreateResult
      description: The response to the send request
    content.vb: Public Function EndPaperCreate(asyncResult As System.IAsyncResult) As PaperCreateResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperCreateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream)
  id: PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PaperUpdateAsync(PaperUpdateArg, System.IO.Stream)
  nameWithType: FilesUserRoutes.PaperUpdateAsync(PaperUpdateArg, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(Dropbox.Api.Files.PaperUpdateArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PaperUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4751
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Updates an existing Paper doc with the provided content.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperUpdateResult> PaperUpdateAsync(PaperUpdateArg paperUpdateArg, System.IO.Stream body)
    parameters:
    - id: paperUpdateArg
      type: Dropbox.Api.Files.PaperUpdateArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperUpdateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PaperUpdateAsync(paperUpdateArg As PaperUpdateArg, body As System.IO.Stream) As System.Threading.Tasks.Task(Of PaperUpdateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperUpdateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPaperUpdate(PaperUpdateArg, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPaperUpdate(PaperUpdateArg, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(Dropbox.Api.Files.PaperUpdateArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPaperUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4766
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the paper update route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPaperUpdate(PaperUpdateArg paperUpdateArg, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: paperUpdateArg
      type: Dropbox.Api.Files.PaperUpdateArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPaperUpdate(paperUpdateArg As PaperUpdateArg, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream)
  id: PaperUpdateAsync(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PaperUpdateAsync(String, ImportFormat, PaperDocUpdatePolicy, Nullable<Int64>, System.IO.Stream)
  nameWithType: FilesUserRoutes.PaperUpdateAsync(String, ImportFormat, PaperDocUpdatePolicy, Nullable<Int64>, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String, Dropbox.Api.Files.ImportFormat, Dropbox.Api.Files.PaperDocUpdatePolicy, System.Nullable<System.Int64>, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PaperUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4790
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Updates an existing Paper doc with the provided content.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<PaperUpdateResult> PaperUpdateAsync(string path, ImportFormat importFormat, PaperDocUpdatePolicy docUpdatePolicy, long? paperRevision = null, System.IO.Stream body = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        Path in the user&apos;s Dropbox to update. The path must correspond

        to a Paper doc or an error will be returned.
    - id: importFormat
      type: Dropbox.Api.Files.ImportFormat
      description: The format of the provided data.
    - id: docUpdatePolicy
      type: Dropbox.Api.Files.PaperDocUpdatePolicy
      description: >-
        How the provided content should be applied to the

        doc.
    - id: paperRevision
      type: System.Nullable{System.Int64}
      description: >-
        The latest doc revision. Required when

        doc_update_policy is update. This value must match the current revision of the doc

        or error revision_mismatch will be returned.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperUpdateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PaperUpdateAsync(path As String, importFormat As ImportFormat, docUpdatePolicy As PaperDocUpdatePolicy, paperRevision As Long? = Nothing, body As System.IO.Stream = Nothing) As System.Threading.Tasks.Task(Of PaperUpdateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperUpdateError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.PaperUpdateAsync(String, ImportFormat, PaperDocUpdatePolicy, Nullable(Of Int64), System.IO.Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync(System.String, Dropbox.Api.Files.ImportFormat, Dropbox.Api.Files.PaperDocUpdatePolicy, System.Nullable(Of System.Int64), System.IO.Stream)
  name.vb: PaperUpdateAsync(String, ImportFormat, PaperDocUpdatePolicy, Nullable(Of Int64), System.IO.Stream)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginPaperUpdate(System.String,Dropbox.Api.Files.ImportFormat,Dropbox.Api.Files.PaperDocUpdatePolicy,System.Nullable{System.Int64},System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPaperUpdate(String, ImportFormat, PaperDocUpdatePolicy, Nullable<Int64>, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPaperUpdate(String, ImportFormat, PaperDocUpdatePolicy, Nullable<Int64>, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String, Dropbox.Api.Files.ImportFormat, Dropbox.Api.Files.PaperDocUpdatePolicy, System.Nullable<System.Int64>, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPaperUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4821
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the paper update route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPaperUpdate(string path, ImportFormat importFormat, PaperDocUpdatePolicy docUpdatePolicy, long? paperRevision = null, System.IO.Stream body = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        Path in the user&apos;s Dropbox to update. The path must correspond

        to a Paper doc or an error will be returned.
    - id: importFormat
      type: Dropbox.Api.Files.ImportFormat
      description: The format of the provided data.
    - id: docUpdatePolicy
      type: Dropbox.Api.Files.PaperDocUpdatePolicy
      description: >-
        How the provided content should be applied to the

        doc.
    - id: paperRevision
      type: System.Nullable{System.Int64}
      description: >-
        The latest doc revision. Required when

        doc_update_policy is update. This value must match the current revision of the doc

        or error revision_mismatch will be returned.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPaperUpdate(path As String, importFormat As ImportFormat, docUpdatePolicy As PaperDocUpdatePolicy, paperRevision As Long? = Nothing, body As System.IO.Stream = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate*
  nameWithType.vb: FilesUserRoutes.BeginPaperUpdate(String, ImportFormat, PaperDocUpdatePolicy, Nullable(Of Int64), System.IO.Stream, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate(System.String, Dropbox.Api.Files.ImportFormat, Dropbox.Api.Files.PaperDocUpdatePolicy, System.Nullable(Of System.Int64), System.IO.Stream, System.AsyncCallback, System.Object)
  name.vb: BeginPaperUpdate(String, ImportFormat, PaperDocUpdatePolicy, Nullable(Of Int64), System.IO.Stream, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate(System.IAsyncResult)
  id: EndPaperUpdate(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPaperUpdate(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndPaperUpdate(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndPaperUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4847
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the paper update route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public PaperUpdateResult EndPaperUpdate(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.PaperUpdateResult
      description: The response to the send request
    content.vb: Public Function EndPaperUpdate(asyncResult As System.IAsyncResult) As PaperUpdateResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.PaperUpdateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  id: PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PermanentlyDeleteAsync(DeleteArg)
  nameWithType: FilesUserRoutes.PermanentlyDeleteAsync(DeleteArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(Dropbox.Api.Files.DeleteArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PermanentlyDeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4870
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Permanently delete the file or folder at a given path (see\nhttps://www.dropbox.com/en/help/40).</p>\n<p>If the given file or folder is not yet deleted, this route will first delete\nit. It is possible for this route to successfully delete, then fail to permanently\ndelete.</p>\n<p>Note: This endpoint is only available for Dropbox Business apps.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PermanentlyDeleteAsync(DeleteArg deleteArg)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PermanentlyDeleteAsync(deleteArg As DeleteArg) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  id: BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPermanentlyDelete(DeleteArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPermanentlyDelete(DeleteArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(Dropbox.Api.Files.DeleteArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPermanentlyDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4884
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the permanently delete route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPermanentlyDelete(DeleteArg deleteArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: deleteArg
      type: Dropbox.Api.Files.DeleteArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPermanentlyDelete(deleteArg As DeleteArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(System.String,System.String)
  id: PermanentlyDeleteAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PermanentlyDeleteAsync(String, String)
  nameWithType: FilesUserRoutes.PermanentlyDeleteAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PermanentlyDeleteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4905
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Permanently delete the file or folder at a given path (see\nhttps://www.dropbox.com/en/help/40).</p>\n<p>If the given file or folder is not yet deleted, this route will first delete\nit. It is possible for this route to successfully delete, then fail to permanently\ndelete.</p>\n<p>Note: This endpoint is only available for Dropbox Business apps.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PermanentlyDeleteAsync(string path, string parentRev = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PermanentlyDeleteAsync(path As String, parentRev As String = Nothing) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginPermanentlyDelete(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPermanentlyDelete(String, String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPermanentlyDelete(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPermanentlyDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4925
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the permanently delete route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPermanentlyDelete(string path, string parentRev = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to delete.
    - id: parentRev
      type: System.String
      description: >-
        Perform delete if given &quot;rev&quot; matches the existing file&apos;s

        latest &quot;rev&quot;. This field does not support deleting a folder.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPermanentlyDelete(path As String, parentRev As String = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete(System.IAsyncResult)
  id: EndPermanentlyDelete(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPermanentlyDelete(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndPermanentlyDelete(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndPermanentlyDelete
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4944
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the permanently delete route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndPermanentlyDelete(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndPermanentlyDelete(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.DeleteError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  id: PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesAddAsync(AddPropertiesArg)
  nameWithType: FilesUserRoutes.PropertiesAddAsync(AddPropertiesArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(Dropbox.Api.FileProperties.AddPropertiesArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesAddAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4961
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties add route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PropertiesAddAsync(AddPropertiesArg addPropertiesArg)
    parameters:
    - id: addPropertiesArg
      type: Dropbox.Api.FileProperties.AddPropertiesArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PropertiesAddAsync(addPropertiesArg As AddPropertiesArg) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.AddPropertiesError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesAdd(AddPropertiesArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesAdd(AddPropertiesArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(Dropbox.Api.FileProperties.AddPropertiesArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4976
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties add route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesAdd(AddPropertiesArg addPropertiesArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: addPropertiesArg
      type: Dropbox.Api.FileProperties.AddPropertiesArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesAdd(addPropertiesArg As AddPropertiesArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  id: PropertiesAddAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesAddAsync(String, System.Collections.Generic.IEnumerable<PropertyGroup>)
  nameWithType: FilesUserRoutes.PropertiesAddAsync(String, System.Collections.Generic.IEnumerable<PropertyGroup>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesAddAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 4994
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties add route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PropertiesAddAsync(string path, System.Collections.Generic.IEnumerable<PropertyGroup> propertyGroups)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: >-
        The property groups which are to be added to a Dropbox

        file. No two groups in the input should  refer to the same template.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PropertiesAddAsync(path As String, propertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroup)) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.AddPropertiesError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.PropertiesAddAsync(String, System.Collections.Generic.IEnumerable(Of PropertyGroup))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup))
  name.vb: PropertiesAddAsync(String, System.Collections.Generic.IEnumerable(Of PropertyGroup))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  id: BeginPropertiesAdd(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesAdd(String, System.Collections.Generic.IEnumerable<PropertyGroup>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesAdd(String, System.Collections.Generic.IEnumerable<PropertyGroup>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5015
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties add route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesAdd(string path, System.Collections.Generic.IEnumerable<PropertyGroup> propertyGroups, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: >-
        The property groups which are to be added to a Dropbox

        file. No two groups in the input should  refer to the same template.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesAdd(path As String, propertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroup), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd*
  nameWithType.vb: FilesUserRoutes.BeginPropertiesAdd(String, System.Collections.Generic.IEnumerable(Of PropertyGroup), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.AsyncCallback, System.Object)
  name.vb: BeginPropertiesAdd(String, System.Collections.Generic.IEnumerable(Of PropertyGroup), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd(System.IAsyncResult)
  id: EndPropertiesAdd(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesAdd(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesAdd(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndPropertiesAdd
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5036
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties add route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndPropertiesAdd(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndPropertiesAdd(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.AddPropertiesError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  id: PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesOverwriteAsync(OverwritePropertyGroupArg)
  nameWithType: FilesUserRoutes.PropertiesOverwriteAsync(OverwritePropertyGroupArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(Dropbox.Api.FileProperties.OverwritePropertyGroupArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesOverwriteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5054
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties overwrite route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PropertiesOverwriteAsync(OverwritePropertyGroupArg overwritePropertyGroupArg)
    parameters:
    - id: overwritePropertyGroupArg
      type: Dropbox.Api.FileProperties.OverwritePropertyGroupArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PropertiesOverwriteAsync(overwritePropertyGroupArg As OverwritePropertyGroupArg) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.InvalidPropertyGroupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesOverwrite(OverwritePropertyGroupArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesOverwrite(OverwritePropertyGroupArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(Dropbox.Api.FileProperties.OverwritePropertyGroupArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesOverwrite
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5069
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties overwrite route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesOverwrite(OverwritePropertyGroupArg overwritePropertyGroupArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: overwritePropertyGroupArg
      type: Dropbox.Api.FileProperties.OverwritePropertyGroupArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesOverwrite(overwritePropertyGroupArg As OverwritePropertyGroupArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  id: PropertiesOverwriteAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesOverwriteAsync(String, System.Collections.Generic.IEnumerable<PropertyGroup>)
  nameWithType: FilesUserRoutes.PropertiesOverwriteAsync(String, System.Collections.Generic.IEnumerable<PropertyGroup>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesOverwriteAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5087
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties overwrite route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PropertiesOverwriteAsync(string path, System.Collections.Generic.IEnumerable<PropertyGroup> propertyGroups)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: >-
        The property groups &quot;snapshot&quot; updates to force apply.

        No two groups in the input should  refer to the same template.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PropertiesOverwriteAsync(path As String, propertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroup)) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.InvalidPropertyGroupError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.PropertiesOverwriteAsync(String, System.Collections.Generic.IEnumerable(Of PropertyGroup))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup))
  name.vb: PropertiesOverwriteAsync(String, System.Collections.Generic.IEnumerable(Of PropertyGroup))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  id: BeginPropertiesOverwrite(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesOverwrite(String, System.Collections.Generic.IEnumerable<PropertyGroup>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesOverwrite(String, System.Collections.Generic.IEnumerable<PropertyGroup>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesOverwrite
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5108
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties overwrite route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesOverwrite(string path, System.Collections.Generic.IEnumerable<PropertyGroup> propertyGroups, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: >-
        The property groups &quot;snapshot&quot; updates to force apply.

        No two groups in the input should  refer to the same template.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesOverwrite(path As String, propertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroup), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite*
  nameWithType.vb: FilesUserRoutes.BeginPropertiesOverwrite(String, System.Collections.Generic.IEnumerable(Of PropertyGroup), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.AsyncCallback, System.Object)
  name.vb: BeginPropertiesOverwrite(String, System.Collections.Generic.IEnumerable(Of PropertyGroup), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite(System.IAsyncResult)
  id: EndPropertiesOverwrite(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesOverwrite(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesOverwrite(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndPropertiesOverwrite
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5129
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties overwrite route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndPropertiesOverwrite(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndPropertiesOverwrite(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.InvalidPropertyGroupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  id: PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesRemoveAsync(RemovePropertiesArg)
  nameWithType: FilesUserRoutes.PropertiesRemoveAsync(RemovePropertiesArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(Dropbox.Api.FileProperties.RemovePropertiesArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesRemoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5147
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties remove route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PropertiesRemoveAsync(RemovePropertiesArg removePropertiesArg)
    parameters:
    - id: removePropertiesArg
      type: Dropbox.Api.FileProperties.RemovePropertiesArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PropertiesRemoveAsync(removePropertiesArg As RemovePropertiesArg) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.RemovePropertiesError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesRemove(RemovePropertiesArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesRemove(RemovePropertiesArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(Dropbox.Api.FileProperties.RemovePropertiesArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5162
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties remove route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesRemove(RemovePropertiesArg removePropertiesArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: removePropertiesArg
      type: Dropbox.Api.FileProperties.RemovePropertiesArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesRemove(removePropertiesArg As RemovePropertiesArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: PropertiesRemoveAsync(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesRemoveAsync(String, System.Collections.Generic.IEnumerable<String>)
  nameWithType: FilesUserRoutes.PropertiesRemoveAsync(String, System.Collections.Generic.IEnumerable<String>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesRemoveAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5184
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties remove route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PropertiesRemoveAsync(string path, System.Collections.Generic.IEnumerable<string> propertyTemplateIds)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyTemplateIds
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        A list of identifiers for a template created by

        <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PropertiesRemoveAsync(path As String, propertyTemplateIds As System.Collections.Generic.IEnumerable(Of String)) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.RemovePropertiesError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.PropertiesRemoveAsync(String, System.Collections.Generic.IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: PropertiesRemoveAsync(String, System.Collections.Generic.IEnumerable(Of String))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  id: BeginPropertiesRemove(System.String,System.Collections.Generic.IEnumerable{System.String},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesRemove(String, System.Collections.Generic.IEnumerable<String>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesRemove(String, System.Collections.Generic.IEnumerable<String>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String, System.Collections.Generic.IEnumerable<System.String>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5209
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties remove route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesRemove(string path, System.Collections.Generic.IEnumerable<string> propertyTemplateIds, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: propertyTemplateIds
      type: System.Collections.Generic.IEnumerable{System.String}
      description: >-
        A list of identifiers for a template created by

        <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref>.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesRemove(path As String, propertyTemplateIds As System.Collections.Generic.IEnumerable(Of String), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove*
  nameWithType.vb: FilesUserRoutes.BeginPropertiesRemove(String, System.Collections.Generic.IEnumerable(Of String), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove(System.String, System.Collections.Generic.IEnumerable(Of System.String), System.AsyncCallback, System.Object)
  name.vb: BeginPropertiesRemove(String, System.Collections.Generic.IEnumerable(Of String), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove(System.IAsyncResult)
  id: EndPropertiesRemove(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesRemove(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesRemove(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndPropertiesRemove
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5230
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties remove route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndPropertiesRemove(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndPropertiesRemove(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.RemovePropertiesError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  id: PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesTemplateGetAsync(GetTemplateArg)
  nameWithType: FilesUserRoutes.PropertiesTemplateGetAsync(GetTemplateArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(Dropbox.Api.FileProperties.GetTemplateArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesTemplateGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5249
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties template get route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetTemplateResult> PropertiesTemplateGetAsync(GetTemplateArg getTemplateArg)
    parameters:
    - id: getTemplateArg
      type: Dropbox.Api.FileProperties.GetTemplateArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.GetTemplateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PropertiesTemplateGetAsync(getTemplateArg As GetTemplateArg) As System.Threading.Tasks.Task(Of GetTemplateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesTemplateGet(GetTemplateArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateGet(GetTemplateArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(Dropbox.Api.FileProperties.GetTemplateArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesTemplateGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5264
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties template get route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesTemplateGet(GetTemplateArg getTemplateArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: getTemplateArg
      type: Dropbox.Api.FileProperties.GetTemplateArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesTemplateGet(getTemplateArg As GetTemplateArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(System.String)
  id: PropertiesTemplateGetAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesTemplateGetAsync(String)
  nameWithType: FilesUserRoutes.PropertiesTemplateGetAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesTemplateGetAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5285
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties template get route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<GetTemplateResult> PropertiesTemplateGetAsync(string templateId)
    parameters:
    - id: templateId
      type: System.String
      description: An identifier for template added by route  See <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.GetTemplateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PropertiesTemplateGetAsync(templateId As String) As System.Threading.Tasks.Task(Of GetTemplateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(System.String,System.AsyncCallback,System.Object)
  id: BeginPropertiesTemplateGet(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesTemplateGet(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateGet(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesTemplateGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5306
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties template get route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesTemplateGet(string templateId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: templateId
      type: System.String
      description: An identifier for template added by route  See <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref> or <xref href="Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)" data-throw-if-not-resolved="false"></xref>.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesTemplateGet(templateId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet(System.IAsyncResult)
  id: EndPropertiesTemplateGet(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesTemplateGet(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesTemplateGet(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndPropertiesTemplateGet
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5326
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties template get route\nto complete</p>\n"
  example: []
  syntax:
    content: public GetTemplateResult EndPropertiesTemplateGet(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.FileProperties.GetTemplateResult
      description: The response to the send request
    content.vb: Public Function EndPropertiesTemplateGet(asyncResult As System.IAsyncResult) As GetTemplateResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
  id: PropertiesTemplateListAsync
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesTemplateListAsync()
  nameWithType: FilesUserRoutes.PropertiesTemplateListAsync()
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync()
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesTemplateListAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5346
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties template list route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<ListTemplateResult> PropertiesTemplateListAsync()
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.ListTemplateResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function PropertiesTemplateListAsync As System.Threading.Tasks.Task(Of ListTemplateResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList(System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList(System.AsyncCallback,System.Object)
  id: BeginPropertiesTemplateList(System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesTemplateList(System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateList(System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesTemplateList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5360
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties template list route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesTemplateList(System.AsyncCallback callback, object state = null)
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesTemplateList(callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList(System.IAsyncResult)
  id: EndPropertiesTemplateList(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesTemplateList(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesTemplateList(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndPropertiesTemplateList
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5378
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties template list route\nto complete</p>\n"
  example: []
  syntax:
    content: public ListTemplateResult EndPropertiesTemplateList(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.FileProperties.ListTemplateResult
      description: The response to the send request
    content.vb: Public Function EndPropertiesTemplateList(asyncResult As System.IAsyncResult) As ListTemplateResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.TemplateError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  id: PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesUpdateAsync(UpdatePropertiesArg)
  nameWithType: FilesUserRoutes.PropertiesUpdateAsync(UpdatePropertiesArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(Dropbox.Api.FileProperties.UpdatePropertiesArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5398
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties update route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PropertiesUpdateAsync(UpdatePropertiesArg updatePropertiesArg)
    parameters:
    - id: updatePropertiesArg
      type: Dropbox.Api.FileProperties.UpdatePropertiesArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PropertiesUpdateAsync(updatePropertiesArg As UpdatePropertiesArg) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.UpdatePropertiesError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg,System.AsyncCallback,System.Object)
  id: BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesUpdate(UpdatePropertiesArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesUpdate(UpdatePropertiesArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(Dropbox.Api.FileProperties.UpdatePropertiesArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5413
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties update route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesUpdate(UpdatePropertiesArg updatePropertiesArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: updatePropertiesArg
      type: Dropbox.Api.FileProperties.UpdatePropertiesArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesUpdate(updatePropertiesArg As UpdatePropertiesArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate})
  id: PropertiesUpdateAsync(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: PropertiesUpdateAsync(String, System.Collections.Generic.IEnumerable<PropertyGroupUpdate>)
  nameWithType: FilesUserRoutes.PropertiesUpdateAsync(String, System.Collections.Generic.IEnumerable<PropertyGroupUpdate>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroupUpdate>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: PropertiesUpdateAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5431
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>The properties update route</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task PropertiesUpdateAsync(string path, System.Collections.Generic.IEnumerable<PropertyGroupUpdate> updatePropertyGroups)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: updatePropertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate}
      description: >-
        The property groups &quot;delta&quot; updates to

        apply.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function PropertiesUpdateAsync(path As String, updatePropertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroupUpdate)) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.UpdatePropertiesError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.PropertiesUpdateAsync(String, System.Collections.Generic.IEnumerable(Of PropertyGroupUpdate))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroupUpdate))
  name.vb: PropertiesUpdateAsync(String, System.Collections.Generic.IEnumerable(Of PropertyGroupUpdate))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate},System.AsyncCallback,System.Object)
  id: BeginPropertiesUpdate(System.String,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginPropertiesUpdate(String, System.Collections.Generic.IEnumerable<PropertyGroupUpdate>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginPropertiesUpdate(String, System.Collections.Generic.IEnumerable<PropertyGroupUpdate>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroupUpdate>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginPropertiesUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5452
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the properties update route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginPropertiesUpdate(string path, System.Collections.Generic.IEnumerable<PropertyGroupUpdate> updatePropertyGroups, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: A unique identifier for the file or folder.
    - id: updatePropertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate}
      description: >-
        The property groups &quot;delta&quot; updates to

        apply.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginPropertiesUpdate(path As String, updatePropertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroupUpdate), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate*
  nameWithType.vb: FilesUserRoutes.BeginPropertiesUpdate(String, System.Collections.Generic.IEnumerable(Of PropertyGroupUpdate), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate(System.String, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroupUpdate), System.AsyncCallback, System.Object)
  name.vb: BeginPropertiesUpdate(String, System.Collections.Generic.IEnumerable(Of PropertyGroupUpdate), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate(System.IAsyncResult)
  id: EndPropertiesUpdate(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndPropertiesUpdate(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndPropertiesUpdate(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndPropertiesUpdate
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5473
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the properties update route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndPropertiesUpdate(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndPropertiesUpdate(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.FileProperties.UpdatePropertiesError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(Dropbox.Api.Files.RestoreArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(Dropbox.Api.Files.RestoreArg)
  id: RestoreAsync(Dropbox.Api.Files.RestoreArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: RestoreAsync(RestoreArg)
  nameWithType: FilesUserRoutes.RestoreAsync(RestoreArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(Dropbox.Api.Files.RestoreArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: RestoreAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5491
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Restore a specific revision of a file to the given path.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FileMetadata> RestoreAsync(RestoreArg restoreArg)
    parameters:
    - id: restoreArg
      type: Dropbox.Api.Files.RestoreArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function RestoreAsync(restoreArg As RestoreArg) As System.Threading.Tasks.Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RestoreError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(Dropbox.Api.Files.RestoreArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(Dropbox.Api.Files.RestoreArg,System.AsyncCallback,System.Object)
  id: BeginRestore(Dropbox.Api.Files.RestoreArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginRestore(RestoreArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginRestore(RestoreArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(Dropbox.Api.Files.RestoreArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginRestore
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5505
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the restore route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginRestore(RestoreArg restoreArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: restoreArg
      type: Dropbox.Api.Files.RestoreArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginRestore(restoreArg As RestoreArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(System.String,System.String)
  id: RestoreAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: RestoreAsync(String, String)
  nameWithType: FilesUserRoutes.RestoreAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: RestoreAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5521
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Restore a specific revision of a file to the given path.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FileMetadata> RestoreAsync(string path, string rev)
    parameters:
    - id: path
      type: System.String
      description: The path to save the restored file.
    - id: rev
      type: System.String
      description: The revision to restore.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function RestoreAsync(path As String, rev As String) As System.Threading.Tasks.Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RestoreError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginRestore(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginRestore(String, String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginRestore(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginRestore
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5540
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the restore route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginRestore(string path, string rev, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path to save the restored file.
    - id: rev
      type: System.String
      description: The revision to restore.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginRestore(path As String, rev As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore(System.IAsyncResult)
  id: EndRestore(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndRestore(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndRestore(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndRestore
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5560
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the restore route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public FileMetadata EndRestore(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FileMetadata
      description: The response to the send request
    content.vb: Public Function EndRestore(asyncResult As System.IAsyncResult) As FileMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.RestoreError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  id: SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SaveUrlAsync(SaveUrlArg)
  nameWithType: FilesUserRoutes.SaveUrlAsync(SaveUrlArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SaveUrlAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5583
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Save the data from a specified URL into a file in user&apos;s Dropbox.</p>\n<p>Note that the transfer from the URL must complete within 5 minutes, or the\noperation will time out and the job will fail.</p>\n<p>If the given path already exists, the file will be renamed to avoid the\nconflict (e.g. myfile (1).txt).</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SaveUrlResult> SaveUrlAsync(SaveUrlArg saveUrlArg)
    parameters:
    - id: saveUrlArg
      type: Dropbox.Api.Files.SaveUrlArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SaveUrlAsync(saveUrlArg As SaveUrlArg) As System.Threading.Tasks.Task(Of SaveUrlResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveUrlError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg,System.AsyncCallback,System.Object)
  id: BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSaveUrl(SaveUrlArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSaveUrl(SaveUrlArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(Dropbox.Api.Files.SaveUrlArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSaveUrl
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5597
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the save url route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSaveUrl(SaveUrlArg saveUrlArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: saveUrlArg
      type: Dropbox.Api.Files.SaveUrlArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSaveUrl(saveUrlArg As SaveUrlArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(System.String,System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(System.String,System.String)
  id: SaveUrlAsync(System.String,System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SaveUrlAsync(String, String)
  nameWithType: FilesUserRoutes.SaveUrlAsync(String, String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SaveUrlAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5617
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Save the data from a specified URL into a file in user&apos;s Dropbox.</p>\n<p>Note that the transfer from the URL must complete within 5 minutes, or the\noperation will time out and the job will fail.</p>\n<p>If the given path already exists, the file will be renamed to avoid the\nconflict (e.g. myfile (1).txt).</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SaveUrlResult> SaveUrlAsync(string path, string url)
    parameters:
    - id: path
      type: System.String
      description: The path in Dropbox where the URL will be saved to.
    - id: url
      type: System.String
      description: The URL to be saved.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SaveUrlAsync(path As String, url As String) As System.Threading.Tasks.Task(Of SaveUrlResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveUrlError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(System.String,System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(System.String,System.String,System.AsyncCallback,System.Object)
  id: BeginSaveUrl(System.String,System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSaveUrl(String, String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSaveUrl(String, String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl(System.String, System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSaveUrl
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5636
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the save url route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSaveUrl(string path, string url, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: The path in Dropbox where the URL will be saved to.
    - id: url
      type: System.String
      description: The URL to be saved.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSaveUrl(path As String, url As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl(System.IAsyncResult)
  id: EndSaveUrl(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSaveUrl(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndSaveUrl(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndSaveUrl
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5656
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the save url route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public SaveUrlResult EndSaveUrl(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SaveUrlResult
      description: The response to the send request
    content.vb: Public Function EndSaveUrl(asyncResult As System.IAsyncResult) As SaveUrlResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SaveUrlError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  id: SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SaveUrlCheckJobStatusAsync(PollArg)
  nameWithType: FilesUserRoutes.SaveUrlCheckJobStatusAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SaveUrlCheckJobStatusAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5677
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Check the status of a <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)\" data-throw-if-not-resolved=\"false\"></xref> job.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SaveUrlJobStatus> SaveUrlCheckJobStatusAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SaveUrlCheckJobStatusAsync(pollArg As PollArg) As System.Threading.Tasks.Task(Of SaveUrlJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSaveUrlCheckJobStatus(PollArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSaveUrlCheckJobStatus(PollArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSaveUrlCheckJobStatus
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5691
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the save url check job status route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSaveUrlCheckJobStatus(PollArg pollArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSaveUrlCheckJobStatus(pollArg As PollArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(System.String)
  id: SaveUrlCheckJobStatusAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SaveUrlCheckJobStatusAsync(String)
  nameWithType: FilesUserRoutes.SaveUrlCheckJobStatusAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SaveUrlCheckJobStatusAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5709
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Check the status of a <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)\" data-throw-if-not-resolved=\"false\"></xref> job.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SaveUrlJobStatus> SaveUrlCheckJobStatusAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SaveUrlCheckJobStatusAsync(asyncJobId As String) As System.Threading.Tasks.Task(Of SaveUrlJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(System.String,System.AsyncCallback,System.Object)
  id: BeginSaveUrlCheckJobStatus(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSaveUrlCheckJobStatus(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSaveUrlCheckJobStatus(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSaveUrlCheckJobStatus
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5726
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the save url check job status route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSaveUrlCheckJobStatus(string asyncJobId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSaveUrlCheckJobStatus(asyncJobId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus(System.IAsyncResult)
  id: EndSaveUrlCheckJobStatus(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSaveUrlCheckJobStatus(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndSaveUrlCheckJobStatus(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndSaveUrlCheckJobStatus
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5745
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the save url check job status\nroute to complete</p>\n"
  example: []
  syntax:
    content: public SaveUrlJobStatus EndSaveUrlCheckJobStatus(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SaveUrlJobStatus
      description: The response to the send request
    content.vb: Public Function EndSaveUrlCheckJobStatus(asyncResult As System.IAsyncResult) As SaveUrlJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(Dropbox.Api.Files.SearchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(Dropbox.Api.Files.SearchArg)
  id: SearchAsync(Dropbox.Api.Files.SearchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchAsync(SearchArg)
  nameWithType: FilesUserRoutes.SearchAsync(SearchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(Dropbox.Api.Files.SearchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SearchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5767
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Searches for files and folders.</p>\n<p>Note: Recent changes will be reflected in search results within a few seconds\nand older revisions of existing files may still match your query for up to a few\ndays.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SearchResult> SearchAsync(SearchArg searchArg)
    parameters:
    - id: searchArg
      type: Dropbox.Api.Files.SearchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchAsync(searchArg As SearchArg) As System.Threading.Tasks.Task(Of SearchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(Dropbox.Api.Files.SearchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(Dropbox.Api.Files.SearchArg,System.AsyncCallback,System.Object)
  id: BeginSearch(Dropbox.Api.Files.SearchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearch(SearchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearch(SearchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(Dropbox.Api.Files.SearchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSearch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5782
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSearch(SearchArg searchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: searchArg
      type: Dropbox.Api.Files.SearchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearch(searchArg As SearchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode)
  id: SearchAsync(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchAsync(String, String, UInt64, UInt64, SearchMode)
  nameWithType: FilesUserRoutes.SearchAsync(String, String, UInt64, UInt64, SearchMode)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync(System.String, System.String, System.UInt64, System.UInt64, Dropbox.Api.Files.SearchMode)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SearchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5812
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Searches for files and folders.</p>\n<p>Note: Recent changes will be reflected in search results within a few seconds\nand older revisions of existing files may still match your query for up to a few\ndays.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SearchResult> SearchAsync(string path, string query, ulong start = null, ulong maxResults = null, SearchMode mode = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        The path in the user&apos;s Dropbox to search. Should probably be a

        folder.
    - id: query
      type: System.String
      description: >-
        The string to search for. Query string may be rewritten to

        improve relevance of results. The string is split on spaces into multiple tokens.

        For file name searching, the last token is used for prefix matching (i.e. &quot;bat c&quot;

        matches &quot;bat cave&quot; but not &quot;batman car&quot;).
    - id: start
      type: System.UInt64
      description: >-
        The starting index within the search results (used for

        paging).
    - id: maxResults
      type: System.UInt64
      description: The maximum number of search results to return.
    - id: mode
      type: Dropbox.Api.Files.SearchMode
      description: >-
        The search mode (filename, filename_and_content, or

        deleted_filename). Note that searching file content is only available for Dropbox

        Business accounts.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchAsync(path As String, query As String, start As ULong = Nothing, maxResults As ULong = Nothing, mode As SearchMode = Nothing) As System.Threading.Tasks.Task(Of SearchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode,System.AsyncCallback,System.Object)
  id: BeginSearch(System.String,System.String,System.UInt64,System.UInt64,Dropbox.Api.Files.SearchMode,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearch(String, String, UInt64, UInt64, SearchMode, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearch(String, String, UInt64, UInt64, SearchMode, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch(System.String, System.String, System.UInt64, System.UInt64, Dropbox.Api.Files.SearchMode, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSearch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5848
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSearch(string path, string query, ulong start = null, ulong maxResults = null, SearchMode mode = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: >-
        The path in the user&apos;s Dropbox to search. Should probably be a

        folder.
    - id: query
      type: System.String
      description: >-
        The string to search for. Query string may be rewritten to

        improve relevance of results. The string is split on spaces into multiple tokens.

        For file name searching, the last token is used for prefix matching (i.e. &quot;bat c&quot;

        matches &quot;bat cave&quot; but not &quot;batman car&quot;).
    - id: start
      type: System.UInt64
      description: >-
        The starting index within the search results (used for

        paging).
    - id: maxResults
      type: System.UInt64
      description: The maximum number of search results to return.
    - id: mode
      type: Dropbox.Api.Files.SearchMode
      description: >-
        The search mode (filename, filename_and_content, or

        deleted_filename). Note that searching file content is only available for Dropbox

        Business accounts.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearch(path As String, query As String, start As ULong = Nothing, maxResults As ULong = Nothing, mode As SearchMode = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch(System.IAsyncResult)
  id: EndSearch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSearch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndSearch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndSearch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5875
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the search route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public SearchResult EndSearch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SearchResult
      description: The response to the send request
    content.vb: Public Function EndSearch(asyncResult As System.IAsyncResult) As SearchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  id: SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchV2Async(SearchV2Arg)
  nameWithType: FilesUserRoutes.SearchV2Async(SearchV2Arg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SearchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5902
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Searches for files and folders.</p>\n<p>Note: <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>\nalong with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> can only\nbe used to retrieve a maximum of 10,000 matches.</p>\n<p>Recent changes may not immediately be reflected in search results due to a\nshort delay in indexing. Duplicate results may be returned across pages. Some\nresults may not be returned.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SearchV2Result> SearchV2Async(SearchV2Arg searchV2Arg)
    parameters:
    - id: searchV2Arg
      type: Dropbox.Api.Files.SearchV2Arg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchV2Async(searchV2Arg As SearchV2Arg) As System.Threading.Tasks.Task(Of SearchV2Result)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(Dropbox.Api.Files.SearchV2Arg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(Dropbox.Api.Files.SearchV2Arg,System.AsyncCallback,System.Object)
  id: BeginSearchV2(Dropbox.Api.Files.SearchV2Arg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearchV2(SearchV2Arg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearchV2(SearchV2Arg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(Dropbox.Api.Files.SearchV2Arg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSearchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5916
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSearchV2(SearchV2Arg searchV2Arg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: searchV2Arg
      type: Dropbox.Api.Files.SearchV2Arg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearchV2(searchV2Arg As SearchV2Arg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean})
  id: SearchV2Async(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchV2Async(String, SearchOptions, SearchMatchFieldOptions, Nullable<Boolean>)
  nameWithType: FilesUserRoutes.SearchV2Async(String, SearchOptions, SearchMatchFieldOptions, Nullable<Boolean>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String, Dropbox.Api.Files.SearchOptions, Dropbox.Api.Files.SearchMatchFieldOptions, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SearchV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5943
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Searches for files and folders.</p>\n<p>Note: <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>\nalong with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> can only\nbe used to retrieve a maximum of 10,000 matches.</p>\n<p>Recent changes may not immediately be reflected in search results due to a\nshort delay in indexing. Duplicate results may be returned across pages. Some\nresults may not be returned.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SearchV2Result> SearchV2Async(string query, SearchOptions options = null, SearchMatchFieldOptions matchFieldOptions = null, bool? includeHighlights = null)
    parameters:
    - id: query
      type: System.String
      description: >-
        The string to search for. May match across multiple fields

        based on the request arguments.
    - id: options
      type: Dropbox.Api.Files.SearchOptions
      description: Options for more targeted search results.
    - id: matchFieldOptions
      type: Dropbox.Api.Files.SearchMatchFieldOptions
      description: Options for search results match fields.
    - id: includeHighlights
      type: System.Nullable{System.Boolean}
      description: >-
        Deprecated and moved this option to

        SearchMatchFieldOptions.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchV2Async(query As String, options As SearchOptions = Nothing, matchFieldOptions As SearchMatchFieldOptions = Nothing, includeHighlights As Boolean? = Nothing) As System.Threading.Tasks.Task(Of SearchV2Result)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.SearchV2Async(String, SearchOptions, SearchMatchFieldOptions, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(System.String, Dropbox.Api.Files.SearchOptions, Dropbox.Api.Files.SearchMatchFieldOptions, System.Nullable(Of System.Boolean))
  name.vb: SearchV2Async(String, SearchOptions, SearchMatchFieldOptions, Nullable(Of Boolean))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  id: BeginSearchV2(System.String,Dropbox.Api.Files.SearchOptions,Dropbox.Api.Files.SearchMatchFieldOptions,System.Nullable{System.Boolean},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearchV2(String, SearchOptions, SearchMatchFieldOptions, Nullable<Boolean>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearchV2(String, SearchOptions, SearchMatchFieldOptions, Nullable<Boolean>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String, Dropbox.Api.Files.SearchOptions, Dropbox.Api.Files.SearchMatchFieldOptions, System.Nullable<System.Boolean>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSearchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5970
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSearchV2(string query, SearchOptions options = null, SearchMatchFieldOptions matchFieldOptions = null, bool? includeHighlights = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: query
      type: System.String
      description: >-
        The string to search for. May match across multiple fields

        based on the request arguments.
    - id: options
      type: Dropbox.Api.Files.SearchOptions
      description: Options for more targeted search results.
    - id: matchFieldOptions
      type: Dropbox.Api.Files.SearchMatchFieldOptions
      description: Options for search results match fields.
    - id: includeHighlights
      type: System.Nullable{System.Boolean}
      description: >-
        Deprecated and moved this option to

        SearchMatchFieldOptions.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearchV2(query As String, options As SearchOptions = Nothing, matchFieldOptions As SearchMatchFieldOptions = Nothing, includeHighlights As Boolean? = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2*
  nameWithType.vb: FilesUserRoutes.BeginSearchV2(String, SearchOptions, SearchMatchFieldOptions, Nullable(Of Boolean), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2(System.String, Dropbox.Api.Files.SearchOptions, Dropbox.Api.Files.SearchMatchFieldOptions, System.Nullable(Of System.Boolean), System.AsyncCallback, System.Object)
  name.vb: BeginSearchV2(String, SearchOptions, SearchMatchFieldOptions, Nullable(Of Boolean), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2(System.IAsyncResult)
  id: EndSearchV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSearchV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndSearchV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndSearchV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 5994
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the search route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public SearchV2Result EndSearchV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SearchV2Result
      description: The response to the send request
    content.vb: Public Function EndSearchV2(asyncResult As System.IAsyncResult) As SearchV2Result
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  id: SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchContinueV2Async(SearchV2ContinueArg)
  nameWithType: FilesUserRoutes.SearchContinueV2Async(SearchV2ContinueArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SearchContinueV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6021
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Fetches the next page of search results returned from <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Note: <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>\nalong with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> can only\nbe used to retrieve a maximum of 10,000 matches.</p>\n<p>Recent changes may not immediately be reflected in search results due to a\nshort delay in indexing. Duplicate results may be returned across pages. Some\nresults may not be returned.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SearchV2Result> SearchContinueV2Async(SearchV2ContinueArg searchV2ContinueArg)
    parameters:
    - id: searchV2ContinueArg
      type: Dropbox.Api.Files.SearchV2ContinueArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchContinueV2Async(searchV2ContinueArg As SearchV2ContinueArg) As System.Threading.Tasks.Task(Of SearchV2Result)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg,System.AsyncCallback,System.Object)
  id: BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearchContinueV2(SearchV2ContinueArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearchContinueV2(SearchV2ContinueArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(Dropbox.Api.Files.SearchV2ContinueArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSearchContinueV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6035
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search continue route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSearchContinueV2(SearchV2ContinueArg searchV2ContinueArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: searchV2ContinueArg
      type: Dropbox.Api.Files.SearchV2ContinueArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearchContinueV2(searchV2ContinueArg As SearchV2ContinueArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(System.String)
  id: SearchContinueV2Async(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: SearchContinueV2Async(String)
  nameWithType: FilesUserRoutes.SearchContinueV2Async(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: SearchContinueV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6060
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Fetches the next page of search results returned from <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Note: <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)\" data-throw-if-not-resolved=\"false\"></xref>\nalong with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)\" data-throw-if-not-resolved=\"false\"></xref> can only\nbe used to retrieve a maximum of 10,000 matches.</p>\n<p>Recent changes may not immediately be reflected in search results due to a\nshort delay in indexing. Duplicate results may be returned across pages. Some\nresults may not be returned.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<SearchV2Result> SearchContinueV2Async(string cursor)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)" data-throw-if-not-resolved="false"></xref>. Used to fetch the

        next page of results.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function SearchContinueV2Async(cursor As String) As System.Threading.Tasks.Task(Of SearchV2Result)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(System.String,System.AsyncCallback,System.Object)
  id: BeginSearchContinueV2(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginSearchContinueV2(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginSearchContinueV2(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginSearchContinueV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6078
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the search continue route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginSearchContinueV2(string cursor, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: cursor
      type: System.String
      description: >-
        The cursor returned by your last call to <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)" data-throw-if-not-resolved="false"></xref>. Used to fetch the

        next page of results.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginSearchContinueV2(cursor As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2(System.IAsyncResult)
  id: EndSearchContinueV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndSearchContinueV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndSearchContinueV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndSearchContinueV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6096
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the search continue route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public SearchV2Result EndSearchContinueV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.SearchV2Result
      description: The response to the send request
    content.vb: Public Function EndSearchContinueV2(asyncResult As System.IAsyncResult) As SearchV2Result
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.SearchError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  id: UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UnlockFileBatchAsync(UnlockFileBatchArg)
  nameWithType: FilesUserRoutes.UnlockFileBatchAsync(UnlockFileBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(Dropbox.Api.Files.UnlockFileBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UnlockFileBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6119
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Unlock the files at the given paths. A locked file can only be unlocked by\nthe lock holder or, if a business account, a team admin. A successful response\nindicates that the file has been unlocked. Returns a list of the unlocked file\npaths and their metadata after this operation.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<LockFileBatchResult> UnlockFileBatchAsync(UnlockFileBatchArg unlockFileBatchArg)
    parameters:
    - id: unlockFileBatchArg
      type: Dropbox.Api.Files.UnlockFileBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UnlockFileBatchAsync(unlockFileBatchArg As UnlockFileBatchArg) As System.Threading.Tasks.Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg,System.AsyncCallback,System.Object)
  id: BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUnlockFileBatch(UnlockFileBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUnlockFileBatch(UnlockFileBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(Dropbox.Api.Files.UnlockFileBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUnlockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6133
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the unlock file batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUnlockFileBatch(UnlockFileBatchArg unlockFileBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: unlockFileBatchArg
      type: Dropbox.Api.Files.UnlockFileBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUnlockFileBatch(unlockFileBatchArg As UnlockFileBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg})
  id: UnlockFileBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UnlockFileBatchAsync(System.Collections.Generic.IEnumerable<UnlockFileArg>)
  nameWithType: FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable<UnlockFileArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UnlockFileArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UnlockFileBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6154
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Unlock the files at the given paths. A locked file can only be unlocked by\nthe lock holder or, if a business account, a team admin. A successful response\nindicates that the file has been unlocked. Returns a list of the unlocked file\npaths and their metadata after this operation.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<LockFileBatchResult> UnlockFileBatchAsync(System.Collections.Generic.IEnumerable<UnlockFileArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be unlocked. Duplicate path arguments in the batch are considered only

        once.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UnlockFileBatchAsync(entries As System.Collections.Generic.IEnumerable(Of UnlockFileArg)) As System.Threading.Tasks.Task(Of LockFileBatchResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable(Of UnlockFileArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UnlockFileArg))
  name.vb: UnlockFileBatchAsync(System.Collections.Generic.IEnumerable(Of UnlockFileArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg},System.AsyncCallback,System.Object)
  id: BeginUnlockFileBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUnlockFileBatch(System.Collections.Generic.IEnumerable<UnlockFileArg>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable<UnlockFileArg>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UnlockFileArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUnlockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6172
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the unlock file batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUnlockFileBatch(System.Collections.Generic.IEnumerable<UnlockFileArg> entries, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg}
      description: >-
        List of &apos;entries&apos;. Each &apos;entry&apos; contains a path of the file

        which will be unlocked. Duplicate path arguments in the batch are considered only

        once.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUnlockFileBatch(entries As System.Collections.Generic.IEnumerable(Of UnlockFileArg), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch*
  nameWithType.vb: FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable(Of UnlockFileArg), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UnlockFileArg), System.AsyncCallback, System.Object)
  name.vb: BeginUnlockFileBatch(System.Collections.Generic.IEnumerable(Of UnlockFileArg), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch(System.IAsyncResult)
  id: EndUnlockFileBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUnlockFileBatch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndUnlockFileBatch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndUnlockFileBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6191
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the unlock file batch route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public LockFileBatchResult EndUnlockFileBatch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.LockFileBatchResult
      description: The response to the send request
    content.vb: Public Function EndUnlockFileBatch(asyncResult As System.IAsyncResult) As LockFileBatchResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.LockFileError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  id: UploadAsync(Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadAsync(CommitInfo, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadAsync(CommitInfo, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6219
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a new file with the contents provided in the request.</p>\n<p>Do not use this to upload a file larger than 150 MB. Instead, create an\nupload session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FileMetadata> UploadAsync(CommitInfo commitInfo, System.IO.Stream body)
    parameters:
    - id: commitInfo
      type: Dropbox.Api.Files.CommitInfo
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadAsync(commitInfo As CommitInfo, body As System.IO.Stream) As System.Threading.Tasks.Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(Dropbox.Api.Files.CommitInfo,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(Dropbox.Api.Files.CommitInfo,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUpload(Dropbox.Api.Files.CommitInfo,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUpload(CommitInfo, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUpload(CommitInfo, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(Dropbox.Api.Files.CommitInfo, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6234
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUpload(CommitInfo commitInfo, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: commitInfo
      type: Dropbox.Api.Files.CommitInfo
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUpload(commitInfo As CommitInfo, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream)
  id: UploadAsync(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadAsync(String, WriteMode, Boolean, Nullable<System.DateTime>, Boolean, System.Collections.Generic.IEnumerable<PropertyGroup>, Boolean, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadAsync(String, WriteMode, Boolean, Nullable<System.DateTime>, Boolean, System.Collections.Generic.IEnumerable<PropertyGroup>, Boolean, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable<System.DateTime>, System.Boolean, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.Boolean, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6278
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Create a new file with the contents provided in the request.</p>\n<p>Do not use this to upload a file larger than 150 MB. Instead, create an\nupload session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FileMetadata> UploadAsync(string path, WriteMode mode = null, bool autorename = false, System.DateTime? clientModified = null, bool mute = false, System.Collections.Generic.IEnumerable<PropertyGroup> propertyGroups = null, bool strictConflict = false, System.IO.Stream body = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to save the file.
    - id: mode
      type: Dropbox.Api.Files.WriteMode
      description: Selects what to do if the file already exists.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, as determined by <code data-dev-comment-type="paramref" class="paramref">mode</code>, have the Dropbox server try to autorename the file to avoid

        conflict.
    - id: clientModified
      type: System.Nullable{System.DateTime}
      description: >-
        The value to store as the <code data-dev-comment-type="paramref" class="paramref">clientModified</code> timestamp. Dropbox automatically records the time at which

        the file was written to the Dropbox servers. It can also record an additional

        timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of

        when the file was actually created or modified.
    - id: mute
      type: System.Boolean
      description: >-
        Normally, users are made aware of any file modifications in

        their Dropbox account via notifications in the client software. If <code>true</code>,

        this tells the clients that this modification shouldn&apos;t result in a user

        notification.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: List of custom properties to add to file.
    - id: strictConflict
      type: System.Boolean
      description: >-
        Be more strict about how each <xref href="Dropbox.Api.Files.WriteMode" data-throw-if-not-resolved="false"></xref>

        detects conflict. For example, always return a conflict error when <code data-dev-comment-type="paramref" class="paramref">mode</code> = <xref href="Dropbox.Api.Files.WriteMode.Update" data-throw-if-not-resolved="false"></xref> and the given

        &quot;rev&quot; doesn&apos;t match the existing file&apos;s &quot;rev&quot;, even if the existing file has been

        deleted. This also forces a conflict even when the target path refers to a file

        with identical contents.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadAsync(path As String, mode As WriteMode = Nothing, autorename As Boolean = False, clientModified As System.DateTime? = Nothing, mute As Boolean = False, propertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroup) = Nothing, strictConflict As Boolean = False, body As System.IO.Stream = Nothing) As System.Threading.Tasks.Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadError" data-throw-if-not-resolved="false"></xref>.
  nameWithType.vb: FilesUserRoutes.UploadAsync(String, WriteMode, Boolean, Nullable(Of System.DateTime), Boolean, System.Collections.Generic.IEnumerable(Of PropertyGroup), Boolean, System.IO.Stream)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable(Of System.DateTime), System.Boolean, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.Boolean, System.IO.Stream)
  name.vb: UploadAsync(String, WriteMode, Boolean, Nullable(Of System.DateTime), Boolean, System.Collections.Generic.IEnumerable(Of PropertyGroup), Boolean, System.IO.Stream)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUpload(System.String,Dropbox.Api.Files.WriteMode,System.Boolean,System.Nullable{System.DateTime},System.Boolean,System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup},System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUpload(String, WriteMode, Boolean, Nullable<System.DateTime>, Boolean, System.Collections.Generic.IEnumerable<PropertyGroup>, Boolean, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUpload(String, WriteMode, Boolean, Nullable<System.DateTime>, Boolean, System.Collections.Generic.IEnumerable<PropertyGroup>, Boolean, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable<System.DateTime>, System.Boolean, System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>, System.Boolean, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6328
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUpload(string path, WriteMode mode = null, bool autorename = false, System.DateTime? clientModified = null, bool mute = false, System.Collections.Generic.IEnumerable<PropertyGroup> propertyGroups = null, bool strictConflict = false, System.IO.Stream body = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: path
      type: System.String
      description: Path in the user&apos;s Dropbox to save the file.
    - id: mode
      type: Dropbox.Api.Files.WriteMode
      description: Selects what to do if the file already exists.
    - id: autorename
      type: System.Boolean
      description: >-
        If there&apos;s a conflict, as determined by <code data-dev-comment-type="paramref" class="paramref">mode</code>, have the Dropbox server try to autorename the file to avoid

        conflict.
    - id: clientModified
      type: System.Nullable{System.DateTime}
      description: >-
        The value to store as the <code data-dev-comment-type="paramref" class="paramref">clientModified</code> timestamp. Dropbox automatically records the time at which

        the file was written to the Dropbox servers. It can also record an additional

        timestamp, provided by Dropbox desktop clients, mobile clients, and API apps of

        when the file was actually created or modified.
    - id: mute
      type: System.Boolean
      description: >-
        Normally, users are made aware of any file modifications in

        their Dropbox account via notifications in the client software. If <code>true</code>,

        this tells the clients that this modification shouldn&apos;t result in a user

        notification.
    - id: propertyGroups
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
      description: List of custom properties to add to file.
    - id: strictConflict
      type: System.Boolean
      description: >-
        Be more strict about how each <xref href="Dropbox.Api.Files.WriteMode" data-throw-if-not-resolved="false"></xref>

        detects conflict. For example, always return a conflict error when <code data-dev-comment-type="paramref" class="paramref">mode</code> = <xref href="Dropbox.Api.Files.WriteMode.Update" data-throw-if-not-resolved="false"></xref> and the given

        &quot;rev&quot; doesn&apos;t match the existing file&apos;s &quot;rev&quot;, even if the existing file has been

        deleted. This also forces a conflict even when the target path refers to a file

        with identical contents.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUpload(path As String, mode As WriteMode = Nothing, autorename As Boolean = False, clientModified As System.DateTime? = Nothing, mute As Boolean = False, propertyGroups As System.Collections.Generic.IEnumerable(Of PropertyGroup) = Nothing, strictConflict As Boolean = False, body As System.IO.Stream = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload*
  nameWithType.vb: FilesUserRoutes.BeginUpload(String, WriteMode, Boolean, Nullable(Of System.DateTime), Boolean, System.Collections.Generic.IEnumerable(Of PropertyGroup), Boolean, System.IO.Stream, System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload(System.String, Dropbox.Api.Files.WriteMode, System.Boolean, System.Nullable(Of System.DateTime), System.Boolean, System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup), System.Boolean, System.IO.Stream, System.AsyncCallback, System.Object)
  name.vb: BeginUpload(String, WriteMode, Boolean, Nullable(Of System.DateTime), Boolean, System.Collections.Generic.IEnumerable(Of PropertyGroup), Boolean, System.IO.Stream, System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload(System.IAsyncResult)
  id: EndUpload(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUpload(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndUpload(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndUpload
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6359
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public FileMetadata EndUpload(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FileMetadata
      description: The response to the send request
    content.vb: Public Function EndUpload(asyncResult As System.IAsyncResult) As FileMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  id: UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionAppendV2Async(UploadSessionAppendArg, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadSessionAppendV2Async(UploadSessionAppendArg, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionAppendV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6387
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Append more data to an upload session.</p>\n<p>When the parameter close is set, this call will close the session.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task UploadSessionAppendV2Async(UploadSessionAppendArg uploadSessionAppendArg, System.IO.Stream body)
    parameters:
    - id: uploadSessionAppendArg
      type: Dropbox.Api.Files.UploadSessionAppendArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function UploadSessionAppendV2Async(uploadSessionAppendArg As UploadSessionAppendArg, body As System.IO.Stream) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionAppendV2(UploadSessionAppendArg, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionAppendV2(UploadSessionAppendArg, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionAppendArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionAppendV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6402
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session append route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionAppendV2(UploadSessionAppendArg uploadSessionAppendArg, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionAppendArg
      type: Dropbox.Api.Files.UploadSessionAppendArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionAppendV2(uploadSessionAppendArg As UploadSessionAppendArg, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.IO.Stream)
  id: UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionAppendV2Async(UploadSessionCursor, Boolean, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadSessionAppendV2Async(UploadSessionCursor, Boolean, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionCursor, System.Boolean, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionAppendV2Async
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6430
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Append more data to an upload session.</p>\n<p>When the parameter close is set, this call will close the session.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task UploadSessionAppendV2Async(UploadSessionCursor cursor, bool close = false, System.IO.Stream body = null)
    parameters:
    - id: cursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: Contains the upload session ID and the offset.
    - id: close
      type: System.Boolean
      description: >-
        If true, the current session will be closed, at which point you

        won&apos;t be able to call <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>

        anymore with the current session.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function UploadSessionAppendV2Async(cursor As UploadSessionCursor, close As Boolean = False, body As System.IO.Stream = Nothing) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor,System.Boolean,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionAppendV2(UploadSessionCursor, Boolean, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionAppendV2(UploadSessionCursor, Boolean, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2(Dropbox.Api.Files.UploadSessionCursor, System.Boolean, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionAppendV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6454
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session append route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionAppendV2(UploadSessionCursor cursor, bool close = false, System.IO.Stream body = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: cursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: Contains the upload session ID and the offset.
    - id: close
      type: System.Boolean
      description: >-
        If true, the current session will be closed, at which point you

        won&apos;t be able to call <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>

        anymore with the current session.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionAppendV2(cursor As UploadSessionCursor, close As Boolean = False, body As System.IO.Stream = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2(System.IAsyncResult)
  id: EndUploadSessionAppendV2(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionAppendV2(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionAppendV2(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndUploadSessionAppendV2
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6475
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session append route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndUploadSessionAppendV2(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndUploadSessionAppendV2(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream)
  id: UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionAppendAsync(UploadSessionCursor, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadSessionAppendAsync(UploadSessionCursor, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(Dropbox.Api.Files.UploadSessionCursor, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionAppendAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6500
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Append more data to an upload session.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task UploadSessionAppendAsync(UploadSessionCursor uploadSessionCursor, System.IO.Stream body)
    parameters:
    - id: uploadSessionCursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function UploadSessionAppendAsync(uploadSessionCursor As UploadSessionCursor, body As System.IO.Stream) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionAppend(UploadSessionCursor, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionAppend(UploadSessionCursor, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(Dropbox.Api.Files.UploadSessionCursor, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionAppend
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6516
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session append route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionAppend(UploadSessionCursor uploadSessionCursor, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionCursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionAppend(uploadSessionCursor As UploadSessionCursor, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(System.String,System.UInt64,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(System.String,System.UInt64,System.IO.Stream)
  id: UploadSessionAppendAsync(System.String,System.UInt64,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionAppendAsync(String, UInt64, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadSessionAppendAsync(String, UInt64, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync(System.String, System.UInt64, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionAppendAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6545
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Append more data to an upload session.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task UploadSessionAppendAsync(string sessionId, ulong offset, System.IO.Stream body)
    parameters:
    - id: sessionId
      type: System.String
      description: The upload session ID (returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>).
    - id: offset
      type: System.UInt64
      description: >-
        Offset in bytes at which data should be appended. We use this

        to make sure upload data isn&apos;t lost or duplicated in the event of a network

        error.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task
      description: The task that represents the asynchronous send operation.
    content.vb: Public Function UploadSessionAppendAsync(sessionId As String, offset As ULong, body As System.IO.Stream) As System.Threading.Tasks.Task
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(System.String,System.UInt64,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(System.String,System.UInt64,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionAppend(System.String,System.UInt64,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionAppend(String, UInt64, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionAppend(String, UInt64, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend(System.String, System.UInt64, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionAppend
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6571
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session append route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionAppend(string sessionId, ulong offset, System.IO.Stream body, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: sessionId
      type: System.String
      description: The upload session ID (returned by <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>).
    - id: offset
      type: System.UInt64
      description: >-
        Offset in bytes at which data should be appended. We use this

        to make sure upload data isn&apos;t lost or duplicated in the event of a network

        error.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionAppend(sessionId As String, offset As ULong, body As System.IO.Stream, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend(System.IAsyncResult)
  id: EndUploadSessionAppend(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionAppend(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionAppend(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndUploadSessionAppend
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6593
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session append route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public void EndUploadSessionAppend(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    content.vb: Public Sub EndUploadSessionAppend(asyncResult As System.IAsyncResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionLookupError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  id: UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishAsync(UploadSessionFinishArg, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadSessionFinishAsync(UploadSessionFinishArg, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionFinishAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6621
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Finish an upload session and save the uploaded data to the given file\npath.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FileMetadata> UploadSessionFinishAsync(UploadSessionFinishArg uploadSessionFinishArg, System.IO.Stream body)
    parameters:
    - id: uploadSessionFinishArg
      type: Dropbox.Api.Files.UploadSessionFinishArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishAsync(uploadSessionFinishArg As UploadSessionFinishArg, body As System.IO.Stream) As System.Threading.Tasks.Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionFinishError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinish(UploadSessionFinishArg, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinish(UploadSessionFinishArg, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionFinishArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionFinish
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6636
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionFinish(UploadSessionFinishArg uploadSessionFinishArg, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionFinishArg
      type: Dropbox.Api.Files.UploadSessionFinishArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinish(uploadSessionFinishArg As UploadSessionFinishArg, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  id: UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishAsync(UploadSessionCursor, CommitInfo, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadSessionFinishAsync(UploadSessionCursor, CommitInfo, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionCursor, Dropbox.Api.Files.CommitInfo, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionFinishAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6663
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Finish an upload session and save the uploaded data to the given file\npath.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<FileMetadata> UploadSessionFinishAsync(UploadSessionCursor cursor, CommitInfo commit, System.IO.Stream body)
    parameters:
    - id: cursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: Contains the upload session ID and the offset.
    - id: commit
      type: Dropbox.Api.Files.CommitInfo
      description: >-
        Contains the path and other optional modifiers for the

        commit.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishAsync(cursor As UploadSessionCursor, commit As CommitInfo, body As System.IO.Stream) As System.Threading.Tasks.Task(Of FileMetadata)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionFinishError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor,Dropbox.Api.Files.CommitInfo,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinish(UploadSessionCursor, CommitInfo, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinish(UploadSessionCursor, CommitInfo, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish(Dropbox.Api.Files.UploadSessionCursor, Dropbox.Api.Files.CommitInfo, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionFinish
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6685
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionFinish(UploadSessionCursor cursor, CommitInfo commit, System.IO.Stream body, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: cursor
      type: Dropbox.Api.Files.UploadSessionCursor
      description: Contains the upload session ID and the offset.
    - id: commit
      type: Dropbox.Api.Files.CommitInfo
      description: >-
        Contains the path and other optional modifiers for the

        commit.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinish(cursor As UploadSessionCursor, commit As CommitInfo, body As System.IO.Stream, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish(System.IAsyncResult)
  id: EndUploadSessionFinish(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionFinish(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionFinish(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndUploadSessionFinish
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6707
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session finish route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public FileMetadata EndUploadSessionFinish(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.FileMetadata
      description: The response to the send request
    content.vb: Public Function EndUploadSessionFinish(asyncResult As System.IAsyncResult) As FileMetadata
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionFinishError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  id: UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchAsync(UploadSessionFinishBatchArg)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchAsync(UploadSessionFinishBatchArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionFinishBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6748
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>This route helps you commit many files at once into a user&apos;s Dropbox. Use\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nto upload file contents. We recommend uploading many files in parallel to increase\nthroughput. Once the file contents have been uploaded, rather than calling <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, use\nthis route to finish all your upload sessions in a single request.</p>\n<p><xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.UploadSessionAppendArg.Close\" data-throw-if-not-resolved=\"false\"></xref> needs to be true for the\nlast <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call.\nThe maximum size of a file one can upload to an upload session is 350 GB.</p>\n<p>This route will return a job_id immediately and do the async commit job in\nbackground. Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the job status.</p>\n<p>For the same account, this route should be executed serially. That means you\nshould not start the next job before current job finishes. We allow up to 1000\nentries in a single request.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<UploadSessionFinishBatchLaunch> UploadSessionFinishBatchAsync(UploadSessionFinishBatchArg uploadSessionFinishBatchArg)
    parameters:
    - id: uploadSessionFinishBatchArg
      type: Dropbox.Api.Files.UploadSessionFinishBatchArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishBatchAsync(uploadSessionFinishBatchArg As UploadSessionFinishBatchArg) As System.Threading.Tasks.Task(Of UploadSessionFinishBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatch(UploadSessionFinishBatchArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatch(UploadSessionFinishBatchArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(Dropbox.Api.Files.UploadSessionFinishBatchArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionFinishBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6762
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionFinishBatch(UploadSessionFinishBatchArg uploadSessionFinishBatchArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionFinishBatchArg
      type: Dropbox.Api.Files.UploadSessionFinishBatchArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinishBatch(uploadSessionFinishBatchArg As UploadSessionFinishBatchArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  id: UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg})
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable<UploadSessionFinishArg>)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable<UploadSessionFinishArg>)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UploadSessionFinishArg>)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionFinishBatchAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6799
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>This route helps you commit many files at once into a user&apos;s Dropbox. Use\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nto upload file contents. We recommend uploading many files in parallel to increase\nthroughput. Once the file contents have been uploaded, rather than calling <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, use\nthis route to finish all your upload sessions in a single request.</p>\n<p><xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.UploadSessionAppendArg.Close\" data-throw-if-not-resolved=\"false\"></xref> needs to be true for the\nlast <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call.\nThe maximum size of a file one can upload to an upload session is 350 GB.</p>\n<p>This route will return a job_id immediately and do the async commit job in\nbackground. Use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)\" data-throw-if-not-resolved=\"false\"></xref> to check the job status.</p>\n<p>For the same account, this route should be executed serially. That means you\nshould not start the next job before current job finishes. We allow up to 1000\nentries in a single request.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<UploadSessionFinishBatchLaunch> UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable<UploadSessionFinishArg> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}
      description: Commit information for each file in the batch.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchLaunch}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishBatchAsync(entries As System.Collections.Generic.IEnumerable(Of UploadSessionFinishArg)) As System.Threading.Tasks.Task(Of UploadSessionFinishBatchLaunch)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync*
  nameWithType.vb: FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable(Of UploadSessionFinishArg))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UploadSessionFinishArg))
  name.vb: UploadSessionFinishBatchAsync(System.Collections.Generic.IEnumerable(Of UploadSessionFinishArg))
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg},System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable<UploadSessionFinishArg>, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable<UploadSessionFinishArg>, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UploadSessionFinishArg>, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionFinishBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6815
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable<UploadSessionFinishArg> entries, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}
      description: Commit information for each file in the batch.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinishBatch(entries As System.Collections.Generic.IEnumerable(Of UploadSessionFinishArg), callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch*
  nameWithType.vb: FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable(Of UploadSessionFinishArg), System.AsyncCallback, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UploadSessionFinishArg), System.AsyncCallback, System.Object)
  name.vb: BeginUploadSessionFinishBatch(System.Collections.Generic.IEnumerable(Of UploadSessionFinishArg), System.AsyncCallback, Object)
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch(System.IAsyncResult)
  id: EndUploadSessionFinishBatch(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionFinishBatch(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatch(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndUploadSessionFinishBatch
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6831
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session finish batch\nroute to complete</p>\n"
  example: []
  syntax:
    content: public UploadSessionFinishBatchLaunch EndUploadSessionFinishBatch(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
      description: The response to the send request
    content.vb: Public Function EndUploadSessionFinishBatch(asyncResult As System.IAsyncResult) As UploadSessionFinishBatchLaunch
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  id: UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchCheckAsync(PollArg)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchCheckAsync(PollArg)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionFinishBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6853
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf success, it returns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<UploadSessionFinishBatchJobStatus> UploadSessionFinishBatchCheckAsync(PollArg pollArg)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishBatchCheckAsync(pollArg As PollArg) As System.Threading.Tasks.Task(Of UploadSessionFinishBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatchCheck(PollArg, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatchCheck(PollArg, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(Dropbox.Api.Async.PollArg, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionFinishBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6868
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch check\nroute.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionFinishBatchCheck(PollArg pollArg, System.AsyncCallback callback, object state = null)
    parameters:
    - id: pollArg
      type: Dropbox.Api.Async.PollArg
      description: The request parameters.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinishBatchCheck(pollArg As PollArg, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(System.String)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(System.String)
  id: UploadSessionFinishBatchCheckAsync(System.String)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionFinishBatchCheckAsync(String)
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchCheckAsync(String)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(System.String)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionFinishBatchCheckAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6887
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Returns the status of an asynchronous job for <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)\" data-throw-if-not-resolved=\"false\"></xref>.\nIf success, it returns list of result for each entry.</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<UploadSessionFinishBatchJobStatus> UploadSessionFinishBatchCheckAsync(string asyncJobId)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchJobStatus}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionFinishBatchCheckAsync(asyncJobId As String) As System.Threading.Tasks.Task(Of UploadSessionFinishBatchJobStatus)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(System.String,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(System.String,System.AsyncCallback,System.Object)
  id: BeginUploadSessionFinishBatchCheck(System.String,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionFinishBatchCheck(String, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatchCheck(String, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck(System.String, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionFinishBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6905
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session finish batch check\nroute.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionFinishBatchCheck(string asyncJobId, System.AsyncCallback callback, object callbackState = null)
    parameters:
    - id: asyncJobId
      type: System.String
      description: >-
        Id of the asynchronous job. This is the value of a

        response returned from the method that launched the job.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionFinishBatchCheck(asyncJobId As String, callback As System.AsyncCallback, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  id: EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndUploadSessionFinishBatchCheck
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6924
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session finish batch\ncheck route to complete</p>\n"
  example: []
  syntax:
    content: public UploadSessionFinishBatchJobStatus EndUploadSessionFinishBatchCheck(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
      description: The response to the send request
    content.vb: Public Function EndUploadSessionFinishBatchCheck(asyncResult As System.IAsyncResult) As UploadSessionFinishBatchJobStatus
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Async.PollError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  id: UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionStartAsync(UploadSessionStartArg, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadSessionStartAsync(UploadSessionStartArg, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionStartAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 6990
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Upload sessions allow you to upload a single file in one or more requests,\nfor example where the size of the file is greater than 150 MB.  This call starts a\nnew upload session with the given data. You can then use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> to\nadd more data and <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> to save\nall the data to a file in Dropbox.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>An upload session can be used for a maximum of 7 days. Attempting to use an\n<xref href=\"Dropbox.Api.Files.UploadSessionStartResult.SessionId\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nmore than 7 days after its creation will return a <xref href=\"Dropbox.Api.Files.UploadSessionLookupError.NotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n<p>By default, upload sessions require you to send content of the file in\nsequential order via consecutive <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> calls.\nFor better performance, you can instead optionally use a <xref href=\"Dropbox.Api.Files.UploadSessionType.Concurrent\" data-throw-if-not-resolved=\"false\"></xref> upload session. To start a\nnew concurrent session, set <xref href=\"Dropbox.Api.Files.UploadSessionStartArg.SessionType\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"Dropbox.Api.Files.UploadSessionType.Concurrent\" data-throw-if-not-resolved=\"false\"></xref>. After that, you can send\nfile data in concurrent <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nrequests. Finally finish the session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>There are couple of constraints with concurrent sessions to make them work.\nYou can not send data with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call,\nonly with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call.\nAlso data uploaded in <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call\nmust be multiple of 4194304 bytes (except for last <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> with\n<xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> to <code>true</code>, that\nmay contain any remaining data).</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<UploadSessionStartResult> UploadSessionStartAsync(UploadSessionStartArg uploadSessionStartArg, System.IO.Stream body)
    parameters:
    - id: uploadSessionStartArg
      type: Dropbox.Api.Files.UploadSessionStartArg
      description: The request parameters
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionStartAsync(uploadSessionStartArg As UploadSessionStartArg, body As System.IO.Stream) As System.Threading.Tasks.Task(Of UploadSessionStartResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionStartError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionStart(UploadSessionStartArg, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionStart(UploadSessionStartArg, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(Dropbox.Api.Files.UploadSessionStartArg, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionStart
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7005
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session start route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionStart(UploadSessionStartArg uploadSessionStartArg, System.IO.Stream body, System.AsyncCallback callback, object state = null)
    parameters:
    - id: uploadSessionStartArg
      type: Dropbox.Api.Files.UploadSessionStartArg
      description: The request parameters.
    - id: body
      type: System.IO.Stream
      description: The content to upload.
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: state
      type: System.Object
      description: >-
        A user provided object that distinguished this send from other

        send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionStart(uploadSessionStartArg As UploadSessionStartArg, body As System.IO.Stream, callback As System.AsyncCallback, state As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.IO.Stream)
  id: UploadSessionStartAsync(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.IO.Stream)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: UploadSessionStartAsync(Boolean, UploadSessionType, System.IO.Stream)
  nameWithType: FilesUserRoutes.UploadSessionStartAsync(Boolean, UploadSessionType, System.IO.Stream)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(System.Boolean, Dropbox.Api.Files.UploadSessionType, System.IO.Stream)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: UploadSessionStartAsync
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7073
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Upload sessions allow you to upload a single file in one or more requests,\nfor example where the size of the file is greater than 150 MB.  This call starts a\nnew upload session with the given data. You can then use <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> to\nadd more data and <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> to save\nall the data to a file in Dropbox.</p>\n<p>A single request should not upload more than 150 MB. The maximum size of a\nfile one can upload to an upload session is 350 GB.</p>\n<p>An upload session can be used for a maximum of 7 days. Attempting to use an\n<xref href=\"Dropbox.Api.Files.UploadSessionStartResult.SessionId\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or\n<xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nmore than 7 days after its creation will return a <xref href=\"Dropbox.Api.Files.UploadSessionLookupError.NotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Calls to this endpoint will count as data transport calls for any Dropbox\nBusiness teams with a limit on the number of data transport calls allowed per\nmonth. For more information, see the <a href=\"https://www.dropbox.com/developers/reference/data-transport-limit\">Data\ntransport limit page</a>.</p>\n<p>By default, upload sessions require you to send content of the file in\nsequential order via consecutive <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> calls.\nFor better performance, you can instead optionally use a <xref href=\"Dropbox.Api.Files.UploadSessionType.Concurrent\" data-throw-if-not-resolved=\"false\"></xref> upload session. To start a\nnew concurrent session, set <xref href=\"Dropbox.Api.Files.UploadSessionStartArg.SessionType\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"Dropbox.Api.Files.UploadSessionType.Concurrent\" data-throw-if-not-resolved=\"false\"></xref>. After that, you can send\nfile data in concurrent <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>\nrequests. Finally finish the session with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>There are couple of constraints with concurrent sessions to make them work.\nYou can not send data with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call,\nonly with <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call.\nAlso data uploaded in <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> call\nmust be multiple of 4194304 bytes (except for last <xref href=\"Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> with\n<xref href=\"Dropbox.Api.Files.UploadSessionStartArg.Close\" data-throw-if-not-resolved=\"false\"></xref> to <code>true</code>, that\nmay contain any remaining data).</p>\n"
  example: []
  syntax:
    content: public System.Threading.Tasks.Task<UploadSessionStartResult> UploadSessionStartAsync(bool close = false, UploadSessionType sessionType = null, System.IO.Stream body = null)
    parameters:
    - id: close
      type: System.Boolean
      description: >-
        If true, the current session will be closed, at which point you

        won&apos;t be able to call <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>

        anymore with the current session.
    - id: sessionType
      type: Dropbox.Api.Files.UploadSessionType
      description: >-
        Type of upload session you want to start. If not

        specified, default is <xref href="Dropbox.Api.Files.UploadSessionType.Sequential" data-throw-if-not-resolved="false"></xref>.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    return:
      type: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartResult}
      description: >-
        The task that represents the asynchronous send operation. The TResult

        parameter contains the response from the server.
    content.vb: Public Function UploadSessionStartAsync(close As Boolean = False, sessionType As UploadSessionType = Nothing, body As System.IO.Stream = Nothing) As System.Threading.Tasks.Task(Of UploadSessionStartResult)
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionStartError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.IO.Stream,System.AsyncCallback,System.Object)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.IO.Stream,System.AsyncCallback,System.Object)
  id: BeginUploadSessionStart(System.Boolean,Dropbox.Api.Files.UploadSessionType,System.IO.Stream,System.AsyncCallback,System.Object)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: BeginUploadSessionStart(Boolean, UploadSessionType, System.IO.Stream, System.AsyncCallback, Object)
  nameWithType: FilesUserRoutes.BeginUploadSessionStart(Boolean, UploadSessionType, System.IO.Stream, System.AsyncCallback, Object)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart(System.Boolean, Dropbox.Api.Files.UploadSessionType, System.IO.Stream, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: BeginUploadSessionStart
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7099
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Begins an asynchronous send to the upload session start route.</p>\n"
  example: []
  syntax:
    content: public System.IAsyncResult BeginUploadSessionStart(bool close = false, UploadSessionType sessionType = null, System.IO.Stream body = null, System.AsyncCallback callback = null, object callbackState = null)
    parameters:
    - id: close
      type: System.Boolean
      description: >-
        If true, the current session will be closed, at which point you

        won&apos;t be able to call <xref href="Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg%2cSystem.IO.Stream)" data-throw-if-not-resolved="false"></xref>

        anymore with the current session.
    - id: sessionType
      type: Dropbox.Api.Files.UploadSessionType
      description: >-
        Type of upload session you want to start. If not

        specified, default is <xref href="Dropbox.Api.Files.UploadSessionType.Sequential" data-throw-if-not-resolved="false"></xref>.
    - id: body
      type: System.IO.Stream
      description: The document to upload
    - id: callback
      type: System.AsyncCallback
      description: >-
        The method to be called when the asynchronous send is

        completed.
    - id: callbackState
      type: System.Object
      description: >-
        A user provided object that distinguished this send

        from other send requests.
    return:
      type: System.IAsyncResult
      description: An object that represents the asynchronous send request.
    content.vb: Public Function BeginUploadSessionStart(close As Boolean = False, sessionType As UploadSessionType = Nothing, body As System.IO.Stream = Nothing, callback As System.AsyncCallback = Nothing, callbackState As Object = Nothing) As System.IAsyncResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart(System.IAsyncResult)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart(System.IAsyncResult)
  id: EndUploadSessionStart(System.IAsyncResult)
  parent: Dropbox.Api.Files.Routes.FilesUserRoutes
  langs:
  - csharp
  - vb
  name: EndUploadSessionStart(System.IAsyncResult)
  nameWithType: FilesUserRoutes.EndUploadSessionStart(System.IAsyncResult)
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
      branch: doc_fx_test
      repo: https://github.com/dropbox/dropbox-sdk-dotnet
    id: EndUploadSessionStart
    path: dropbox-sdk-dotnet/Dropbox.Api/Generated/Files/FilesUserRoutes.cs
    startLine: 7121
  assemblies:
  - Dropbox.Api
  namespace: Dropbox.Api.Files.Routes
  summary: "\n<p>Waits for the pending asynchronous send to the upload session start route to\ncomplete</p>\n"
  example: []
  syntax:
    content: public UploadSessionStartResult EndUploadSessionStart(System.IAsyncResult asyncResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: >-
        The reference to the pending asynchronous send

        request
    return:
      type: Dropbox.Api.Files.UploadSessionStartResult
      description: The response to the send request
    content.vb: Public Function EndUploadSessionStart(asyncResult As System.IAsyncResult) As UploadSessionStartResult
  overload: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart*
  exceptions:
  - type: Dropbox.Api.ApiException`1
    commentId: T:Dropbox.Api.ApiException`1
    description: >-
      Thrown if there is an error

      processing the request; This will contain a <xref href="Dropbox.Api.Files.UploadSessionStartError" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Dropbox.Api.Files
  commentId: N:Dropbox.Api.Files
  name: Dropbox.Api.Files
  nameWithType: Dropbox.Api.Files
  fullName: Dropbox.Api.Files
- uid: Dropbox.Api.Files.Routes
  commentId: N:Dropbox.Api.Files.Routes
  name: Dropbox.Api.Files.Routes
  nameWithType: Dropbox.Api.Files.Routes
  fullName: Dropbox.Api.Files.Routes
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Dropbox.Api.Files.AlphaGetMetadataError
  commentId: T:Dropbox.Api.Files.AlphaGetMetadataError
  parent: Dropbox.Api.Files
  name: AlphaGetMetadataError
  nameWithType: AlphaGetMetadataError
  fullName: Dropbox.Api.Files.AlphaGetMetadataError
- uid: Dropbox.Api.ApiException`1
  commentId: T:Dropbox.Api.ApiException`1
  name: ApiException<TError>
  nameWithType: ApiException<TError>
  fullName: Dropbox.Api.ApiException<TError>
  nameWithType.vb: ApiException(Of TError)
  fullName.vb: Dropbox.Api.ApiException(Of TError)
  name.vb: ApiException(Of TError)
  spec.csharp:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: <
    nameWithType: <
    fullName: <
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.ApiException`1
    name: ApiException
    nameWithType: ApiException
    fullName: Dropbox.Api.ApiException
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TError
    nameWithType: TError
    fullName: TError
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync
  name: AlphaGetMetadataAsync
  nameWithType: FilesUserRoutes.AlphaGetMetadataAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaGetMetadataAsync
- uid: Dropbox.Api.Files.AlphaGetMetadataArg
  commentId: T:Dropbox.Api.Files.AlphaGetMetadataArg
  parent: Dropbox.Api.Files
  name: AlphaGetMetadataArg
  nameWithType: AlphaGetMetadataArg
  fullName: Dropbox.Api.Files.AlphaGetMetadataArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.Metadata}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<Metadata>
  nameWithType: System.Threading.Tasks.Task<Metadata>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.Metadata>
  nameWithType.vb: System.Threading.Tasks.Task(Of Metadata)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.Metadata)
  name.vb: System.Threading.Tasks.Task(Of Metadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.Metadata
    name: Metadata
    nameWithType: Metadata
    fullName: Dropbox.Api.Files.Metadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.Metadata
    name: Metadata
    nameWithType: Metadata
    fullName: Dropbox.Api.Files.Metadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  isExternal: true
  name: System.Threading.Tasks.Task<>
  nameWithType: System.Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  nameWithType.vb: System.Threading.Tasks.Task(Of )
  fullName.vb: System.Threading.Tasks.Task(Of )
  name.vb: System.Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata
  name: BeginAlphaGetMetadata
  nameWithType: FilesUserRoutes.BeginAlphaGetMetadata
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaGetMetadata
- uid: System.AsyncCallback
  isExternal: true
  name: System.AsyncCallback
  nameWithType: System.AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  isExternal: true
  name: System.IAsyncResult
  nameWithType: System.IAsyncResult
  fullName: System.IAsyncResult
- uid: Dropbox.Api.Files.FileMetadata.MediaInfo
  commentId: P:Dropbox.Api.Files.FileMetadata.MediaInfo
  isExternal: true
- uid: Dropbox.Api.Files.DeletedMetadata
  commentId: T:Dropbox.Api.Files.DeletedMetadata
  parent: Dropbox.Api.Files
  name: DeletedMetadata
  nameWithType: DeletedMetadata
  fullName: Dropbox.Api.Files.DeletedMetadata
- uid: Dropbox.Api.Files.LookupError.NotFound
  commentId: T:Dropbox.Api.Files.LookupError.NotFound
  parent: Dropbox.Api.Files
  name: LookupError.NotFound
  nameWithType: LookupError.NotFound
  fullName: Dropbox.Api.Files.LookupError.NotFound
- uid: Dropbox.Api.Files.FileMetadata.PropertyGroups
  commentId: P:Dropbox.Api.Files.FileMetadata.PropertyGroups
  isExternal: true
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Dropbox.Api.FileProperties.TemplateFilterBase
  commentId: T:Dropbox.Api.FileProperties.TemplateFilterBase
  parent: Dropbox.Api.FileProperties
  name: TemplateFilterBase
  nameWithType: TemplateFilterBase
  fullName: Dropbox.Api.FileProperties.TemplateFilterBase
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: '!:System.Collections.Generic.IEnumerable{System.String}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<String>
  nameWithType: System.Collections.Generic.IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: System.Collections.Generic.IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.FileProperties
  commentId: N:Dropbox.Api.FileProperties
  name: Dropbox.Api.FileProperties
  nameWithType: Dropbox.Api.FileProperties
  fullName: Dropbox.Api.FileProperties
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: System.Collections.Generic.IEnumerable<>
  nameWithType: System.Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of )
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata
  name: EndAlphaGetMetadata
  nameWithType: FilesUserRoutes.EndAlphaGetMetadata
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaGetMetadata
- uid: Dropbox.Api.Files.Metadata
  commentId: T:Dropbox.Api.Files.Metadata
  parent: Dropbox.Api.Files
  name: Metadata
  nameWithType: Metadata
  fullName: Dropbox.Api.Files.Metadata
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync(Dropbox.Api.Files.CommitInfo,System.IO.Stream)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync(Dropbox.Api.Files.UploadSessionStartArg,System.IO.Stream)
  isExternal: true
- uid: Dropbox.Api.Files.UploadErrorWithProperties
  commentId: T:Dropbox.Api.Files.UploadErrorWithProperties
  parent: Dropbox.Api.Files
  name: UploadErrorWithProperties
  nameWithType: UploadErrorWithProperties
  fullName: Dropbox.Api.Files.UploadErrorWithProperties
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync
  name: AlphaUploadAsync
  nameWithType: FilesUserRoutes.AlphaUploadAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.AlphaUploadAsync
- uid: Dropbox.Api.Files.CommitInfoWithProperties
  commentId: T:Dropbox.Api.Files.CommitInfoWithProperties
  parent: Dropbox.Api.Files
  name: CommitInfoWithProperties
  nameWithType: CommitInfoWithProperties
  fullName: Dropbox.Api.Files.CommitInfoWithProperties
- uid: System.IO.Stream
  isExternal: true
  name: System.IO.Stream
  nameWithType: System.IO.Stream
  fullName: System.IO.Stream
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.FileMetadata}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<FileMetadata>
  nameWithType: System.Threading.Tasks.Task<FileMetadata>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.FileMetadata>
  nameWithType.vb: System.Threading.Tasks.Task(Of FileMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.FileMetadata)
  name.vb: System.Threading.Tasks.Task(Of FileMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload
  name: BeginAlphaUpload
  nameWithType: FilesUserRoutes.BeginAlphaUpload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginAlphaUpload
- uid: Dropbox.Api.Files.WriteMode
  commentId: T:Dropbox.Api.Files.WriteMode
  parent: Dropbox.Api.Files
  name: WriteMode
  nameWithType: WriteMode
  fullName: Dropbox.Api.Files.WriteMode
- uid: Dropbox.Api.Files.WriteMode.Update
  commentId: T:Dropbox.Api.Files.WriteMode.Update
  parent: Dropbox.Api.Files
  name: WriteMode.Update
  nameWithType: WriteMode.Update
  fullName: Dropbox.Api.Files.WriteMode.Update
- uid: System.Nullable{System.DateTime}
  commentId: '!:System.Nullable{System.DateTime}'
  definition: System.Nullable`1
  name: Nullable<System.DateTime>
  nameWithType: Nullable<System.DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of System.DateTime)
  fullName.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of System.DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: System.DateTime
    nameWithType: System.DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: System.DateTime
    nameWithType: System.DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}
  commentId: '!:System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroup}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<PropertyGroup>
  nameWithType: System.Collections.Generic.IEnumerable<PropertyGroup>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroup>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of PropertyGroup)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroup)
  name.vb: System.Collections.Generic.IEnumerable(Of PropertyGroup)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.PropertyGroup
    name: PropertyGroup
    nameWithType: PropertyGroup
    fullName: Dropbox.Api.FileProperties.PropertyGroup
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.PropertyGroup
    name: PropertyGroup
    nameWithType: PropertyGroup
    fullName: Dropbox.Api.FileProperties.PropertyGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullName.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload
  name: EndAlphaUpload
  nameWithType: FilesUserRoutes.EndAlphaUpload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndAlphaUpload
- uid: Dropbox.Api.Files.FileMetadata
  commentId: T:Dropbox.Api.Files.FileMetadata
  parent: Dropbox.Api.Files
  name: FileMetadata
  nameWithType: FileMetadata
  fullName: Dropbox.Api.Files.FileMetadata
- uid: Dropbox.Api.Files.RelocationError
  commentId: T:Dropbox.Api.Files.RelocationError
  parent: Dropbox.Api.Files
  name: RelocationError
  nameWithType: RelocationError
  fullName: Dropbox.Api.Files.RelocationError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async
  name: CopyV2Async
  nameWithType: FilesUserRoutes.CopyV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyV2Async
- uid: Dropbox.Api.Files.RelocationArg
  commentId: T:Dropbox.Api.Files.RelocationArg
  parent: Dropbox.Api.Files
  name: RelocationArg
  nameWithType: RelocationArg
  fullName: Dropbox.Api.Files.RelocationArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<RelocationResult>
  nameWithType: System.Threading.Tasks.Task<RelocationResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of RelocationResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationResult)
  name.vb: System.Threading.Tasks.Task(Of RelocationResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationResult
    name: RelocationResult
    nameWithType: RelocationResult
    fullName: Dropbox.Api.Files.RelocationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationResult
    name: RelocationResult
    nameWithType: RelocationResult
    fullName: Dropbox.Api.Files.RelocationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2
  name: BeginCopyV2
  nameWithType: FilesUserRoutes.BeginCopyV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2
  name: EndCopyV2
  nameWithType: FilesUserRoutes.EndCopyV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyV2
- uid: Dropbox.Api.Files.RelocationResult
  commentId: T:Dropbox.Api.Files.RelocationResult
  parent: Dropbox.Api.Files
  name: RelocationResult
  nameWithType: RelocationResult
  fullName: Dropbox.Api.Files.RelocationResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync
  name: CopyAsync
  nameWithType: FilesUserRoutes.CopyAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy
  name: BeginCopy
  nameWithType: FilesUserRoutes.BeginCopy
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopy
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy
  name: EndCopy
  nameWithType: FilesUserRoutes.EndCopy
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopy
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async
  name: CopyBatchV2Async
  nameWithType: FilesUserRoutes.CopyBatchV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async
- uid: Dropbox.Api.Files.RelocationBatchArgBase
  commentId: T:Dropbox.Api.Files.RelocationBatchArgBase
  parent: Dropbox.Api.Files
  name: RelocationBatchArgBase
  nameWithType: RelocationBatchArgBase
  fullName: Dropbox.Api.Files.RelocationBatchArgBase
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2Launch}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<RelocationBatchV2Launch>
  nameWithType: System.Threading.Tasks.Task<RelocationBatchV2Launch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationBatchV2Launch>
  nameWithType.vb: System.Threading.Tasks.Task(Of RelocationBatchV2Launch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationBatchV2Launch)
  name.vb: System.Threading.Tasks.Task(Of RelocationBatchV2Launch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationBatchV2Launch
    name: RelocationBatchV2Launch
    nameWithType: RelocationBatchV2Launch
    fullName: Dropbox.Api.Files.RelocationBatchV2Launch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationBatchV2Launch
    name: RelocationBatchV2Launch
    nameWithType: RelocationBatchV2Launch
    fullName: Dropbox.Api.Files.RelocationBatchV2Launch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2
  name: BeginCopyBatchV2
  nameWithType: FilesUserRoutes.BeginCopyBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchV2
- uid: Dropbox.Api.Files.RelocationPath
  commentId: T:Dropbox.Api.Files.RelocationPath
  parent: Dropbox.Api.Files
  name: RelocationPath
  nameWithType: RelocationPath
  fullName: Dropbox.Api.Files.RelocationPath
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}
  commentId: '!:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.RelocationPath}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<RelocationPath>
  nameWithType: System.Collections.Generic.IEnumerable<RelocationPath>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.RelocationPath>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of RelocationPath)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.RelocationPath)
  name.vb: System.Collections.Generic.IEnumerable(Of RelocationPath)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationPath
    name: RelocationPath
    nameWithType: RelocationPath
    fullName: Dropbox.Api.Files.RelocationPath
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationPath
    name: RelocationPath
    nameWithType: RelocationPath
    fullName: Dropbox.Api.Files.RelocationPath
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2
  name: EndCopyBatchV2
  nameWithType: FilesUserRoutes.EndCopyBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchV2
- uid: Dropbox.Api.Files.RelocationBatchV2Launch
  commentId: T:Dropbox.Api.Files.RelocationBatchV2Launch
  parent: Dropbox.Api.Files
  name: RelocationBatchV2Launch
  nameWithType: RelocationBatchV2Launch
  fullName: Dropbox.Api.Files.RelocationBatchV2Launch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync
  name: CopyBatchAsync
  nameWithType: FilesUserRoutes.CopyBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchAsync
- uid: Dropbox.Api.Files.RelocationBatchArg
  commentId: T:Dropbox.Api.Files.RelocationBatchArg
  parent: Dropbox.Api.Files
  name: RelocationBatchArg
  nameWithType: RelocationBatchArg
  fullName: Dropbox.Api.Files.RelocationBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchLaunch}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<RelocationBatchLaunch>
  nameWithType: System.Threading.Tasks.Task<RelocationBatchLaunch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationBatchLaunch>
  nameWithType.vb: System.Threading.Tasks.Task(Of RelocationBatchLaunch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationBatchLaunch)
  name.vb: System.Threading.Tasks.Task(Of RelocationBatchLaunch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationBatchLaunch
    name: RelocationBatchLaunch
    nameWithType: RelocationBatchLaunch
    fullName: Dropbox.Api.Files.RelocationBatchLaunch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationBatchLaunch
    name: RelocationBatchLaunch
    nameWithType: RelocationBatchLaunch
    fullName: Dropbox.Api.Files.RelocationBatchLaunch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch
  name: BeginCopyBatch
  nameWithType: FilesUserRoutes.BeginCopyBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch
  name: EndCopyBatch
  nameWithType: FilesUserRoutes.EndCopyBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatch
- uid: Dropbox.Api.Files.RelocationBatchLaunch
  commentId: T:Dropbox.Api.Files.RelocationBatchLaunch
  parent: Dropbox.Api.Files
  name: RelocationBatchLaunch
  nameWithType: RelocationBatchLaunch
  fullName: Dropbox.Api.Files.RelocationBatchLaunch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchV2Async(Dropbox.Api.Files.RelocationBatchArgBase)
  isExternal: true
- uid: Dropbox.Api.Async.PollError
  commentId: T:Dropbox.Api.Async.PollError
  parent: Dropbox.Api.Async
  name: PollError
  nameWithType: PollError
  fullName: Dropbox.Api.Async.PollError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async
  name: CopyBatchCheckV2Async
  nameWithType: FilesUserRoutes.CopyBatchCheckV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckV2Async
- uid: Dropbox.Api.Async.PollArg
  commentId: T:Dropbox.Api.Async.PollArg
  parent: Dropbox.Api.Async
  name: PollArg
  nameWithType: PollArg
  fullName: Dropbox.Api.Async.PollArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchV2JobStatus}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<RelocationBatchV2JobStatus>
  nameWithType: System.Threading.Tasks.Task<RelocationBatchV2JobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationBatchV2JobStatus>
  nameWithType.vb: System.Threading.Tasks.Task(Of RelocationBatchV2JobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationBatchV2JobStatus)
  name.vb: System.Threading.Tasks.Task(Of RelocationBatchV2JobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationBatchV2JobStatus
    name: RelocationBatchV2JobStatus
    nameWithType: RelocationBatchV2JobStatus
    fullName: Dropbox.Api.Files.RelocationBatchV2JobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationBatchV2JobStatus
    name: RelocationBatchV2JobStatus
    nameWithType: RelocationBatchV2JobStatus
    fullName: Dropbox.Api.Files.RelocationBatchV2JobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Async
  commentId: N:Dropbox.Api.Async
  name: Dropbox.Api.Async
  nameWithType: Dropbox.Api.Async
  fullName: Dropbox.Api.Async
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2
  name: BeginCopyBatchCheckV2
  nameWithType: FilesUserRoutes.BeginCopyBatchCheckV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheckV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2
  name: EndCopyBatchCheckV2
  nameWithType: FilesUserRoutes.EndCopyBatchCheckV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheckV2
- uid: Dropbox.Api.Files.RelocationBatchV2JobStatus
  commentId: T:Dropbox.Api.Files.RelocationBatchV2JobStatus
  parent: Dropbox.Api.Files
  name: RelocationBatchV2JobStatus
  nameWithType: RelocationBatchV2JobStatus
  fullName: Dropbox.Api.Files.RelocationBatchV2JobStatus
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync
  name: CopyBatchCheckAsync
  nameWithType: FilesUserRoutes.CopyBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyBatchCheckAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.RelocationBatchJobStatus}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<RelocationBatchJobStatus>
  nameWithType: System.Threading.Tasks.Task<RelocationBatchJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.RelocationBatchJobStatus>
  nameWithType.vb: System.Threading.Tasks.Task(Of RelocationBatchJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.RelocationBatchJobStatus)
  name.vb: System.Threading.Tasks.Task(Of RelocationBatchJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.RelocationBatchJobStatus
    name: RelocationBatchJobStatus
    nameWithType: RelocationBatchJobStatus
    fullName: Dropbox.Api.Files.RelocationBatchJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.RelocationBatchJobStatus
    name: RelocationBatchJobStatus
    nameWithType: RelocationBatchJobStatus
    fullName: Dropbox.Api.Files.RelocationBatchJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck
  name: BeginCopyBatchCheck
  nameWithType: FilesUserRoutes.BeginCopyBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck
  name: EndCopyBatchCheck
  nameWithType: FilesUserRoutes.EndCopyBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyBatchCheck
- uid: Dropbox.Api.Files.RelocationBatchJobStatus
  commentId: T:Dropbox.Api.Files.RelocationBatchJobStatus
  parent: Dropbox.Api.Files
  name: RelocationBatchJobStatus
  nameWithType: RelocationBatchJobStatus
  fullName: Dropbox.Api.Files.RelocationBatchJobStatus
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync(Dropbox.Api.Files.SaveCopyReferenceArg)
  isExternal: true
- uid: Dropbox.Api.Files.GetCopyReferenceError
  commentId: T:Dropbox.Api.Files.GetCopyReferenceError
  parent: Dropbox.Api.Files
  name: GetCopyReferenceError
  nameWithType: GetCopyReferenceError
  fullName: Dropbox.Api.Files.GetCopyReferenceError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync
  name: CopyReferenceGetAsync
  nameWithType: FilesUserRoutes.CopyReferenceGetAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync
- uid: Dropbox.Api.Files.GetCopyReferenceArg
  commentId: T:Dropbox.Api.Files.GetCopyReferenceArg
  parent: Dropbox.Api.Files
  name: GetCopyReferenceArg
  nameWithType: GetCopyReferenceArg
  fullName: Dropbox.Api.Files.GetCopyReferenceArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.GetCopyReferenceResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.GetCopyReferenceResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<GetCopyReferenceResult>
  nameWithType: System.Threading.Tasks.Task<GetCopyReferenceResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.GetCopyReferenceResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of GetCopyReferenceResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.GetCopyReferenceResult)
  name.vb: System.Threading.Tasks.Task(Of GetCopyReferenceResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.GetCopyReferenceResult
    name: GetCopyReferenceResult
    nameWithType: GetCopyReferenceResult
    fullName: Dropbox.Api.Files.GetCopyReferenceResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.GetCopyReferenceResult
    name: GetCopyReferenceResult
    nameWithType: GetCopyReferenceResult
    fullName: Dropbox.Api.Files.GetCopyReferenceResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet
  name: BeginCopyReferenceGet
  nameWithType: FilesUserRoutes.BeginCopyReferenceGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceGet
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet
  name: EndCopyReferenceGet
  nameWithType: FilesUserRoutes.EndCopyReferenceGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceGet
- uid: Dropbox.Api.Files.GetCopyReferenceResult
  commentId: T:Dropbox.Api.Files.GetCopyReferenceResult
  parent: Dropbox.Api.Files
  name: GetCopyReferenceResult
  nameWithType: GetCopyReferenceResult
  fullName: Dropbox.Api.Files.GetCopyReferenceResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceGetAsync(Dropbox.Api.Files.GetCopyReferenceArg)
  isExternal: true
- uid: Dropbox.Api.Files.SaveCopyReferenceError
  commentId: T:Dropbox.Api.Files.SaveCopyReferenceError
  parent: Dropbox.Api.Files
  name: SaveCopyReferenceError
  nameWithType: SaveCopyReferenceError
  fullName: Dropbox.Api.Files.SaveCopyReferenceError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync
  name: CopyReferenceSaveAsync
  nameWithType: FilesUserRoutes.CopyReferenceSaveAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CopyReferenceSaveAsync
- uid: Dropbox.Api.Files.SaveCopyReferenceArg
  commentId: T:Dropbox.Api.Files.SaveCopyReferenceArg
  parent: Dropbox.Api.Files
  name: SaveCopyReferenceArg
  nameWithType: SaveCopyReferenceArg
  fullName: Dropbox.Api.Files.SaveCopyReferenceArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveCopyReferenceResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.SaveCopyReferenceResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<SaveCopyReferenceResult>
  nameWithType: System.Threading.Tasks.Task<SaveCopyReferenceResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SaveCopyReferenceResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of SaveCopyReferenceResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SaveCopyReferenceResult)
  name.vb: System.Threading.Tasks.Task(Of SaveCopyReferenceResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SaveCopyReferenceResult
    name: SaveCopyReferenceResult
    nameWithType: SaveCopyReferenceResult
    fullName: Dropbox.Api.Files.SaveCopyReferenceResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SaveCopyReferenceResult
    name: SaveCopyReferenceResult
    nameWithType: SaveCopyReferenceResult
    fullName: Dropbox.Api.Files.SaveCopyReferenceResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave
  name: BeginCopyReferenceSave
  nameWithType: FilesUserRoutes.BeginCopyReferenceSave
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCopyReferenceSave
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave
  name: EndCopyReferenceSave
  nameWithType: FilesUserRoutes.EndCopyReferenceSave
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCopyReferenceSave
- uid: Dropbox.Api.Files.SaveCopyReferenceResult
  commentId: T:Dropbox.Api.Files.SaveCopyReferenceResult
  parent: Dropbox.Api.Files
  name: SaveCopyReferenceResult
  nameWithType: SaveCopyReferenceResult
  fullName: Dropbox.Api.Files.SaveCopyReferenceResult
- uid: Dropbox.Api.Files.CreateFolderError
  commentId: T:Dropbox.Api.Files.CreateFolderError
  parent: Dropbox.Api.Files
  name: CreateFolderError
  nameWithType: CreateFolderError
  fullName: Dropbox.Api.Files.CreateFolderError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async
  name: CreateFolderV2Async
  nameWithType: FilesUserRoutes.CreateFolderV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderV2Async
- uid: Dropbox.Api.Files.CreateFolderArg
  commentId: T:Dropbox.Api.Files.CreateFolderArg
  parent: Dropbox.Api.Files
  name: CreateFolderArg
  nameWithType: CreateFolderArg
  fullName: Dropbox.Api.Files.CreateFolderArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<CreateFolderResult>
  nameWithType: System.Threading.Tasks.Task<CreateFolderResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.CreateFolderResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of CreateFolderResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.CreateFolderResult)
  name.vb: System.Threading.Tasks.Task(Of CreateFolderResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.CreateFolderResult
    name: CreateFolderResult
    nameWithType: CreateFolderResult
    fullName: Dropbox.Api.Files.CreateFolderResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.CreateFolderResult
    name: CreateFolderResult
    nameWithType: CreateFolderResult
    fullName: Dropbox.Api.Files.CreateFolderResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2
  name: BeginCreateFolderV2
  nameWithType: FilesUserRoutes.BeginCreateFolderV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2
  name: EndCreateFolderV2
  nameWithType: FilesUserRoutes.EndCreateFolderV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderV2
- uid: Dropbox.Api.Files.CreateFolderResult
  commentId: T:Dropbox.Api.Files.CreateFolderResult
  parent: Dropbox.Api.Files
  name: CreateFolderResult
  nameWithType: CreateFolderResult
  fullName: Dropbox.Api.Files.CreateFolderResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync
  name: CreateFolderAsync
  nameWithType: FilesUserRoutes.CreateFolderAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.FolderMetadata}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.FolderMetadata}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<FolderMetadata>
  nameWithType: System.Threading.Tasks.Task<FolderMetadata>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.FolderMetadata>
  nameWithType.vb: System.Threading.Tasks.Task(Of FolderMetadata)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.FolderMetadata)
  name.vb: System.Threading.Tasks.Task(Of FolderMetadata)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.FolderMetadata
    name: FolderMetadata
    nameWithType: FolderMetadata
    fullName: Dropbox.Api.Files.FolderMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.FolderMetadata
    name: FolderMetadata
    nameWithType: FolderMetadata
    fullName: Dropbox.Api.Files.FolderMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder
  name: BeginCreateFolder
  nameWithType: FilesUserRoutes.BeginCreateFolder
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolder
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder
  name: EndCreateFolder
  nameWithType: FilesUserRoutes.EndCreateFolder
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolder
- uid: Dropbox.Api.Files.FolderMetadata
  commentId: T:Dropbox.Api.Files.FolderMetadata
  parent: Dropbox.Api.Files
  name: FolderMetadata
  nameWithType: FolderMetadata
  fullName: Dropbox.Api.Files.FolderMetadata
- uid: Dropbox.Api.Files.CreateFolderBatchArg.ForceAsync
  commentId: P:Dropbox.Api.Files.CreateFolderBatchArg.ForceAsync
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync
  name: CreateFolderBatchAsync
  nameWithType: FilesUserRoutes.CreateFolderBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync
- uid: Dropbox.Api.Files.CreateFolderBatchArg
  commentId: T:Dropbox.Api.Files.CreateFolderBatchArg
  parent: Dropbox.Api.Files
  name: CreateFolderBatchArg
  nameWithType: CreateFolderBatchArg
  fullName: Dropbox.Api.Files.CreateFolderBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchLaunch}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchLaunch}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<CreateFolderBatchLaunch>
  nameWithType: System.Threading.Tasks.Task<CreateFolderBatchLaunch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.CreateFolderBatchLaunch>
  nameWithType.vb: System.Threading.Tasks.Task(Of CreateFolderBatchLaunch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.CreateFolderBatchLaunch)
  name.vb: System.Threading.Tasks.Task(Of CreateFolderBatchLaunch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.CreateFolderBatchLaunch
    name: CreateFolderBatchLaunch
    nameWithType: CreateFolderBatchLaunch
    fullName: Dropbox.Api.Files.CreateFolderBatchLaunch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.CreateFolderBatchLaunch
    name: CreateFolderBatchLaunch
    nameWithType: CreateFolderBatchLaunch
    fullName: Dropbox.Api.Files.CreateFolderBatchLaunch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch
  name: BeginCreateFolderBatch
  nameWithType: FilesUserRoutes.BeginCreateFolderBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch
  name: EndCreateFolderBatch
  nameWithType: FilesUserRoutes.EndCreateFolderBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatch
- uid: Dropbox.Api.Files.CreateFolderBatchLaunch
  commentId: T:Dropbox.Api.Files.CreateFolderBatchLaunch
  parent: Dropbox.Api.Files
  name: CreateFolderBatchLaunch
  nameWithType: CreateFolderBatchLaunch
  fullName: Dropbox.Api.Files.CreateFolderBatchLaunch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchAsync(Dropbox.Api.Files.CreateFolderBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync
  name: CreateFolderBatchCheckAsync
  nameWithType: FilesUserRoutes.CreateFolderBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.CreateFolderBatchCheckAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchJobStatus}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.CreateFolderBatchJobStatus}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<CreateFolderBatchJobStatus>
  nameWithType: System.Threading.Tasks.Task<CreateFolderBatchJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.CreateFolderBatchJobStatus>
  nameWithType.vb: System.Threading.Tasks.Task(Of CreateFolderBatchJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.CreateFolderBatchJobStatus)
  name.vb: System.Threading.Tasks.Task(Of CreateFolderBatchJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.CreateFolderBatchJobStatus
    name: CreateFolderBatchJobStatus
    nameWithType: CreateFolderBatchJobStatus
    fullName: Dropbox.Api.Files.CreateFolderBatchJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.CreateFolderBatchJobStatus
    name: CreateFolderBatchJobStatus
    nameWithType: CreateFolderBatchJobStatus
    fullName: Dropbox.Api.Files.CreateFolderBatchJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck
  name: BeginCreateFolderBatchCheck
  nameWithType: FilesUserRoutes.BeginCreateFolderBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginCreateFolderBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck
  name: EndCreateFolderBatchCheck
  nameWithType: FilesUserRoutes.EndCreateFolderBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndCreateFolderBatchCheck
- uid: Dropbox.Api.Files.CreateFolderBatchJobStatus
  commentId: T:Dropbox.Api.Files.CreateFolderBatchJobStatus
  parent: Dropbox.Api.Files
  name: CreateFolderBatchJobStatus
  nameWithType: CreateFolderBatchJobStatus
  fullName: Dropbox.Api.Files.CreateFolderBatchJobStatus
- uid: Dropbox.Api.Files.DeleteError
  commentId: T:Dropbox.Api.Files.DeleteError
  parent: Dropbox.Api.Files
  name: DeleteError
  nameWithType: DeleteError
  fullName: Dropbox.Api.Files.DeleteError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async
  name: DeleteV2Async
  nameWithType: FilesUserRoutes.DeleteV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteV2Async
- uid: Dropbox.Api.Files.DeleteArg
  commentId: T:Dropbox.Api.Files.DeleteArg
  parent: Dropbox.Api.Files
  name: DeleteArg
  nameWithType: DeleteArg
  fullName: Dropbox.Api.Files.DeleteArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<DeleteResult>
  nameWithType: System.Threading.Tasks.Task<DeleteResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.DeleteResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of DeleteResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.DeleteResult)
  name.vb: System.Threading.Tasks.Task(Of DeleteResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: Dropbox.Api.Files.DeleteResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DeleteResult
    name: DeleteResult
    nameWithType: DeleteResult
    fullName: Dropbox.Api.Files.DeleteResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2
  name: BeginDeleteV2
  nameWithType: FilesUserRoutes.BeginDeleteV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2
  name: EndDeleteV2
  nameWithType: FilesUserRoutes.EndDeleteV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteV2
- uid: Dropbox.Api.Files.DeleteResult
  commentId: T:Dropbox.Api.Files.DeleteResult
  parent: Dropbox.Api.Files
  name: DeleteResult
  nameWithType: DeleteResult
  fullName: Dropbox.Api.Files.DeleteResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync
  name: DeleteAsync
  nameWithType: FilesUserRoutes.DeleteAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete
  name: BeginDelete
  nameWithType: FilesUserRoutes.BeginDelete
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDelete
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete
  name: EndDelete
  nameWithType: FilesUserRoutes.EndDelete
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDelete
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync
  name: DeleteBatchAsync
  nameWithType: FilesUserRoutes.DeleteBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync
- uid: Dropbox.Api.Files.DeleteBatchArg
  commentId: T:Dropbox.Api.Files.DeleteBatchArg
  parent: Dropbox.Api.Files
  name: DeleteBatchArg
  nameWithType: DeleteBatchArg
  fullName: Dropbox.Api.Files.DeleteBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchLaunch}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchLaunch}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<DeleteBatchLaunch>
  nameWithType: System.Threading.Tasks.Task<DeleteBatchLaunch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.DeleteBatchLaunch>
  nameWithType.vb: System.Threading.Tasks.Task(Of DeleteBatchLaunch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.DeleteBatchLaunch)
  name.vb: System.Threading.Tasks.Task(Of DeleteBatchLaunch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DeleteBatchLaunch
    name: DeleteBatchLaunch
    nameWithType: DeleteBatchLaunch
    fullName: Dropbox.Api.Files.DeleteBatchLaunch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DeleteBatchLaunch
    name: DeleteBatchLaunch
    nameWithType: DeleteBatchLaunch
    fullName: Dropbox.Api.Files.DeleteBatchLaunch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch
  name: BeginDeleteBatch
  nameWithType: FilesUserRoutes.BeginDeleteBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg}
  commentId: '!:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.DeleteArg}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<DeleteArg>
  nameWithType: System.Collections.Generic.IEnumerable<DeleteArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.DeleteArg>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of DeleteArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.DeleteArg)
  name.vb: System.Collections.Generic.IEnumerable(Of DeleteArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DeleteArg
    name: DeleteArg
    nameWithType: DeleteArg
    fullName: Dropbox.Api.Files.DeleteArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DeleteArg
    name: DeleteArg
    nameWithType: DeleteArg
    fullName: Dropbox.Api.Files.DeleteArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch
  name: EndDeleteBatch
  nameWithType: FilesUserRoutes.EndDeleteBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatch
- uid: Dropbox.Api.Files.DeleteBatchLaunch
  commentId: T:Dropbox.Api.Files.DeleteBatchLaunch
  parent: Dropbox.Api.Files
  name: DeleteBatchLaunch
  nameWithType: DeleteBatchLaunch
  fullName: Dropbox.Api.Files.DeleteBatchLaunch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchAsync(Dropbox.Api.Files.DeleteBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync
  name: DeleteBatchCheckAsync
  nameWithType: FilesUserRoutes.DeleteBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DeleteBatchCheckAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchJobStatus}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.DeleteBatchJobStatus}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<DeleteBatchJobStatus>
  nameWithType: System.Threading.Tasks.Task<DeleteBatchJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.DeleteBatchJobStatus>
  nameWithType.vb: System.Threading.Tasks.Task(Of DeleteBatchJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.DeleteBatchJobStatus)
  name.vb: System.Threading.Tasks.Task(Of DeleteBatchJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DeleteBatchJobStatus
    name: DeleteBatchJobStatus
    nameWithType: DeleteBatchJobStatus
    fullName: Dropbox.Api.Files.DeleteBatchJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DeleteBatchJobStatus
    name: DeleteBatchJobStatus
    nameWithType: DeleteBatchJobStatus
    fullName: Dropbox.Api.Files.DeleteBatchJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck
  name: BeginDeleteBatchCheck
  nameWithType: FilesUserRoutes.BeginDeleteBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDeleteBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck
  name: EndDeleteBatchCheck
  nameWithType: FilesUserRoutes.EndDeleteBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDeleteBatchCheck
- uid: Dropbox.Api.Files.DeleteBatchJobStatus
  commentId: T:Dropbox.Api.Files.DeleteBatchJobStatus
  parent: Dropbox.Api.Files
  name: DeleteBatchJobStatus
  nameWithType: DeleteBatchJobStatus
  fullName: Dropbox.Api.Files.DeleteBatchJobStatus
- uid: Dropbox.Api.Files.DownloadError
  commentId: T:Dropbox.Api.Files.DownloadError
  parent: Dropbox.Api.Files
  name: DownloadError
  nameWithType: DownloadError
  fullName: Dropbox.Api.Files.DownloadError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync
  name: DownloadAsync
  nameWithType: FilesUserRoutes.DownloadAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadAsync
- uid: Dropbox.Api.Files.DownloadArg
  commentId: T:Dropbox.Api.Files.DownloadArg
  parent: Dropbox.Api.Files
  name: DownloadArg
  nameWithType: DownloadArg
  fullName: Dropbox.Api.Files.DownloadArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<IDownloadResponse<FileMetadata>>
  nameWithType: System.Threading.Tasks.Task<IDownloadResponse<FileMetadata>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.FileMetadata>>
  nameWithType.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of FileMetadata))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.FileMetadata))
  name.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of FileMetadata))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload
  name: BeginDownload
  nameWithType: FilesUserRoutes.BeginDownload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownload
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload
  name: EndDownload
  nameWithType: FilesUserRoutes.EndDownload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownload
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.FileMetadata}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<FileMetadata>
  nameWithType: IDownloadResponse<FileMetadata>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.FileMetadata>
  nameWithType.vb: IDownloadResponse(Of FileMetadata)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.FileMetadata)
  name.vb: IDownloadResponse(Of FileMetadata)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.FileMetadata
    name: FileMetadata
    nameWithType: FileMetadata
    fullName: Dropbox.Api.Files.FileMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Stone.IDownloadResponse`1
  commentId: T:Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<TResponse>
  nameWithType: IDownloadResponse<TResponse>
  fullName: Dropbox.Api.Stone.IDownloadResponse<TResponse>
  nameWithType.vb: IDownloadResponse(Of TResponse)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of TResponse)
  name.vb: IDownloadResponse(Of TResponse)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Stone
  commentId: N:Dropbox.Api.Stone
  name: Dropbox.Api.Stone
  nameWithType: Dropbox.Api.Stone
  fullName: Dropbox.Api.Stone
- uid: Dropbox.Api.Files.DownloadZipError
  commentId: T:Dropbox.Api.Files.DownloadZipError
  parent: Dropbox.Api.Files
  name: DownloadZipError
  nameWithType: DownloadZipError
  fullName: Dropbox.Api.Files.DownloadZipError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync
  name: DownloadZipAsync
  nameWithType: FilesUserRoutes.DownloadZipAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.DownloadZipAsync
- uid: Dropbox.Api.Files.DownloadZipArg
  commentId: T:Dropbox.Api.Files.DownloadZipArg
  parent: Dropbox.Api.Files
  name: DownloadZipArg
  nameWithType: DownloadZipArg
  fullName: Dropbox.Api.Files.DownloadZipArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<IDownloadResponse<DownloadZipResult>>
  nameWithType: System.Threading.Tasks.Task<IDownloadResponse<DownloadZipResult>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.DownloadZipResult>>
  nameWithType.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of DownloadZipResult))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.DownloadZipResult))
  name.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of DownloadZipResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DownloadZipResult
    name: DownloadZipResult
    nameWithType: DownloadZipResult
    fullName: Dropbox.Api.Files.DownloadZipResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DownloadZipResult
    name: DownloadZipResult
    nameWithType: DownloadZipResult
    fullName: Dropbox.Api.Files.DownloadZipResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip
  name: BeginDownloadZip
  nameWithType: FilesUserRoutes.BeginDownloadZip
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginDownloadZip
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip
  name: EndDownloadZip
  nameWithType: FilesUserRoutes.EndDownloadZip
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndDownloadZip
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.DownloadZipResult}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<DownloadZipResult>
  nameWithType: IDownloadResponse<DownloadZipResult>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.DownloadZipResult>
  nameWithType.vb: IDownloadResponse(Of DownloadZipResult)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.DownloadZipResult)
  name.vb: IDownloadResponse(Of DownloadZipResult)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.DownloadZipResult
    name: DownloadZipResult
    nameWithType: DownloadZipResult
    fullName: Dropbox.Api.Files.DownloadZipResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.DownloadZipResult
    name: DownloadZipResult
    nameWithType: DownloadZipResult
    fullName: Dropbox.Api.Files.DownloadZipResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.ExportResult.FileMetadata
  commentId: P:Dropbox.Api.Files.ExportResult.FileMetadata
  isExternal: true
- uid: Dropbox.Api.Files.ExportInfo.ExportAs
  commentId: P:Dropbox.Api.Files.ExportInfo.ExportAs
  isExternal: true
- uid: Dropbox.Api.Files.ExportError
  commentId: T:Dropbox.Api.Files.ExportError
  parent: Dropbox.Api.Files
  name: ExportError
  nameWithType: ExportError
  fullName: Dropbox.Api.Files.ExportError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync
  name: ExportAsync
  nameWithType: FilesUserRoutes.ExportAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ExportAsync
- uid: Dropbox.Api.Files.ExportArg
  commentId: T:Dropbox.Api.Files.ExportArg
  parent: Dropbox.Api.Files
  name: ExportArg
  nameWithType: ExportArg
  fullName: Dropbox.Api.Files.ExportArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<IDownloadResponse<ExportResult>>
  nameWithType: System.Threading.Tasks.Task<IDownloadResponse<ExportResult>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.ExportResult>>
  nameWithType.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of ExportResult))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.ExportResult))
  name.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of ExportResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: Dropbox.Api.Files.ExportResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: Dropbox.Api.Files.ExportResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport
  name: BeginExport
  nameWithType: FilesUserRoutes.BeginExport
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginExport
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync(Dropbox.Api.Files.GetMetadataArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport
  name: EndExport
  nameWithType: FilesUserRoutes.EndExport
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndExport
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.ExportResult}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<ExportResult>
  nameWithType: IDownloadResponse<ExportResult>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.ExportResult>
  nameWithType.vb: IDownloadResponse(Of ExportResult)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.ExportResult)
  name.vb: IDownloadResponse(Of ExportResult)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: Dropbox.Api.Files.ExportResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ExportResult
    name: ExportResult
    nameWithType: ExportResult
    fullName: Dropbox.Api.Files.ExportResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.LockFileError
  commentId: T:Dropbox.Api.Files.LockFileError
  parent: Dropbox.Api.Files
  name: LockFileError
  nameWithType: LockFileError
  fullName: Dropbox.Api.Files.LockFileError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync
  name: GetFileLockBatchAsync
  nameWithType: FilesUserRoutes.GetFileLockBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetFileLockBatchAsync
- uid: Dropbox.Api.Files.LockFileBatchArg
  commentId: T:Dropbox.Api.Files.LockFileBatchArg
  parent: Dropbox.Api.Files
  name: LockFileBatchArg
  nameWithType: LockFileBatchArg
  fullName: Dropbox.Api.Files.LockFileBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.LockFileBatchResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<LockFileBatchResult>
  nameWithType: System.Threading.Tasks.Task<LockFileBatchResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.LockFileBatchResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of LockFileBatchResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.LockFileBatchResult)
  name.vb: System.Threading.Tasks.Task(Of LockFileBatchResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.LockFileBatchResult
    name: LockFileBatchResult
    nameWithType: LockFileBatchResult
    fullName: Dropbox.Api.Files.LockFileBatchResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.LockFileBatchResult
    name: LockFileBatchResult
    nameWithType: LockFileBatchResult
    fullName: Dropbox.Api.Files.LockFileBatchResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch
  name: BeginGetFileLockBatch
  nameWithType: FilesUserRoutes.BeginGetFileLockBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetFileLockBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}
  commentId: '!:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.LockFileArg}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<LockFileArg>
  nameWithType: System.Collections.Generic.IEnumerable<LockFileArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.LockFileArg>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of LockFileArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.LockFileArg)
  name.vb: System.Collections.Generic.IEnumerable(Of LockFileArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.LockFileArg
    name: LockFileArg
    nameWithType: LockFileArg
    fullName: Dropbox.Api.Files.LockFileArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.LockFileArg
    name: LockFileArg
    nameWithType: LockFileArg
    fullName: Dropbox.Api.Files.LockFileArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch
  name: EndGetFileLockBatch
  nameWithType: FilesUserRoutes.EndGetFileLockBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetFileLockBatch
- uid: Dropbox.Api.Files.LockFileBatchResult
  commentId: T:Dropbox.Api.Files.LockFileBatchResult
  parent: Dropbox.Api.Files
  name: LockFileBatchResult
  nameWithType: LockFileBatchResult
  fullName: Dropbox.Api.Files.LockFileBatchResult
- uid: Dropbox.Api.Files.GetMetadataError
  commentId: T:Dropbox.Api.Files.GetMetadataError
  parent: Dropbox.Api.Files
  name: GetMetadataError
  nameWithType: GetMetadataError
  fullName: Dropbox.Api.Files.GetMetadataError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync
  name: GetMetadataAsync
  nameWithType: FilesUserRoutes.GetMetadataAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetMetadataAsync
- uid: Dropbox.Api.Files.GetMetadataArg
  commentId: T:Dropbox.Api.Files.GetMetadataArg
  parent: Dropbox.Api.Files
  name: GetMetadataArg
  nameWithType: GetMetadataArg
  fullName: Dropbox.Api.Files.GetMetadataArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata
  name: BeginGetMetadata
  nameWithType: FilesUserRoutes.BeginGetMetadata
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetMetadata
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata
  name: EndGetMetadata
  nameWithType: FilesUserRoutes.EndGetMetadata
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetMetadata
- uid: Dropbox.Api.Files.PreviewError
  commentId: T:Dropbox.Api.Files.PreviewError
  parent: Dropbox.Api.Files
  name: PreviewError
  nameWithType: PreviewError
  fullName: Dropbox.Api.Files.PreviewError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync
  name: GetPreviewAsync
  nameWithType: FilesUserRoutes.GetPreviewAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetPreviewAsync
- uid: Dropbox.Api.Files.PreviewArg
  commentId: T:Dropbox.Api.Files.PreviewArg
  parent: Dropbox.Api.Files
  name: PreviewArg
  nameWithType: PreviewArg
  fullName: Dropbox.Api.Files.PreviewArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview
  name: BeginGetPreview
  nameWithType: FilesUserRoutes.BeginGetPreview
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetPreview
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview
  name: EndGetPreview
  nameWithType: FilesUserRoutes.EndGetPreview
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetPreview
- uid: Dropbox.Api.Files.GetTemporaryLinkError
  commentId: T:Dropbox.Api.Files.GetTemporaryLinkError
  parent: Dropbox.Api.Files
  name: GetTemporaryLinkError
  nameWithType: GetTemporaryLinkError
  fullName: Dropbox.Api.Files.GetTemporaryLinkError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync
  name: GetTemporaryLinkAsync
  nameWithType: FilesUserRoutes.GetTemporaryLinkAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryLinkAsync
- uid: Dropbox.Api.Files.GetTemporaryLinkArg
  commentId: T:Dropbox.Api.Files.GetTemporaryLinkArg
  parent: Dropbox.Api.Files
  name: GetTemporaryLinkArg
  nameWithType: GetTemporaryLinkArg
  fullName: Dropbox.Api.Files.GetTemporaryLinkArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryLinkResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryLinkResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<GetTemporaryLinkResult>
  nameWithType: System.Threading.Tasks.Task<GetTemporaryLinkResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.GetTemporaryLinkResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of GetTemporaryLinkResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.GetTemporaryLinkResult)
  name.vb: System.Threading.Tasks.Task(Of GetTemporaryLinkResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.GetTemporaryLinkResult
    name: GetTemporaryLinkResult
    nameWithType: GetTemporaryLinkResult
    fullName: Dropbox.Api.Files.GetTemporaryLinkResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.GetTemporaryLinkResult
    name: GetTemporaryLinkResult
    nameWithType: GetTemporaryLinkResult
    fullName: Dropbox.Api.Files.GetTemporaryLinkResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink
  name: BeginGetTemporaryLink
  nameWithType: FilesUserRoutes.BeginGetTemporaryLink
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryLink
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink
  name: EndGetTemporaryLink
  nameWithType: FilesUserRoutes.EndGetTemporaryLink
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryLink
- uid: Dropbox.Api.Files.GetTemporaryLinkResult
  commentId: T:Dropbox.Api.Files.GetTemporaryLinkResult
  parent: Dropbox.Api.Files
  name: GetTemporaryLinkResult
  nameWithType: GetTemporaryLinkResult
  fullName: Dropbox.Api.Files.GetTemporaryLinkResult
- uid: Dropbox.Api.Files.CommitInfo
  commentId: T:Dropbox.Api.Files.CommitInfo
  parent: Dropbox.Api.Files
  name: CommitInfo
  nameWithType: CommitInfo
  fullName: Dropbox.Api.Files.CommitInfo
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync(Dropbox.Api.Files.GetTemporaryUploadLinkArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync
  name: GetTemporaryUploadLinkAsync
  nameWithType: FilesUserRoutes.GetTemporaryUploadLinkAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetTemporaryUploadLinkAsync
- uid: Dropbox.Api.Files.GetTemporaryUploadLinkArg
  commentId: T:Dropbox.Api.Files.GetTemporaryUploadLinkArg
  parent: Dropbox.Api.Files
  name: GetTemporaryUploadLinkArg
  nameWithType: GetTemporaryUploadLinkArg
  fullName: Dropbox.Api.Files.GetTemporaryUploadLinkArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryUploadLinkResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.GetTemporaryUploadLinkResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<GetTemporaryUploadLinkResult>
  nameWithType: System.Threading.Tasks.Task<GetTemporaryUploadLinkResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.GetTemporaryUploadLinkResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of GetTemporaryUploadLinkResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.GetTemporaryUploadLinkResult)
  name.vb: System.Threading.Tasks.Task(Of GetTemporaryUploadLinkResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.GetTemporaryUploadLinkResult
    name: GetTemporaryUploadLinkResult
    nameWithType: GetTemporaryUploadLinkResult
    fullName: Dropbox.Api.Files.GetTemporaryUploadLinkResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.GetTemporaryUploadLinkResult
    name: GetTemporaryUploadLinkResult
    nameWithType: GetTemporaryUploadLinkResult
    fullName: Dropbox.Api.Files.GetTemporaryUploadLinkResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink
  name: BeginGetTemporaryUploadLink
  nameWithType: FilesUserRoutes.BeginGetTemporaryUploadLink
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetTemporaryUploadLink
- uid: System.Double
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink
  name: EndGetTemporaryUploadLink
  nameWithType: FilesUserRoutes.EndGetTemporaryUploadLink
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetTemporaryUploadLink
- uid: Dropbox.Api.Files.GetTemporaryUploadLinkResult
  commentId: T:Dropbox.Api.Files.GetTemporaryUploadLinkResult
  parent: Dropbox.Api.Files
  name: GetTemporaryUploadLinkResult
  nameWithType: GetTemporaryUploadLinkResult
  fullName: Dropbox.Api.Files.GetTemporaryUploadLinkResult
- uid: Dropbox.Api.Files.ThumbnailError
  commentId: T:Dropbox.Api.Files.ThumbnailError
  parent: Dropbox.Api.Files
  name: ThumbnailError
  nameWithType: ThumbnailError
  fullName: Dropbox.Api.Files.ThumbnailError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync
  name: GetThumbnailAsync
  nameWithType: FilesUserRoutes.GetThumbnailAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailAsync
- uid: Dropbox.Api.Files.ThumbnailArg
  commentId: T:Dropbox.Api.Files.ThumbnailArg
  parent: Dropbox.Api.Files
  name: ThumbnailArg
  nameWithType: ThumbnailArg
  fullName: Dropbox.Api.Files.ThumbnailArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail
  name: BeginGetThumbnail
  nameWithType: FilesUserRoutes.BeginGetThumbnail
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnail
- uid: Dropbox.Api.Files.ThumbnailFormat
  commentId: T:Dropbox.Api.Files.ThumbnailFormat
  parent: Dropbox.Api.Files
  name: ThumbnailFormat
  nameWithType: ThumbnailFormat
  fullName: Dropbox.Api.Files.ThumbnailFormat
- uid: Dropbox.Api.Files.ThumbnailSize
  commentId: T:Dropbox.Api.Files.ThumbnailSize
  parent: Dropbox.Api.Files
  name: ThumbnailSize
  nameWithType: ThumbnailSize
  fullName: Dropbox.Api.Files.ThumbnailSize
- uid: Dropbox.Api.Files.ThumbnailMode
  commentId: T:Dropbox.Api.Files.ThumbnailMode
  parent: Dropbox.Api.Files
  name: ThumbnailMode
  nameWithType: ThumbnailMode
  fullName: Dropbox.Api.Files.ThumbnailMode
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail
  name: EndGetThumbnail
  nameWithType: FilesUserRoutes.EndGetThumbnail
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnail
- uid: Dropbox.Api.Files.ThumbnailV2Error
  commentId: T:Dropbox.Api.Files.ThumbnailV2Error
  parent: Dropbox.Api.Files
  name: ThumbnailV2Error
  nameWithType: ThumbnailV2Error
  fullName: Dropbox.Api.Files.ThumbnailV2Error
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async
  name: GetThumbnailV2Async
  nameWithType: FilesUserRoutes.GetThumbnailV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailV2Async
- uid: Dropbox.Api.Files.ThumbnailV2Arg
  commentId: T:Dropbox.Api.Files.ThumbnailV2Arg
  parent: Dropbox.Api.Files
  name: ThumbnailV2Arg
  nameWithType: ThumbnailV2Arg
  fullName: Dropbox.Api.Files.ThumbnailV2Arg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<IDownloadResponse<PreviewResult>>
  nameWithType: System.Threading.Tasks.Task<IDownloadResponse<PreviewResult>>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.PreviewResult>>
  nameWithType.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of PreviewResult))
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.PreviewResult))
  name.vb: System.Threading.Tasks.Task(Of IDownloadResponse(Of PreviewResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2
  name: BeginGetThumbnailV2
  nameWithType: FilesUserRoutes.BeginGetThumbnailV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailV2
- uid: Dropbox.Api.Files.PathOrLink
  commentId: T:Dropbox.Api.Files.PathOrLink
  parent: Dropbox.Api.Files
  name: PathOrLink
  nameWithType: PathOrLink
  fullName: Dropbox.Api.Files.PathOrLink
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2
  name: EndGetThumbnailV2
  nameWithType: FilesUserRoutes.EndGetThumbnailV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailV2
- uid: Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}
  commentId: T:Dropbox.Api.Stone.IDownloadResponse{Dropbox.Api.Files.PreviewResult}
  parent: Dropbox.Api.Stone
  definition: Dropbox.Api.Stone.IDownloadResponse`1
  name: IDownloadResponse<PreviewResult>
  nameWithType: IDownloadResponse<PreviewResult>
  fullName: Dropbox.Api.Stone.IDownloadResponse<Dropbox.Api.Files.PreviewResult>
  nameWithType.vb: IDownloadResponse(Of PreviewResult)
  fullName.vb: Dropbox.Api.Stone.IDownloadResponse(Of Dropbox.Api.Files.PreviewResult)
  name.vb: IDownloadResponse(Of PreviewResult)
  spec.csharp:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dropbox.Api.Stone.IDownloadResponse`1
    name: IDownloadResponse
    nameWithType: IDownloadResponse
    fullName: Dropbox.Api.Stone.IDownloadResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PreviewResult
    name: PreviewResult
    nameWithType: PreviewResult
    fullName: Dropbox.Api.Files.PreviewResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.GetThumbnailBatchError
  commentId: T:Dropbox.Api.Files.GetThumbnailBatchError
  parent: Dropbox.Api.Files
  name: GetThumbnailBatchError
  nameWithType: GetThumbnailBatchError
  fullName: Dropbox.Api.Files.GetThumbnailBatchError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync
  name: GetThumbnailBatchAsync
  nameWithType: FilesUserRoutes.GetThumbnailBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.GetThumbnailBatchAsync
- uid: Dropbox.Api.Files.GetThumbnailBatchArg
  commentId: T:Dropbox.Api.Files.GetThumbnailBatchArg
  parent: Dropbox.Api.Files
  name: GetThumbnailBatchArg
  nameWithType: GetThumbnailBatchArg
  fullName: Dropbox.Api.Files.GetThumbnailBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.GetThumbnailBatchResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.GetThumbnailBatchResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<GetThumbnailBatchResult>
  nameWithType: System.Threading.Tasks.Task<GetThumbnailBatchResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.GetThumbnailBatchResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of GetThumbnailBatchResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.GetThumbnailBatchResult)
  name.vb: System.Threading.Tasks.Task(Of GetThumbnailBatchResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.GetThumbnailBatchResult
    name: GetThumbnailBatchResult
    nameWithType: GetThumbnailBatchResult
    fullName: Dropbox.Api.Files.GetThumbnailBatchResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.GetThumbnailBatchResult
    name: GetThumbnailBatchResult
    nameWithType: GetThumbnailBatchResult
    fullName: Dropbox.Api.Files.GetThumbnailBatchResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch
  name: BeginGetThumbnailBatch
  nameWithType: FilesUserRoutes.BeginGetThumbnailBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginGetThumbnailBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg}
  commentId: '!:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.ThumbnailArg}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<ThumbnailArg>
  nameWithType: System.Collections.Generic.IEnumerable<ThumbnailArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.ThumbnailArg>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of ThumbnailArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.ThumbnailArg)
  name.vb: System.Collections.Generic.IEnumerable(Of ThumbnailArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ThumbnailArg
    name: ThumbnailArg
    nameWithType: ThumbnailArg
    fullName: Dropbox.Api.Files.ThumbnailArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ThumbnailArg
    name: ThumbnailArg
    nameWithType: ThumbnailArg
    fullName: Dropbox.Api.Files.ThumbnailArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch
  name: EndGetThumbnailBatch
  nameWithType: FilesUserRoutes.EndGetThumbnailBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndGetThumbnailBatch
- uid: Dropbox.Api.Files.GetThumbnailBatchResult
  commentId: T:Dropbox.Api.Files.GetThumbnailBatchResult
  parent: Dropbox.Api.Files
  name: GetThumbnailBatchResult
  nameWithType: GetThumbnailBatchResult
  fullName: Dropbox.Api.Files.GetThumbnailBatchResult
- uid: Dropbox.Api.Files.ListFolderResult.HasMore
  commentId: P:Dropbox.Api.Files.ListFolderResult.HasMore
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync(Dropbox.Api.Files.ListFolderContinueArg)
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderResult.Cursor
  commentId: P:Dropbox.Api.Files.ListFolderResult.Cursor
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderArg.Recursive
  commentId: P:Dropbox.Api.Files.ListFolderArg.Recursive
  isExternal: true
- uid: Dropbox.Api.Auth.RateLimitError
  commentId: T:Dropbox.Api.Auth.RateLimitError
  name: RateLimitError
  nameWithType: RateLimitError
  fullName: Dropbox.Api.Auth.RateLimitError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync(Dropbox.Api.Files.ListFolderArg)
  isExternal: true
- uid: Dropbox.Api.Files.ListFolderError
  commentId: T:Dropbox.Api.Files.ListFolderError
  parent: Dropbox.Api.Files
  name: ListFolderError
  nameWithType: ListFolderError
  fullName: Dropbox.Api.Files.ListFolderError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync
  name: ListFolderAsync
  nameWithType: FilesUserRoutes.ListFolderAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderAsync
- uid: Dropbox.Api.Files.ListFolderArg
  commentId: T:Dropbox.Api.Files.ListFolderArg
  parent: Dropbox.Api.Files
  name: ListFolderArg
  nameWithType: ListFolderArg
  fullName: Dropbox.Api.Files.ListFolderArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<ListFolderResult>
  nameWithType: System.Threading.Tasks.Task<ListFolderResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.ListFolderResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of ListFolderResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.ListFolderResult)
  name.vb: System.Threading.Tasks.Task(Of ListFolderResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ListFolderResult
    name: ListFolderResult
    nameWithType: ListFolderResult
    fullName: Dropbox.Api.Files.ListFolderResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ListFolderResult
    name: ListFolderResult
    nameWithType: ListFolderResult
    fullName: Dropbox.Api.Files.ListFolderResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder
  name: BeginListFolder
  nameWithType: FilesUserRoutes.BeginListFolder
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolder
- uid: Dropbox.Api.Files.ListFolderArg.Path
  commentId: P:Dropbox.Api.Files.ListFolderArg.Path
  isExternal: true
- uid: System.Nullable{System.UInt32}
  commentId: '!:System.Nullable{System.UInt32}'
  definition: System.Nullable`1
  name: Nullable<UInt32>
  nameWithType: Nullable<UInt32>
  fullName: System.Nullable<System.UInt32>
  nameWithType.vb: Nullable(Of UInt32)
  fullName.vb: System.Nullable(Of System.UInt32)
  name.vb: Nullable(Of UInt32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.SharedLink
  commentId: T:Dropbox.Api.Files.SharedLink
  parent: Dropbox.Api.Files
  name: SharedLink
  nameWithType: SharedLink
  fullName: Dropbox.Api.Files.SharedLink
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder
  name: EndListFolder
  nameWithType: FilesUserRoutes.EndListFolder
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolder
- uid: Dropbox.Api.Files.ListFolderResult
  commentId: T:Dropbox.Api.Files.ListFolderResult
  parent: Dropbox.Api.Files
  name: ListFolderResult
  nameWithType: ListFolderResult
  fullName: Dropbox.Api.Files.ListFolderResult
- uid: Dropbox.Api.Files.ListFolderContinueError
  commentId: T:Dropbox.Api.Files.ListFolderContinueError
  parent: Dropbox.Api.Files
  name: ListFolderContinueError
  nameWithType: ListFolderContinueError
  fullName: Dropbox.Api.Files.ListFolderContinueError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync
  name: ListFolderContinueAsync
  nameWithType: FilesUserRoutes.ListFolderContinueAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderContinueAsync
- uid: Dropbox.Api.Files.ListFolderContinueArg
  commentId: T:Dropbox.Api.Files.ListFolderContinueArg
  parent: Dropbox.Api.Files
  name: ListFolderContinueArg
  nameWithType: ListFolderContinueArg
  fullName: Dropbox.Api.Files.ListFolderContinueArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue
  name: BeginListFolderContinue
  nameWithType: FilesUserRoutes.BeginListFolderContinue
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderContinue
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue
  name: EndListFolderContinue
  nameWithType: FilesUserRoutes.EndListFolderContinue
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderContinue
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync(Dropbox.Api.Files.ListFolderArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync
  name: ListFolderGetLatestCursorAsync
  nameWithType: FilesUserRoutes.ListFolderGetLatestCursorAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderGetLatestCursorAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderGetLatestCursorResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderGetLatestCursorResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<ListFolderGetLatestCursorResult>
  nameWithType: System.Threading.Tasks.Task<ListFolderGetLatestCursorResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.ListFolderGetLatestCursorResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of ListFolderGetLatestCursorResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.ListFolderGetLatestCursorResult)
  name.vb: System.Threading.Tasks.Task(Of ListFolderGetLatestCursorResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ListFolderGetLatestCursorResult
    name: ListFolderGetLatestCursorResult
    nameWithType: ListFolderGetLatestCursorResult
    fullName: Dropbox.Api.Files.ListFolderGetLatestCursorResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ListFolderGetLatestCursorResult
    name: ListFolderGetLatestCursorResult
    nameWithType: ListFolderGetLatestCursorResult
    fullName: Dropbox.Api.Files.ListFolderGetLatestCursorResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor
  name: BeginListFolderGetLatestCursor
  nameWithType: FilesUserRoutes.BeginListFolderGetLatestCursor
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderGetLatestCursor
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor
  name: EndListFolderGetLatestCursor
  nameWithType: FilesUserRoutes.EndListFolderGetLatestCursor
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderGetLatestCursor
- uid: Dropbox.Api.Files.ListFolderGetLatestCursorResult
  commentId: T:Dropbox.Api.Files.ListFolderGetLatestCursorResult
  parent: Dropbox.Api.Files
  name: ListFolderGetLatestCursorResult
  nameWithType: ListFolderGetLatestCursorResult
  fullName: Dropbox.Api.Files.ListFolderGetLatestCursorResult
- uid: Dropbox.Api.Files.ListFolderLongpollError
  commentId: T:Dropbox.Api.Files.ListFolderLongpollError
  parent: Dropbox.Api.Files
  name: ListFolderLongpollError
  nameWithType: ListFolderLongpollError
  fullName: Dropbox.Api.Files.ListFolderLongpollError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync
  name: ListFolderLongpollAsync
  nameWithType: FilesUserRoutes.ListFolderLongpollAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListFolderLongpollAsync
- uid: Dropbox.Api.Files.ListFolderLongpollArg
  commentId: T:Dropbox.Api.Files.ListFolderLongpollArg
  parent: Dropbox.Api.Files
  name: ListFolderLongpollArg
  nameWithType: ListFolderLongpollArg
  fullName: Dropbox.Api.Files.ListFolderLongpollArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderLongpollResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.ListFolderLongpollResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<ListFolderLongpollResult>
  nameWithType: System.Threading.Tasks.Task<ListFolderLongpollResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.ListFolderLongpollResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of ListFolderLongpollResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.ListFolderLongpollResult)
  name.vb: System.Threading.Tasks.Task(Of ListFolderLongpollResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ListFolderLongpollResult
    name: ListFolderLongpollResult
    nameWithType: ListFolderLongpollResult
    fullName: Dropbox.Api.Files.ListFolderLongpollResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ListFolderLongpollResult
    name: ListFolderLongpollResult
    nameWithType: ListFolderLongpollResult
    fullName: Dropbox.Api.Files.ListFolderLongpollResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll
  name: BeginListFolderLongpoll
  nameWithType: FilesUserRoutes.BeginListFolderLongpoll
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListFolderLongpoll
- uid: Dropbox.Api.Files.ListFolderArg.IncludeMediaInfo
  commentId: P:Dropbox.Api.Files.ListFolderArg.IncludeMediaInfo
  isExternal: true
- uid: System.UInt64
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll
  name: EndListFolderLongpoll
  nameWithType: FilesUserRoutes.EndListFolderLongpoll
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListFolderLongpoll
- uid: Dropbox.Api.Files.ListFolderLongpollResult
  commentId: T:Dropbox.Api.Files.ListFolderLongpollResult
  parent: Dropbox.Api.Files
  name: ListFolderLongpollResult
  nameWithType: ListFolderLongpollResult
  fullName: Dropbox.Api.Files.ListFolderLongpollResult
- uid: Dropbox.Api.Files.ListRevisionsMode.Path
  commentId: T:Dropbox.Api.Files.ListRevisionsMode.Path
  parent: Dropbox.Api.Files
  name: ListRevisionsMode.Path
  nameWithType: ListRevisionsMode.Path
  fullName: Dropbox.Api.Files.ListRevisionsMode.Path
- uid: Dropbox.Api.Files.ListRevisionsMode.Id
  commentId: T:Dropbox.Api.Files.ListRevisionsMode.Id
  parent: Dropbox.Api.Files
  name: ListRevisionsMode.Id
  nameWithType: ListRevisionsMode.Id
  fullName: Dropbox.Api.Files.ListRevisionsMode.Id
- uid: Dropbox.Api.Files.ListRevisionsError
  commentId: T:Dropbox.Api.Files.ListRevisionsError
  parent: Dropbox.Api.Files
  name: ListRevisionsError
  nameWithType: ListRevisionsError
  fullName: Dropbox.Api.Files.ListRevisionsError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync
  name: ListRevisionsAsync
  nameWithType: FilesUserRoutes.ListRevisionsAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.ListRevisionsAsync
- uid: Dropbox.Api.Files.ListRevisionsArg
  commentId: T:Dropbox.Api.Files.ListRevisionsArg
  parent: Dropbox.Api.Files
  name: ListRevisionsArg
  nameWithType: ListRevisionsArg
  fullName: Dropbox.Api.Files.ListRevisionsArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.ListRevisionsResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.ListRevisionsResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<ListRevisionsResult>
  nameWithType: System.Threading.Tasks.Task<ListRevisionsResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.ListRevisionsResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of ListRevisionsResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.ListRevisionsResult)
  name.vb: System.Threading.Tasks.Task(Of ListRevisionsResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.ListRevisionsResult
    name: ListRevisionsResult
    nameWithType: ListRevisionsResult
    fullName: Dropbox.Api.Files.ListRevisionsResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.ListRevisionsResult
    name: ListRevisionsResult
    nameWithType: ListRevisionsResult
    fullName: Dropbox.Api.Files.ListRevisionsResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions
  name: BeginListRevisions
  nameWithType: FilesUserRoutes.BeginListRevisions
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginListRevisions
- uid: Dropbox.Api.Files.ListRevisionsMode
  commentId: T:Dropbox.Api.Files.ListRevisionsMode
  parent: Dropbox.Api.Files
  name: ListRevisionsMode
  nameWithType: ListRevisionsMode
  fullName: Dropbox.Api.Files.ListRevisionsMode
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions
  name: EndListRevisions
  nameWithType: FilesUserRoutes.EndListRevisions
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndListRevisions
- uid: Dropbox.Api.Files.ListRevisionsResult
  commentId: T:Dropbox.Api.Files.ListRevisionsResult
  parent: Dropbox.Api.Files
  name: ListRevisionsResult
  nameWithType: ListRevisionsResult
  fullName: Dropbox.Api.Files.ListRevisionsResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync
  name: LockFileBatchAsync
  nameWithType: FilesUserRoutes.LockFileBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.LockFileBatchAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch
  name: BeginLockFileBatch
  nameWithType: FilesUserRoutes.BeginLockFileBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginLockFileBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch
  name: EndLockFileBatch
  nameWithType: FilesUserRoutes.EndLockFileBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndLockFileBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async
  name: MoveV2Async
  nameWithType: FilesUserRoutes.MoveV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveV2Async
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2
  name: BeginMoveV2
  nameWithType: FilesUserRoutes.BeginMoveV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2
  name: EndMoveV2
  nameWithType: FilesUserRoutes.EndMoveV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync
  name: MoveAsync
  nameWithType: FilesUserRoutes.MoveAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove
  name: BeginMove
  nameWithType: FilesUserRoutes.BeginMove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMove
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove
  name: EndMove
  nameWithType: FilesUserRoutes.EndMove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMove
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync(Dropbox.Api.Files.RelocationBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async
  name: MoveBatchV2Async
  nameWithType: FilesUserRoutes.MoveBatchV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async
- uid: Dropbox.Api.Files.MoveBatchArg
  commentId: T:Dropbox.Api.Files.MoveBatchArg
  parent: Dropbox.Api.Files
  name: MoveBatchArg
  nameWithType: MoveBatchArg
  fullName: Dropbox.Api.Files.MoveBatchArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2
  name: BeginMoveBatchV2
  nameWithType: FilesUserRoutes.BeginMoveBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2
  name: EndMoveBatchV2
  nameWithType: FilesUserRoutes.EndMoveBatchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync
  name: MoveBatchAsync
  nameWithType: FilesUserRoutes.MoveBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch
  name: BeginMoveBatch
  nameWithType: FilesUserRoutes.BeginMoveBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch
  name: EndMoveBatch
  nameWithType: FilesUserRoutes.EndMoveBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchV2Async(Dropbox.Api.Files.MoveBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async
  name: MoveBatchCheckV2Async
  nameWithType: FilesUserRoutes.MoveBatchCheckV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckV2Async
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2
  name: BeginMoveBatchCheckV2
  nameWithType: FilesUserRoutes.BeginMoveBatchCheckV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheckV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2
  name: EndMoveBatchCheckV2
  nameWithType: FilesUserRoutes.EndMoveBatchCheckV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheckV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync
  name: MoveBatchCheckAsync
  nameWithType: FilesUserRoutes.MoveBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.MoveBatchCheckAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck
  name: BeginMoveBatchCheck
  nameWithType: FilesUserRoutes.BeginMoveBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginMoveBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck
  name: EndMoveBatchCheck
  nameWithType: FilesUserRoutes.EndMoveBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndMoveBatchCheck
- uid: Dropbox.Api.Files.PaperCreateError
  commentId: T:Dropbox.Api.Files.PaperCreateError
  parent: Dropbox.Api.Files
  name: PaperCreateError
  nameWithType: PaperCreateError
  fullName: Dropbox.Api.Files.PaperCreateError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync
  name: PaperCreateAsync
  nameWithType: FilesUserRoutes.PaperCreateAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperCreateAsync
- uid: Dropbox.Api.Files.PaperCreateArg
  commentId: T:Dropbox.Api.Files.PaperCreateArg
  parent: Dropbox.Api.Files
  name: PaperCreateArg
  nameWithType: PaperCreateArg
  fullName: Dropbox.Api.Files.PaperCreateArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperCreateResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.PaperCreateResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<PaperCreateResult>
  nameWithType: System.Threading.Tasks.Task<PaperCreateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.PaperCreateResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of PaperCreateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.PaperCreateResult)
  name.vb: System.Threading.Tasks.Task(Of PaperCreateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PaperCreateResult
    name: PaperCreateResult
    nameWithType: PaperCreateResult
    fullName: Dropbox.Api.Files.PaperCreateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PaperCreateResult
    name: PaperCreateResult
    nameWithType: PaperCreateResult
    fullName: Dropbox.Api.Files.PaperCreateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate
  name: BeginPaperCreate
  nameWithType: FilesUserRoutes.BeginPaperCreate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperCreate
- uid: Dropbox.Api.Files.ImportFormat
  commentId: T:Dropbox.Api.Files.ImportFormat
  parent: Dropbox.Api.Files
  name: ImportFormat
  nameWithType: ImportFormat
  fullName: Dropbox.Api.Files.ImportFormat
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate
  name: EndPaperCreate
  nameWithType: FilesUserRoutes.EndPaperCreate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperCreate
- uid: Dropbox.Api.Files.PaperCreateResult
  commentId: T:Dropbox.Api.Files.PaperCreateResult
  parent: Dropbox.Api.Files
  name: PaperCreateResult
  nameWithType: PaperCreateResult
  fullName: Dropbox.Api.Files.PaperCreateResult
- uid: Dropbox.Api.Files.PaperUpdateError
  commentId: T:Dropbox.Api.Files.PaperUpdateError
  parent: Dropbox.Api.Files
  name: PaperUpdateError
  nameWithType: PaperUpdateError
  fullName: Dropbox.Api.Files.PaperUpdateError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync
  name: PaperUpdateAsync
  nameWithType: FilesUserRoutes.PaperUpdateAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PaperUpdateAsync
- uid: Dropbox.Api.Files.PaperUpdateArg
  commentId: T:Dropbox.Api.Files.PaperUpdateArg
  parent: Dropbox.Api.Files
  name: PaperUpdateArg
  nameWithType: PaperUpdateArg
  fullName: Dropbox.Api.Files.PaperUpdateArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.PaperUpdateResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.PaperUpdateResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<PaperUpdateResult>
  nameWithType: System.Threading.Tasks.Task<PaperUpdateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.PaperUpdateResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of PaperUpdateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.PaperUpdateResult)
  name.vb: System.Threading.Tasks.Task(Of PaperUpdateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.PaperUpdateResult
    name: PaperUpdateResult
    nameWithType: PaperUpdateResult
    fullName: Dropbox.Api.Files.PaperUpdateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.PaperUpdateResult
    name: PaperUpdateResult
    nameWithType: PaperUpdateResult
    fullName: Dropbox.Api.Files.PaperUpdateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate
  name: BeginPaperUpdate
  nameWithType: FilesUserRoutes.BeginPaperUpdate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPaperUpdate
- uid: Dropbox.Api.Files.PaperDocUpdatePolicy
  commentId: T:Dropbox.Api.Files.PaperDocUpdatePolicy
  parent: Dropbox.Api.Files
  name: PaperDocUpdatePolicy
  nameWithType: PaperDocUpdatePolicy
  fullName: Dropbox.Api.Files.PaperDocUpdatePolicy
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate
  name: EndPaperUpdate
  nameWithType: FilesUserRoutes.EndPaperUpdate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPaperUpdate
- uid: Dropbox.Api.Files.PaperUpdateResult
  commentId: T:Dropbox.Api.Files.PaperUpdateResult
  parent: Dropbox.Api.Files
  name: PaperUpdateResult
  nameWithType: PaperUpdateResult
  fullName: Dropbox.Api.Files.PaperUpdateResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync
  name: PermanentlyDeleteAsync
  nameWithType: FilesUserRoutes.PermanentlyDeleteAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PermanentlyDeleteAsync
- uid: System.Threading.Tasks.Task
  isExternal: true
  name: System.Threading.Tasks.Task
  nameWithType: System.Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete
  name: BeginPermanentlyDelete
  nameWithType: FilesUserRoutes.BeginPermanentlyDelete
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPermanentlyDelete
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete
  name: EndPermanentlyDelete
  nameWithType: FilesUserRoutes.EndPermanentlyDelete
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPermanentlyDelete
- uid: Dropbox.Api.FileProperties.AddPropertiesError
  commentId: T:Dropbox.Api.FileProperties.AddPropertiesError
  parent: Dropbox.Api.FileProperties
  name: AddPropertiesError
  nameWithType: AddPropertiesError
  fullName: Dropbox.Api.FileProperties.AddPropertiesError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync
  name: PropertiesAddAsync
  nameWithType: FilesUserRoutes.PropertiesAddAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesAddAsync
- uid: Dropbox.Api.FileProperties.AddPropertiesArg
  commentId: T:Dropbox.Api.FileProperties.AddPropertiesArg
  parent: Dropbox.Api.FileProperties
  name: AddPropertiesArg
  nameWithType: AddPropertiesArg
  fullName: Dropbox.Api.FileProperties.AddPropertiesArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd
  name: BeginPropertiesAdd
  nameWithType: FilesUserRoutes.BeginPropertiesAdd
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesAdd
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd
  name: EndPropertiesAdd
  nameWithType: FilesUserRoutes.EndPropertiesAdd
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesAdd
- uid: Dropbox.Api.FileProperties.InvalidPropertyGroupError
  commentId: T:Dropbox.Api.FileProperties.InvalidPropertyGroupError
  parent: Dropbox.Api.FileProperties
  name: InvalidPropertyGroupError
  nameWithType: InvalidPropertyGroupError
  fullName: Dropbox.Api.FileProperties.InvalidPropertyGroupError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync
  name: PropertiesOverwriteAsync
  nameWithType: FilesUserRoutes.PropertiesOverwriteAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesOverwriteAsync
- uid: Dropbox.Api.FileProperties.OverwritePropertyGroupArg
  commentId: T:Dropbox.Api.FileProperties.OverwritePropertyGroupArg
  parent: Dropbox.Api.FileProperties
  name: OverwritePropertyGroupArg
  nameWithType: OverwritePropertyGroupArg
  fullName: Dropbox.Api.FileProperties.OverwritePropertyGroupArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite
  name: BeginPropertiesOverwrite
  nameWithType: FilesUserRoutes.BeginPropertiesOverwrite
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesOverwrite
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite
  name: EndPropertiesOverwrite
  nameWithType: FilesUserRoutes.EndPropertiesOverwrite
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesOverwrite
- uid: Dropbox.Api.FileProperties.RemovePropertiesError
  commentId: T:Dropbox.Api.FileProperties.RemovePropertiesError
  parent: Dropbox.Api.FileProperties
  name: RemovePropertiesError
  nameWithType: RemovePropertiesError
  fullName: Dropbox.Api.FileProperties.RemovePropertiesError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync
  name: PropertiesRemoveAsync
  nameWithType: FilesUserRoutes.PropertiesRemoveAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesRemoveAsync
- uid: Dropbox.Api.FileProperties.RemovePropertiesArg
  commentId: T:Dropbox.Api.FileProperties.RemovePropertiesArg
  parent: Dropbox.Api.FileProperties
  name: RemovePropertiesArg
  nameWithType: RemovePropertiesArg
  fullName: Dropbox.Api.FileProperties.RemovePropertiesArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove
  name: BeginPropertiesRemove
  nameWithType: FilesUserRoutes.BeginPropertiesRemove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesRemove
- uid: Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)
  commentId: M:Dropbox.Api.FileProperties.Routes.FilePropertiesUserRoutes.TemplatesAddForUserAsync(Dropbox.Api.FileProperties.AddTemplateArg)
  isExternal: true
- uid: Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)
  commentId: M:Dropbox.Api.FileProperties.Routes.FilePropertiesTeamRoutes.TemplatesAddForTeamAsync(Dropbox.Api.FileProperties.AddTemplateArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove
  name: EndPropertiesRemove
  nameWithType: FilesUserRoutes.EndPropertiesRemove
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesRemove
- uid: Dropbox.Api.FileProperties.TemplateError
  commentId: T:Dropbox.Api.FileProperties.TemplateError
  parent: Dropbox.Api.FileProperties
  name: TemplateError
  nameWithType: TemplateError
  fullName: Dropbox.Api.FileProperties.TemplateError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync
  name: PropertiesTemplateGetAsync
  nameWithType: FilesUserRoutes.PropertiesTemplateGetAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateGetAsync
- uid: Dropbox.Api.FileProperties.GetTemplateArg
  commentId: T:Dropbox.Api.FileProperties.GetTemplateArg
  parent: Dropbox.Api.FileProperties
  name: GetTemplateArg
  nameWithType: GetTemplateArg
  fullName: Dropbox.Api.FileProperties.GetTemplateArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.GetTemplateResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.FileProperties.GetTemplateResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<GetTemplateResult>
  nameWithType: System.Threading.Tasks.Task<GetTemplateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.FileProperties.GetTemplateResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of GetTemplateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.FileProperties.GetTemplateResult)
  name.vb: System.Threading.Tasks.Task(Of GetTemplateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.GetTemplateResult
    name: GetTemplateResult
    nameWithType: GetTemplateResult
    fullName: Dropbox.Api.FileProperties.GetTemplateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.GetTemplateResult
    name: GetTemplateResult
    nameWithType: GetTemplateResult
    fullName: Dropbox.Api.FileProperties.GetTemplateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet
  name: BeginPropertiesTemplateGet
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateGet
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet
  name: EndPropertiesTemplateGet
  nameWithType: FilesUserRoutes.EndPropertiesTemplateGet
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateGet
- uid: Dropbox.Api.FileProperties.GetTemplateResult
  commentId: T:Dropbox.Api.FileProperties.GetTemplateResult
  parent: Dropbox.Api.FileProperties
  name: GetTemplateResult
  nameWithType: GetTemplateResult
  fullName: Dropbox.Api.FileProperties.GetTemplateResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
  name: PropertiesTemplateListAsync
  nameWithType: FilesUserRoutes.PropertiesTemplateListAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesTemplateListAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.FileProperties.ListTemplateResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.FileProperties.ListTemplateResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<ListTemplateResult>
  nameWithType: System.Threading.Tasks.Task<ListTemplateResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.FileProperties.ListTemplateResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of ListTemplateResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.FileProperties.ListTemplateResult)
  name.vb: System.Threading.Tasks.Task(Of ListTemplateResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.ListTemplateResult
    name: ListTemplateResult
    nameWithType: ListTemplateResult
    fullName: Dropbox.Api.FileProperties.ListTemplateResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.ListTemplateResult
    name: ListTemplateResult
    nameWithType: ListTemplateResult
    fullName: Dropbox.Api.FileProperties.ListTemplateResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList
  name: BeginPropertiesTemplateList
  nameWithType: FilesUserRoutes.BeginPropertiesTemplateList
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesTemplateList
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList
  name: EndPropertiesTemplateList
  nameWithType: FilesUserRoutes.EndPropertiesTemplateList
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesTemplateList
- uid: Dropbox.Api.FileProperties.ListTemplateResult
  commentId: T:Dropbox.Api.FileProperties.ListTemplateResult
  parent: Dropbox.Api.FileProperties
  name: ListTemplateResult
  nameWithType: ListTemplateResult
  fullName: Dropbox.Api.FileProperties.ListTemplateResult
- uid: Dropbox.Api.FileProperties.UpdatePropertiesError
  commentId: T:Dropbox.Api.FileProperties.UpdatePropertiesError
  parent: Dropbox.Api.FileProperties
  name: UpdatePropertiesError
  nameWithType: UpdatePropertiesError
  fullName: Dropbox.Api.FileProperties.UpdatePropertiesError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync
  name: PropertiesUpdateAsync
  nameWithType: FilesUserRoutes.PropertiesUpdateAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.PropertiesUpdateAsync
- uid: Dropbox.Api.FileProperties.UpdatePropertiesArg
  commentId: T:Dropbox.Api.FileProperties.UpdatePropertiesArg
  parent: Dropbox.Api.FileProperties
  name: UpdatePropertiesArg
  nameWithType: UpdatePropertiesArg
  fullName: Dropbox.Api.FileProperties.UpdatePropertiesArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate
  name: BeginPropertiesUpdate
  nameWithType: FilesUserRoutes.BeginPropertiesUpdate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginPropertiesUpdate
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate}
  commentId: '!:System.Collections.Generic.IEnumerable{Dropbox.Api.FileProperties.PropertyGroupUpdate}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<PropertyGroupUpdate>
  nameWithType: System.Collections.Generic.IEnumerable<PropertyGroupUpdate>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.FileProperties.PropertyGroupUpdate>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of PropertyGroupUpdate)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.FileProperties.PropertyGroupUpdate)
  name.vb: System.Collections.Generic.IEnumerable(Of PropertyGroupUpdate)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.FileProperties.PropertyGroupUpdate
    name: PropertyGroupUpdate
    nameWithType: PropertyGroupUpdate
    fullName: Dropbox.Api.FileProperties.PropertyGroupUpdate
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.FileProperties.PropertyGroupUpdate
    name: PropertyGroupUpdate
    nameWithType: PropertyGroupUpdate
    fullName: Dropbox.Api.FileProperties.PropertyGroupUpdate
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate
  name: EndPropertiesUpdate
  nameWithType: FilesUserRoutes.EndPropertiesUpdate
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndPropertiesUpdate
- uid: Dropbox.Api.Files.RestoreError
  commentId: T:Dropbox.Api.Files.RestoreError
  parent: Dropbox.Api.Files
  name: RestoreError
  nameWithType: RestoreError
  fullName: Dropbox.Api.Files.RestoreError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync
  name: RestoreAsync
  nameWithType: FilesUserRoutes.RestoreAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.RestoreAsync
- uid: Dropbox.Api.Files.RestoreArg
  commentId: T:Dropbox.Api.Files.RestoreArg
  parent: Dropbox.Api.Files
  name: RestoreArg
  nameWithType: RestoreArg
  fullName: Dropbox.Api.Files.RestoreArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore
  name: BeginRestore
  nameWithType: FilesUserRoutes.BeginRestore
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginRestore
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore
  name: EndRestore
  nameWithType: FilesUserRoutes.EndRestore
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndRestore
- uid: Dropbox.Api.Files.SaveUrlError
  commentId: T:Dropbox.Api.Files.SaveUrlError
  parent: Dropbox.Api.Files
  name: SaveUrlError
  nameWithType: SaveUrlError
  fullName: Dropbox.Api.Files.SaveUrlError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync
  name: SaveUrlAsync
  nameWithType: FilesUserRoutes.SaveUrlAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync
- uid: Dropbox.Api.Files.SaveUrlArg
  commentId: T:Dropbox.Api.Files.SaveUrlArg
  parent: Dropbox.Api.Files
  name: SaveUrlArg
  nameWithType: SaveUrlArg
  fullName: Dropbox.Api.Files.SaveUrlArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<SaveUrlResult>
  nameWithType: System.Threading.Tasks.Task<SaveUrlResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SaveUrlResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of SaveUrlResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SaveUrlResult)
  name.vb: System.Threading.Tasks.Task(Of SaveUrlResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SaveUrlResult
    name: SaveUrlResult
    nameWithType: SaveUrlResult
    fullName: Dropbox.Api.Files.SaveUrlResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SaveUrlResult
    name: SaveUrlResult
    nameWithType: SaveUrlResult
    fullName: Dropbox.Api.Files.SaveUrlResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl
  name: BeginSaveUrl
  nameWithType: FilesUserRoutes.BeginSaveUrl
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrl
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl
  name: EndSaveUrl
  nameWithType: FilesUserRoutes.EndSaveUrl
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrl
- uid: Dropbox.Api.Files.SaveUrlResult
  commentId: T:Dropbox.Api.Files.SaveUrlResult
  parent: Dropbox.Api.Files
  name: SaveUrlResult
  nameWithType: SaveUrlResult
  fullName: Dropbox.Api.Files.SaveUrlResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlAsync(Dropbox.Api.Files.SaveUrlArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync
  name: SaveUrlCheckJobStatusAsync
  nameWithType: FilesUserRoutes.SaveUrlCheckJobStatusAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SaveUrlCheckJobStatusAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlJobStatus}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.SaveUrlJobStatus}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<SaveUrlJobStatus>
  nameWithType: System.Threading.Tasks.Task<SaveUrlJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SaveUrlJobStatus>
  nameWithType.vb: System.Threading.Tasks.Task(Of SaveUrlJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SaveUrlJobStatus)
  name.vb: System.Threading.Tasks.Task(Of SaveUrlJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SaveUrlJobStatus
    name: SaveUrlJobStatus
    nameWithType: SaveUrlJobStatus
    fullName: Dropbox.Api.Files.SaveUrlJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SaveUrlJobStatus
    name: SaveUrlJobStatus
    nameWithType: SaveUrlJobStatus
    fullName: Dropbox.Api.Files.SaveUrlJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus
  name: BeginSaveUrlCheckJobStatus
  nameWithType: FilesUserRoutes.BeginSaveUrlCheckJobStatus
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSaveUrlCheckJobStatus
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus
  name: EndSaveUrlCheckJobStatus
  nameWithType: FilesUserRoutes.EndSaveUrlCheckJobStatus
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSaveUrlCheckJobStatus
- uid: Dropbox.Api.Files.SaveUrlJobStatus
  commentId: T:Dropbox.Api.Files.SaveUrlJobStatus
  parent: Dropbox.Api.Files
  name: SaveUrlJobStatus
  nameWithType: SaveUrlJobStatus
  fullName: Dropbox.Api.Files.SaveUrlJobStatus
- uid: Dropbox.Api.Files.SearchError
  commentId: T:Dropbox.Api.Files.SearchError
  parent: Dropbox.Api.Files
  name: SearchError
  nameWithType: SearchError
  fullName: Dropbox.Api.Files.SearchError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync
  name: SearchAsync
  nameWithType: FilesUserRoutes.SearchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchAsync
- uid: Dropbox.Api.Files.SearchArg
  commentId: T:Dropbox.Api.Files.SearchArg
  parent: Dropbox.Api.Files
  name: SearchArg
  nameWithType: SearchArg
  fullName: Dropbox.Api.Files.SearchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.SearchResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<SearchResult>
  nameWithType: System.Threading.Tasks.Task<SearchResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SearchResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of SearchResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SearchResult)
  name.vb: System.Threading.Tasks.Task(Of SearchResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Dropbox.Api.Files.SearchResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: Dropbox.Api.Files.SearchResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch
  name: BeginSearch
  nameWithType: FilesUserRoutes.BeginSearch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearch
- uid: Dropbox.Api.Files.SearchMode
  commentId: T:Dropbox.Api.Files.SearchMode
  parent: Dropbox.Api.Files
  name: SearchMode
  nameWithType: SearchMode
  fullName: Dropbox.Api.Files.SearchMode
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch
  name: EndSearch
  nameWithType: FilesUserRoutes.EndSearch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearch
- uid: Dropbox.Api.Files.SearchResult
  commentId: T:Dropbox.Api.Files.SearchResult
  parent: Dropbox.Api.Files
  name: SearchResult
  nameWithType: SearchResult
  fullName: Dropbox.Api.Files.SearchResult
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async(Dropbox.Api.Files.SearchV2Arg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async(Dropbox.Api.Files.SearchV2ContinueArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async
  name: SearchV2Async
  nameWithType: FilesUserRoutes.SearchV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchV2Async
- uid: Dropbox.Api.Files.SearchV2Arg
  commentId: T:Dropbox.Api.Files.SearchV2Arg
  parent: Dropbox.Api.Files
  name: SearchV2Arg
  nameWithType: SearchV2Arg
  fullName: Dropbox.Api.Files.SearchV2Arg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.SearchV2Result}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<SearchV2Result>
  nameWithType: System.Threading.Tasks.Task<SearchV2Result>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.SearchV2Result>
  nameWithType.vb: System.Threading.Tasks.Task(Of SearchV2Result)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.SearchV2Result)
  name.vb: System.Threading.Tasks.Task(Of SearchV2Result)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.SearchV2Result
    name: SearchV2Result
    nameWithType: SearchV2Result
    fullName: Dropbox.Api.Files.SearchV2Result
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.SearchV2Result
    name: SearchV2Result
    nameWithType: SearchV2Result
    fullName: Dropbox.Api.Files.SearchV2Result
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2
  name: BeginSearchV2
  nameWithType: FilesUserRoutes.BeginSearchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchV2
- uid: Dropbox.Api.Files.SearchOptions
  commentId: T:Dropbox.Api.Files.SearchOptions
  parent: Dropbox.Api.Files
  name: SearchOptions
  nameWithType: SearchOptions
  fullName: Dropbox.Api.Files.SearchOptions
- uid: Dropbox.Api.Files.SearchMatchFieldOptions
  commentId: T:Dropbox.Api.Files.SearchMatchFieldOptions
  parent: Dropbox.Api.Files
  name: SearchMatchFieldOptions
  nameWithType: SearchMatchFieldOptions
  fullName: Dropbox.Api.Files.SearchMatchFieldOptions
- uid: System.Nullable{System.Boolean}
  commentId: '!:System.Nullable{System.Boolean}'
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2
  name: EndSearchV2
  nameWithType: FilesUserRoutes.EndSearchV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchV2
- uid: Dropbox.Api.Files.SearchV2Result
  commentId: T:Dropbox.Api.Files.SearchV2Result
  parent: Dropbox.Api.Files
  name: SearchV2Result
  nameWithType: SearchV2Result
  fullName: Dropbox.Api.Files.SearchV2Result
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async
  name: SearchContinueV2Async
  nameWithType: FilesUserRoutes.SearchContinueV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.SearchContinueV2Async
- uid: Dropbox.Api.Files.SearchV2ContinueArg
  commentId: T:Dropbox.Api.Files.SearchV2ContinueArg
  parent: Dropbox.Api.Files
  name: SearchV2ContinueArg
  nameWithType: SearchV2ContinueArg
  fullName: Dropbox.Api.Files.SearchV2ContinueArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2
  name: BeginSearchContinueV2
  nameWithType: FilesUserRoutes.BeginSearchContinueV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginSearchContinueV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2
  name: EndSearchContinueV2
  nameWithType: FilesUserRoutes.EndSearchContinueV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndSearchContinueV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync
  name: UnlockFileBatchAsync
  nameWithType: FilesUserRoutes.UnlockFileBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UnlockFileBatchAsync
- uid: Dropbox.Api.Files.UnlockFileBatchArg
  commentId: T:Dropbox.Api.Files.UnlockFileBatchArg
  parent: Dropbox.Api.Files
  name: UnlockFileBatchArg
  nameWithType: UnlockFileBatchArg
  fullName: Dropbox.Api.Files.UnlockFileBatchArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch
  name: BeginUnlockFileBatch
  nameWithType: FilesUserRoutes.BeginUnlockFileBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUnlockFileBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg}
  commentId: '!:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UnlockFileArg}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<UnlockFileArg>
  nameWithType: System.Collections.Generic.IEnumerable<UnlockFileArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UnlockFileArg>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of UnlockFileArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UnlockFileArg)
  name.vb: System.Collections.Generic.IEnumerable(Of UnlockFileArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UnlockFileArg
    name: UnlockFileArg
    nameWithType: UnlockFileArg
    fullName: Dropbox.Api.Files.UnlockFileArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UnlockFileArg
    name: UnlockFileArg
    nameWithType: UnlockFileArg
    fullName: Dropbox.Api.Files.UnlockFileArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch
  name: EndUnlockFileBatch
  nameWithType: FilesUserRoutes.EndUnlockFileBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUnlockFileBatch
- uid: Dropbox.Api.Files.UploadError
  commentId: T:Dropbox.Api.Files.UploadError
  parent: Dropbox.Api.Files
  name: UploadError
  nameWithType: UploadError
  fullName: Dropbox.Api.Files.UploadError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync
  name: UploadAsync
  nameWithType: FilesUserRoutes.UploadAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload
  name: BeginUpload
  nameWithType: FilesUserRoutes.BeginUpload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUpload
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload
  name: EndUpload
  nameWithType: FilesUserRoutes.EndUpload
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUpload
- uid: Dropbox.Api.Files.UploadSessionLookupError
  commentId: T:Dropbox.Api.Files.UploadSessionLookupError
  parent: Dropbox.Api.Files
  name: UploadSessionLookupError
  nameWithType: UploadSessionLookupError
  fullName: Dropbox.Api.Files.UploadSessionLookupError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async
  name: UploadSessionAppendV2Async
  nameWithType: FilesUserRoutes.UploadSessionAppendV2Async
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async
- uid: Dropbox.Api.Files.UploadSessionAppendArg
  commentId: T:Dropbox.Api.Files.UploadSessionAppendArg
  parent: Dropbox.Api.Files
  name: UploadSessionAppendArg
  nameWithType: UploadSessionAppendArg
  fullName: Dropbox.Api.Files.UploadSessionAppendArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2
  name: BeginUploadSessionAppendV2
  nameWithType: FilesUserRoutes.BeginUploadSessionAppendV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppendV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendV2Async(Dropbox.Api.Files.UploadSessionAppendArg,System.IO.Stream)
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionCursor
  commentId: T:Dropbox.Api.Files.UploadSessionCursor
  parent: Dropbox.Api.Files
  name: UploadSessionCursor
  nameWithType: UploadSessionCursor
  fullName: Dropbox.Api.Files.UploadSessionCursor
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2
  name: EndUploadSessionAppendV2
  nameWithType: FilesUserRoutes.EndUploadSessionAppendV2
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppendV2
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync
  name: UploadSessionAppendAsync
  nameWithType: FilesUserRoutes.UploadSessionAppendAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionAppendAsync
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend
  name: BeginUploadSessionAppend
  nameWithType: FilesUserRoutes.BeginUploadSessionAppend
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionAppend
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend
  name: EndUploadSessionAppend
  nameWithType: FilesUserRoutes.EndUploadSessionAppend
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionAppend
- uid: Dropbox.Api.Files.UploadSessionFinishError
  commentId: T:Dropbox.Api.Files.UploadSessionFinishError
  parent: Dropbox.Api.Files
  name: UploadSessionFinishError
  nameWithType: UploadSessionFinishError
  fullName: Dropbox.Api.Files.UploadSessionFinishError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync
  name: UploadSessionFinishAsync
  nameWithType: FilesUserRoutes.UploadSessionFinishAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync
- uid: Dropbox.Api.Files.UploadSessionFinishArg
  commentId: T:Dropbox.Api.Files.UploadSessionFinishArg
  parent: Dropbox.Api.Files
  name: UploadSessionFinishArg
  nameWithType: UploadSessionFinishArg
  fullName: Dropbox.Api.Files.UploadSessionFinishArg
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish
  name: BeginUploadSessionFinish
  nameWithType: FilesUserRoutes.BeginUploadSessionFinish
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinish
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish
  name: EndUploadSessionFinish
  nameWithType: FilesUserRoutes.EndUploadSessionFinish
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinish
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishAsync(Dropbox.Api.Files.UploadSessionFinishArg,System.IO.Stream)
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionStartArg.Close
  commentId: P:Dropbox.Api.Files.UploadSessionStartArg.Close
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionAppendArg.Close
  commentId: P:Dropbox.Api.Files.UploadSessionAppendArg.Close
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync(Dropbox.Api.Async.PollArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync
  name: UploadSessionFinishBatchAsync
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync
- uid: Dropbox.Api.Files.UploadSessionFinishBatchArg
  commentId: T:Dropbox.Api.Files.UploadSessionFinishBatchArg
  parent: Dropbox.Api.Files
  name: UploadSessionFinishBatchArg
  nameWithType: UploadSessionFinishBatchArg
  fullName: Dropbox.Api.Files.UploadSessionFinishBatchArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchLaunch}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchLaunch}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<UploadSessionFinishBatchLaunch>
  nameWithType: System.Threading.Tasks.Task<UploadSessionFinishBatchLaunch>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.UploadSessionFinishBatchLaunch>
  nameWithType.vb: System.Threading.Tasks.Task(Of UploadSessionFinishBatchLaunch)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.UploadSessionFinishBatchLaunch)
  name.vb: System.Threading.Tasks.Task(Of UploadSessionFinishBatchLaunch)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
    name: UploadSessionFinishBatchLaunch
    nameWithType: UploadSessionFinishBatchLaunch
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
    name: UploadSessionFinishBatchLaunch
    nameWithType: UploadSessionFinishBatchLaunch
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch
  name: BeginUploadSessionFinishBatch
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatch
- uid: System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}
  commentId: '!:System.Collections.Generic.IEnumerable{Dropbox.Api.Files.UploadSessionFinishArg}'
  definition: System.Collections.Generic.IEnumerable`1
  name: System.Collections.Generic.IEnumerable<UploadSessionFinishArg>
  nameWithType: System.Collections.Generic.IEnumerable<UploadSessionFinishArg>
  fullName: System.Collections.Generic.IEnumerable<Dropbox.Api.Files.UploadSessionFinishArg>
  nameWithType.vb: System.Collections.Generic.IEnumerable(Of UploadSessionFinishArg)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Dropbox.Api.Files.UploadSessionFinishArg)
  name.vb: System.Collections.Generic.IEnumerable(Of UploadSessionFinishArg)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionFinishArg
    name: UploadSessionFinishArg
    nameWithType: UploadSessionFinishArg
    fullName: Dropbox.Api.Files.UploadSessionFinishArg
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: System.Collections.Generic.IEnumerable
    nameWithType: System.Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionFinishArg
    name: UploadSessionFinishArg
    nameWithType: UploadSessionFinishArg
    fullName: Dropbox.Api.Files.UploadSessionFinishArg
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch
  name: EndUploadSessionFinishBatch
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatch
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatch
- uid: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
  commentId: T:Dropbox.Api.Files.UploadSessionFinishBatchLaunch
  parent: Dropbox.Api.Files
  name: UploadSessionFinishBatchLaunch
  nameWithType: UploadSessionFinishBatchLaunch
  fullName: Dropbox.Api.Files.UploadSessionFinishBatchLaunch
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  commentId: M:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchAsync(Dropbox.Api.Files.UploadSessionFinishBatchArg)
  isExternal: true
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync
  name: UploadSessionFinishBatchCheckAsync
  nameWithType: FilesUserRoutes.UploadSessionFinishBatchCheckAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionFinishBatchCheckAsync
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchJobStatus}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionFinishBatchJobStatus}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<UploadSessionFinishBatchJobStatus>
  nameWithType: System.Threading.Tasks.Task<UploadSessionFinishBatchJobStatus>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.UploadSessionFinishBatchJobStatus>
  nameWithType.vb: System.Threading.Tasks.Task(Of UploadSessionFinishBatchJobStatus)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.UploadSessionFinishBatchJobStatus)
  name.vb: System.Threading.Tasks.Task(Of UploadSessionFinishBatchJobStatus)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
    name: UploadSessionFinishBatchJobStatus
    nameWithType: UploadSessionFinishBatchJobStatus
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
    name: UploadSessionFinishBatchJobStatus
    nameWithType: UploadSessionFinishBatchJobStatus
    fullName: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck
  name: BeginUploadSessionFinishBatchCheck
  nameWithType: FilesUserRoutes.BeginUploadSessionFinishBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionFinishBatchCheck
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck
  name: EndUploadSessionFinishBatchCheck
  nameWithType: FilesUserRoutes.EndUploadSessionFinishBatchCheck
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionFinishBatchCheck
- uid: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
  commentId: T:Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
  parent: Dropbox.Api.Files
  name: UploadSessionFinishBatchJobStatus
  nameWithType: UploadSessionFinishBatchJobStatus
  fullName: Dropbox.Api.Files.UploadSessionFinishBatchJobStatus
- uid: Dropbox.Api.Files.UploadSessionStartResult.SessionId
  commentId: P:Dropbox.Api.Files.UploadSessionStartResult.SessionId
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionLookupError.NotFound
  commentId: T:Dropbox.Api.Files.UploadSessionLookupError.NotFound
  parent: Dropbox.Api.Files
  name: UploadSessionLookupError.NotFound
  nameWithType: UploadSessionLookupError.NotFound
  fullName: Dropbox.Api.Files.UploadSessionLookupError.NotFound
- uid: Dropbox.Api.Files.UploadSessionType.Concurrent
  commentId: T:Dropbox.Api.Files.UploadSessionType.Concurrent
  parent: Dropbox.Api.Files
  name: UploadSessionType.Concurrent
  nameWithType: UploadSessionType.Concurrent
  fullName: Dropbox.Api.Files.UploadSessionType.Concurrent
- uid: Dropbox.Api.Files.UploadSessionStartArg.SessionType
  commentId: P:Dropbox.Api.Files.UploadSessionStartArg.SessionType
  isExternal: true
- uid: Dropbox.Api.Files.UploadSessionStartError
  commentId: T:Dropbox.Api.Files.UploadSessionStartError
  parent: Dropbox.Api.Files
  name: UploadSessionStartError
  nameWithType: UploadSessionStartError
  fullName: Dropbox.Api.Files.UploadSessionStartError
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync
  name: UploadSessionStartAsync
  nameWithType: FilesUserRoutes.UploadSessionStartAsync
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.UploadSessionStartAsync
- uid: Dropbox.Api.Files.UploadSessionStartArg
  commentId: T:Dropbox.Api.Files.UploadSessionStartArg
  parent: Dropbox.Api.Files
  name: UploadSessionStartArg
  nameWithType: UploadSessionStartArg
  fullName: Dropbox.Api.Files.UploadSessionStartArg
- uid: System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartResult}
  commentId: '!:System.Threading.Tasks.Task{Dropbox.Api.Files.UploadSessionStartResult}'
  definition: System.Threading.Tasks.Task`1
  name: System.Threading.Tasks.Task<UploadSessionStartResult>
  nameWithType: System.Threading.Tasks.Task<UploadSessionStartResult>
  fullName: System.Threading.Tasks.Task<Dropbox.Api.Files.UploadSessionStartResult>
  nameWithType.vb: System.Threading.Tasks.Task(Of UploadSessionStartResult)
  fullName.vb: System.Threading.Tasks.Task(Of Dropbox.Api.Files.UploadSessionStartResult)
  name.vb: System.Threading.Tasks.Task(Of UploadSessionStartResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Dropbox.Api.Files.UploadSessionStartResult
    name: UploadSessionStartResult
    nameWithType: UploadSessionStartResult
    fullName: Dropbox.Api.Files.UploadSessionStartResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: System.Threading.Tasks.Task
    nameWithType: System.Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Dropbox.Api.Files.UploadSessionStartResult
    name: UploadSessionStartResult
    nameWithType: UploadSessionStartResult
    fullName: Dropbox.Api.Files.UploadSessionStartResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart
  name: BeginUploadSessionStart
  nameWithType: FilesUserRoutes.BeginUploadSessionStart
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.BeginUploadSessionStart
- uid: Dropbox.Api.Files.UploadSessionType.Sequential
  commentId: T:Dropbox.Api.Files.UploadSessionType.Sequential
  parent: Dropbox.Api.Files
  name: UploadSessionType.Sequential
  nameWithType: UploadSessionType.Sequential
  fullName: Dropbox.Api.Files.UploadSessionType.Sequential
- uid: Dropbox.Api.Files.UploadSessionType
  commentId: T:Dropbox.Api.Files.UploadSessionType
  parent: Dropbox.Api.Files
  name: UploadSessionType
  nameWithType: UploadSessionType
  fullName: Dropbox.Api.Files.UploadSessionType
- uid: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart*
  commentId: Overload:Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart
  name: EndUploadSessionStart
  nameWithType: FilesUserRoutes.EndUploadSessionStart
  fullName: Dropbox.Api.Files.Routes.FilesUserRoutes.EndUploadSessionStart
- uid: Dropbox.Api.Files.UploadSessionStartResult
  commentId: T:Dropbox.Api.Files.UploadSessionStartResult
  parent: Dropbox.Api.Files
  name: UploadSessionStartResult
  nameWithType: UploadSessionStartResult
  fullName: Dropbox.Api.Files.UploadSessionStartResult
shouldSkipMarkup: true
